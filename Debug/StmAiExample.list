
StmAiExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c1b4  0800be00  0800be00  0001be00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017fb4  08017fb4  000309b0  2**0
                  CONTENTS
  4 .ARM          00000008  08017fb4  08017fb4  00027fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017fbc  08017fbc  000309b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017fbc  08017fbc  00027fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017fc0  08017fc0  00027fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b0  20000000  08017fc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  200009b0  08018974  000309b0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001340  08018974  00031340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b7f  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380c  00000000  00000000  0005555f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00058d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0005a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e4c  00000000  00000000  0005bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a484  00000000  00000000  00085be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd1a7  00000000  00000000  000a0068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0019d20f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078cc  00000000  00000000  0019d2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001a4bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001a4c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009b0 	.word	0x200009b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bddc 	.word	0x0800bddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009b4 	.word	0x200009b4
 80001cc:	0800bddc 	.word	0x0800bddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <initializeCRC>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void initializeCRC(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <initializeCRC+0x3c>)
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <initializeCRC+0x40>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <initializeCRC+0x3c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <initializeCRC+0x3c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <initializeCRC+0x3c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <initializeCRC+0x3c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <initializeCRC+0x3c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <initializeCRC+0x3c>)
 8000eca:	f002 f8d3 	bl	8003074 <HAL_CRC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <initializeCRC+0x38>
  {
	  errorHandler();
 8000ed4:	f000 f806 	bl	8000ee4 <errorHandler>
  }

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000a7c 	.word	0x20000a7c
 8000ee0:	40023000 	.word	0x40023000

08000ee4 <errorHandler>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void errorHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
	__disable_irq();
	// TODO write Log message
	while(1)
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <errorHandler+0x1c>)
 8000ef2:	f002 fc5f 	bl	80037b4 <HAL_GPIO_TogglePin>
		HAL_Delay(50); /* wait 50 ms */
 8000ef6:	2032      	movs	r0, #50	; 0x32
 8000ef8:	f001 ff86 	bl	8002e08 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000efc:	e7f6      	b.n	8000eec <errorHandler+0x8>
 8000efe:	bf00      	nop
 8000f00:	48000400 	.word	0x48000400

08000f04 <initializeGPIOs>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void initializeGPIOs(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4bba      	ldr	r3, [pc, #744]	; (8001204 <initializeGPIOs+0x300>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4ab9      	ldr	r2, [pc, #740]	; (8001204 <initializeGPIOs+0x300>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4bb7      	ldr	r3, [pc, #732]	; (8001204 <initializeGPIOs+0x300>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4bb4      	ldr	r3, [pc, #720]	; (8001204 <initializeGPIOs+0x300>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4ab3      	ldr	r2, [pc, #716]	; (8001204 <initializeGPIOs+0x300>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4bb1      	ldr	r3, [pc, #708]	; (8001204 <initializeGPIOs+0x300>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4bae      	ldr	r3, [pc, #696]	; (8001204 <initializeGPIOs+0x300>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4aad      	ldr	r2, [pc, #692]	; (8001204 <initializeGPIOs+0x300>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4bab      	ldr	r3, [pc, #684]	; (8001204 <initializeGPIOs+0x300>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4ba8      	ldr	r3, [pc, #672]	; (8001204 <initializeGPIOs+0x300>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4aa7      	ldr	r2, [pc, #668]	; (8001204 <initializeGPIOs+0x300>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4ba5      	ldr	r3, [pc, #660]	; (8001204 <initializeGPIOs+0x300>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4ba2      	ldr	r3, [pc, #648]	; (8001204 <initializeGPIOs+0x300>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aa1      	ldr	r2, [pc, #644]	; (8001204 <initializeGPIOs+0x300>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b9f      	ldr	r3, [pc, #636]	; (8001204 <initializeGPIOs+0x300>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f98:	489b      	ldr	r0, [pc, #620]	; (8001208 <initializeGPIOs+0x304>)
 8000f9a:	f002 fbf3 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f002 fbec 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000fac:	2200      	movs	r2, #0
 8000fae:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000fb2:	4896      	ldr	r0, [pc, #600]	; (800120c <initializeGPIOs+0x308>)
 8000fb4:	f002 fbe6 	bl	8003784 <HAL_GPIO_WritePin>
						  |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f241 0181 	movw	r1, #4225	; 0x1081
 8000fbe:	4894      	ldr	r0, [pc, #592]	; (8001210 <initializeGPIOs+0x30c>)
 8000fc0:	f002 fbe0 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	4891      	ldr	r0, [pc, #580]	; (8001210 <initializeGPIOs+0x30c>)
 8000fcc:	f002 fbda 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000fd6:	488f      	ldr	r0, [pc, #572]	; (8001214 <initializeGPIOs+0x310>)
 8000fd8:	f002 fbd4 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2120      	movs	r1, #32
 8000fe0:	488a      	ldr	r0, [pc, #552]	; (800120c <initializeGPIOs+0x308>)
 8000fe2:	f002 fbcf 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4887      	ldr	r0, [pc, #540]	; (8001208 <initializeGPIOs+0x304>)
 8000fec:	f002 fbca 	bl	8003784 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ff0:	f240 1315 	movw	r3, #277	; 0x115
 8000ff4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	487f      	ldr	r0, [pc, #508]	; (8001208 <initializeGPIOs+0x304>)
 800100a:	f002 f91d 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800100e:	236a      	movs	r3, #106	; 0x6a
 8001010:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	4b81      	ldr	r3, [pc, #516]	; (8001218 <initializeGPIOs+0x314>)
 8001014:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4879      	ldr	r0, [pc, #484]	; (8001208 <initializeGPIOs+0x304>)
 8001022:	f002 f911 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_EXTI13_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102c:	4b7b      	ldr	r3, [pc, #492]	; (800121c <initializeGPIOs+0x318>)
 800102e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4876      	ldr	r0, [pc, #472]	; (8001214 <initializeGPIOs+0x310>)
 800103c:	f002 f904 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
						   ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001040:	233f      	movs	r3, #63	; 0x3f
 8001042:	617b      	str	r3, [r7, #20]
						  |ARD_A1_Pin|ARD_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001044:	230b      	movs	r3, #11
 8001046:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4870      	ldr	r0, [pc, #448]	; (8001214 <initializeGPIOs+0x310>)
 8001054:	f002 f8f8 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
	GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001058:	2303      	movs	r3, #3
 800105a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001068:	2308      	movs	r3, #8
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f002 f8e7 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800107a:	f248 1304 	movw	r3, #33028	; 0x8104
 800107e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f002 f8d7 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D4_Pin */
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f002 f8c6 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D7_Pin */
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 80010bc:	2310      	movs	r3, #16
 80010be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010c0:	230b      	movs	r3, #11
 80010c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f002 f8b9 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80010d6:	23e0      	movs	r3, #224	; 0xe0
 80010d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e6:	2305      	movs	r3, #5
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f002 f8a8 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fc:	4b46      	ldr	r3, [pc, #280]	; (8001218 <initializeGPIOs+0x314>)
 80010fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4840      	ldr	r0, [pc, #256]	; (800120c <initializeGPIOs+0x308>)
 800110c:	f002 f89c 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001110:	2302      	movs	r3, #2
 8001112:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001114:	230b      	movs	r3, #11
 8001116:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	483a      	ldr	r0, [pc, #232]	; (800120c <initializeGPIOs+0x308>)
 8001124:	f002 f890 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
						   SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001128:	f24f 0334 	movw	r3, #61492	; 0xf034
 800112c:	617b      	str	r3, [r7, #20]
						  |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4832      	ldr	r0, [pc, #200]	; (800120c <initializeGPIOs+0x308>)
 8001142:	f002 f881 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
	GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001146:	f44f 7320 	mov.w	r3, #640	; 0x280
 800114a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001158:	2306      	movs	r3, #6
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <initializeGPIOs+0x304>)
 8001164:	f002 f870 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
						   QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
	GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001168:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800116c:	617b      	str	r3, [r7, #20]
						  |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800117a:	230a      	movs	r3, #10
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4820      	ldr	r0, [pc, #128]	; (8001208 <initializeGPIOs+0x304>)
 8001186:	f002 f85f 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
	GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800119c:	2307      	movs	r3, #7
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	481a      	ldr	r0, [pc, #104]	; (8001210 <initializeGPIOs+0x30c>)
 80011a8:	f002 f84e 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
						   PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80011ac:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80011b0:	617b      	str	r3, [r7, #20]
						  |PMOD_IRQ_EXTI12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <initializeGPIOs+0x314>)
 80011b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <initializeGPIOs+0x30c>)
 80011c2:	f002 f841 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80011c6:	f243 0381 	movw	r3, #12417	; 0x3081
 80011ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <initializeGPIOs+0x30c>)
 80011e0:	f002 f832 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80011e4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <initializeGPIOs+0x310>)
 80011fe:	f002 f823 	bl	8003248 <HAL_GPIO_Init>
 8001202:	e00d      	b.n	8001220 <initializeGPIOs+0x31c>
 8001204:	40021000 	.word	0x40021000
 8001208:	48001000 	.word	0x48001000
 800120c:	48000400 	.word	0x48000400
 8001210:	48000c00 	.word	0x48000c00
 8001214:	48000800 	.word	0x48000800
 8001218:	10110000 	.word	0x10110000
 800121c:	10210000 	.word	0x10210000

	/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001220:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001224:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <initializeGPIOs+0x424>)
 8001228:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	483d      	ldr	r0, [pc, #244]	; (800132c <initializeGPIOs+0x428>)
 8001236:	f002 f807 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800123a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f001 fff9 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001256:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800125a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001268:	230a      	movs	r3, #10
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f001 ffe7 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
	GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800127a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800127e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800128c:	2306      	movs	r3, #6
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4825      	ldr	r0, [pc, #148]	; (800132c <initializeGPIOs+0x428>)
 8001298:	f001 ffd6 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ac:	2305      	movs	r3, #5
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <initializeGPIOs+0x42c>)
 80012b8:	f001 ffc6 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80012bc:	2378      	movs	r3, #120	; 0x78
 80012be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012cc:	2307      	movs	r3, #7
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <initializeGPIOs+0x42c>)
 80012d8:	f001 ffb6 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80012dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e2:	2312      	movs	r3, #18
 80012e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ee:	2304      	movs	r3, #4
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <initializeGPIOs+0x430>)
 80012fa:	f001 ffa5 	bl	8003248 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2017      	movs	r0, #23
 8001304:	f001 fe7f 	bl	8003006 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001308:	2017      	movs	r0, #23
 800130a:	f001 fe98 	bl	800303e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2028      	movs	r0, #40	; 0x28
 8001314:	f001 fe77 	bl	8003006 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001318:	2028      	movs	r0, #40	; 0x28
 800131a:	f001 fe90 	bl	800303e <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	10110000 	.word	0x10110000
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48000400 	.word	0x48000400

08001338 <writeLoggingMessage>:
static void writeMessageToStLink(uint8_t* message, uint16_t length);
static void writeMessageToUsb(void);

/* Private user code ---------------------------------------------------------*/
void writeLoggingMessage(uint8_t* message)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

	strcat(message, "\r\n");
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7fe ff45 	bl	80001d0 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <writeLoggingMessage+0x40>)
 8001350:	8811      	ldrh	r1, [r2, #0]
 8001352:	7892      	ldrb	r2, [r2, #2]
 8001354:	8019      	strh	r1, [r3, #0]
 8001356:	709a      	strb	r2, [r3, #2]

	if (useStLinkForLogging)
	{
		writeMessageToStLink(message, strlen(message));
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7fe ff39 	bl	80001d0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29b      	uxth	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f809 	bl	800137c <writeMessageToStLink>
	}
	if (useUsbForLogging)
	{
		writeMessageToUsb();
 800136a:	f000 f817 	bl	800139c <writeMessageToUsb>
	}
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0800be00 	.word	0x0800be00

0800137c <writeMessageToStLink>:

static void writeMessageToStLink(uint8_t* message, uint16_t length)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]

	uart1_transmit(message, length);
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f883 	bl	8001498 <uart1_transmit>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <writeMessageToUsb>:

static void writeMessageToUsb(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	printf("USB was used for Logging\r\n");
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <writeMessageToUsb+0x10>)
 80013a2:	f008 fc13 	bl	8009bcc <puts>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800be04 	.word	0x0800be04

080013b0 <initializeSystemClock>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void initializeSystemClock(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2244      	movs	r2, #68	; 0x44
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 fe7a 	bl	80090b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d6:	f002 fffb 	bl	80043d0 <HAL_PWREx_ControlVoltageScaling>
//		Error_Handler();
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013da:	2310      	movs	r3, #16
 80013dc:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013de:	2301      	movs	r3, #1
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013e6:	2360      	movs	r3, #96	; 0x60
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80013f6:	2328      	movs	r3, #40	; 0x28
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013fa:	2307      	movs	r3, #7
 80013fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4618      	mov	r0, r3
 800140c:	f003 f836 	bl	800447c <HAL_RCC_OscConfig>
	{
//		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2303      	movs	r3, #3
 8001416:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	2104      	movs	r1, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fc0d 	bl	8004c48 <HAL_RCC_ClockConfig>
	{
//		Error_Handler();
	}
}
 800142e:	bf00      	nop
 8001430:	3758      	adds	r7, #88	; 0x58
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <initializeUart1>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void initializeUart1(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <initializeUart1+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <initializeUart1+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <initializeUart1+0x58>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <initializeUart1+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <initializeUart1+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <initializeUart1+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <initializeUart1+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <initializeUart1+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <initializeUart1+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <initializeUart1+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <initializeUart1+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <initializeUart1+0x58>)
 800147c:	f004 faa6 	bl	80059cc <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <initializeUart1+0x52>
	{
		errorHandler();
 8001486:	f7ff fd2d 	bl	8000ee4 <errorHandler>
	}
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000aa0 	.word	0x20000aa0
 8001494:	40013800 	.word	0x40013800

08001498 <uart1_transmit>:

void uart1_transmit(uint8_t* pointer, uint16_t length)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, pointer, length, HAL_MAX_DELAY);
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <uart1_transmit+0x24>)
 80014ae:	f004 fadb 	bl	8005a68 <HAL_UART_Transmit>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000aa0 	.word	0x20000aa0

080014c0 <_write>:

int _write(int fd, char * ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <_write+0x28>)
 80014d8:	f004 fac6 	bl	8005a68 <HAL_UART_Transmit>
  return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000aa0 	.word	0x20000aa0

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f001 fc14 	bl	8002d1e <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
//  SystemClock_Config();
  initializeSystemClock();
 80014f6:	f7ff ff5b 	bl	80013b0 <initializeSystemClock>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  initializeGPIOs();
 80014fa:	f7ff fd03 	bl	8000f04 <initializeGPIOs>
  initializeUart1();
 80014fe:	f7ff ff9b 	bl	8001438 <initializeUart1>
  initializeCRC();
 8001502:	f7ff fccd 	bl	8000ea0 <initializeCRC>
  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <main+0xe0>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 800150c:	f000 f86c 	bl	80015e8 <MEMS_Init>
  AI_Init(ai_network_data_weights_get(), activations);
 8001510:	f005 f8a4 	bl	800665c <ai_network_data_weights_get>
 8001514:	4603      	mov	r3, r0
 8001516:	492e      	ldr	r1, [pc, #184]	; (80015d0 <main+0xe4>)
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f8c5 	bl	80016a8 <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  writeLoggingMessage("Start Main\r\n");
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <main+0xe8>)
 8001520:	f7ff ff0a 	bl	8001338 <writeLoggingMessage>

  uint32_t write_index = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  while (1)
  {
    if (dataRdyIntReceived != 0) {
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <main+0xe0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0fb      	beq.n	8001528 <main+0x3c>
      dataRdyIntReceived = 0;
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <main+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
      LSM6DSL_Axes_t acc_axes;
      LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4827      	ldr	r0, [pc, #156]	; (80015d8 <main+0xec>)
 800153c:	f000 fdfe 	bl	800213c <LSM6DSL_ACC_GetAxes>
      // printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);

      /* Normalize data to [-1; 1] and accumulate into input buffer */
      /* Note: window overlapping can be managed here */
      aiInData[write_index + 0] = (float) acc_axes.x / 4000.0f;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80015dc <main+0xf0>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <main+0xf4>)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edc3 7a00 	vstr	s15, [r3]
      aiInData[write_index + 1] = (float) acc_axes.y / 4000.0f;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80015dc <main+0xf0>
 8001570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <main+0xf4>)
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	edc3 7a00 	vstr	s15, [r3]
      aiInData[write_index + 2] = (float) acc_axes.z / 4000.0f;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3302      	adds	r3, #2
 800158c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80015dc <main+0xf0>
 8001590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <main+0xf4>)
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	edc3 7a00 	vstr	s15, [r3]
      write_index += 3;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3303      	adds	r3, #3
 80015a2:	617b      	str	r3, [r7, #20]

      if (write_index == AI_NETWORK_IN_1_SIZE) {
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b4e      	cmp	r3, #78	; 0x4e
 80015a8:	d1be      	bne.n	8001528 <main+0x3c>
        write_index = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

//        printf("Running inference\r\n");
        AI_Run(aiInData, aiOutData);
 80015ae:	490d      	ldr	r1, [pc, #52]	; (80015e4 <main+0xf8>)
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <main+0xf4>)
 80015b2:	f000 f8c9 	bl	8001748 <AI_Run>

        /* Output results */
        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	e002      	b.n	80015c2 <main+0xd6>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	3301      	adds	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d9f9      	bls.n	80015bc <main+0xd0>
    if (dataRdyIntReceived != 0) {
 80015c8:	e7ae      	b.n	8001528 <main+0x3c>
 80015ca:	bf00      	nop
 80015cc:	20000b30 	.word	0x20000b30
 80015d0:	20000b34 	.word	0x20000b34
 80015d4:	0800be3c 	.word	0x0800be3c
 80015d8:	20001174 	.word	0x20001174
 80015dc:	457a0000 	.word	0x457a0000
 80015e0:	200011a4 	.word	0x200011a4
 80015e4:	20000b24 	.word	0x20000b24

080015e8 <MEMS_Init>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 80015f2:	23d5      	movs	r3, #213	; 0xd5
 80015f4:	763b      	strb	r3, [r7, #24]
  io_ctx.Init        = BSP_I2C2_Init;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MEMS_Init+0x7c>)
 80015f8:	60fb      	str	r3, [r7, #12]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MEMS_Init+0x80>)
 80015fc:	613b      	str	r3, [r7, #16]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MEMS_Init+0x84>)
 8001600:	623b      	str	r3, [r7, #32]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MEMS_Init+0x88>)
 8001604:	61fb      	str	r3, [r7, #28]
  io_ctx.GetTick     = BSP_GetTick;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MEMS_Init+0x8c>)
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <MEMS_Init+0x90>)
 8001612:	f000 fbdb 	bl	8001dcc <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8001616:	f107 030b 	add.w	r3, r7, #11
 800161a:	4619      	mov	r1, r3
 800161c:	4816      	ldr	r0, [pc, #88]	; (8001678 <MEMS_Init+0x90>)
 800161e:	f000 fca4 	bl	8001f6a <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	2b6a      	cmp	r3, #106	; 0x6a
 8001626:	d001      	beq.n	800162c <MEMS_Init+0x44>
	  errorHandler();
 8001628:	f7ff fc5c 	bl	8000ee4 <errorHandler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <MEMS_Init+0x90>)
 800162e:	f000 fc33 	bl	8001e98 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8001632:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8001636:	4810      	ldr	r0, [pc, #64]	; (8001678 <MEMS_Init+0x90>)
 8001638:	f000 fd18 	bl	800206c <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 800163c:	2104      	movs	r1, #4
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <MEMS_Init+0x90>)
 8001640:	f000 fd30 	bl	80020a4 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8001644:	2101      	movs	r1, #1
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <MEMS_Init+0x90>)
 8001648:	f000 fdea 	bl	8002220 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <MEMS_Init+0x90>)
 8001652:	f000 fd4f 	bl	80020f4 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <MEMS_Init+0x90>)
 8001658:	f000 fc9d 	bl	8001f96 <LSM6DSL_ACC_Enable>
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08001add 	.word	0x08001add
 8001668:	08001b59 	.word	0x08001b59
 800166c:	08001c0d 	.word	0x08001c0d
 8001670:	08001ba9 	.word	0x08001ba9
 8001674:	08001c71 	.word	0x08001c71
 8001678:	20001174 	.word	0x20001174

0800167c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800168c:	d104      	bne.n	8001698 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001696:	6013      	str	r3, [r2, #0]
  }
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000b30 	.word	0x20000b30

080016a8 <AI_Init>:



static void AI_Init(ai_handle w_addr, ai_handle act_addr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80016b2:	2100      	movs	r1, #0
 80016b4:	4821      	ldr	r0, [pc, #132]	; (800173c <AI_Init+0x94>)
 80016b6:	f004 ff6f 	bl	8006598 <ai_network_create>
 80016ba:	4603      	mov	r3, r0
 80016bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80016be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <AI_Init+0x22>
//    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
	  errorHandler();
 80016c6:	f7ff fc0d 	bl	8000ee4 <errorHandler>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <AI_Init+0x98>)
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	2301      	movs	r3, #1
 80016d0:	823b      	strh	r3, [r7, #16]
 80016d2:	2301      	movs	r3, #1
 80016d4:	827b      	strh	r3, [r7, #18]
 80016d6:	2301      	movs	r3, #1
 80016d8:	82bb      	strh	r3, [r7, #20]
 80016da:	f64b 43ac 	movw	r3, #48300	; 0xbcac
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <AI_Init+0x9c>)
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
 80016ec:	2301      	movs	r3, #1
 80016ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80016f0:	2301      	movs	r3, #1
 80016f2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80016f4:	2301      	movs	r3, #1
 80016f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80016f8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
 8001702:	2300      	movs	r3, #0
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
    AI_NETWORK_DATA_WEIGHTS(w_addr),
    AI_NETWORK_DATA_ACTIVATIONS(act_addr)
  );

  if (!ai_network_init(network, &params)) {
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <AI_Init+0x94>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f107 020c 	add.w	r2, r7, #12
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f004 ff57 	bl	80065c4 <ai_network_init>
 8001716:	4603      	mov	r3, r0
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <AI_Init+0x8c>
    err = ai_network_get_error(network);
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <AI_Init+0x94>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f004 ff2a 	bl	8006580 <ai_network_get_error>
 800172c:	4603      	mov	r3, r0
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
//    printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
	  errorHandler();
 8001730:	f7ff fbd8 	bl	8000ee4 <errorHandler>
  }
}
 8001734:	bf00      	nop
 8001736:	3740      	adds	r7, #64	; 0x40
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200012dc 	.word	0x200012dc
 8001740:	40040440 	.word	0x40040440
 8001744:	00040440 	.word	0x00040440

08001748 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b090      	sub	sp, #64	; 0x40
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* 1 - Create the AI buffer IO handlers with the default definition */
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <AI_Run+0x78>)
 8001754:	f107 0420 	add.w	r4, r7, #32
 8001758:	461d      	mov	r5, r3
 800175a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001762:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <AI_Run+0x7c>)
 8001768:	f107 0408 	add.w	r4, r7, #8
 800176c:	461d      	mov	r5, r3
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	e884 0003 	stmia.w	r4, {r0, r1}

  /* 2 - Update IO handlers with the data payload */
  ai_input[0].n_batches = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	84bb      	strh	r3, [r7, #36]	; 0x24
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
  ai_output[0].n_batches = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	81bb      	strh	r3, [r7, #12]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	61bb      	str	r3, [r7, #24]

  batch = ai_network_run(network, ai_input, ai_output);
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <AI_Run+0x80>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f107 0208 	add.w	r2, r7, #8
 8001792:	f107 0120 	add.w	r1, r7, #32
 8001796:	4618      	mov	r0, r3
 8001798:	f004 ff50 	bl	800663c <ai_network_run>
 800179c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (batch != 1) {
 800179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d008      	beq.n	80017b6 <AI_Run+0x6e>
    err = ai_network_get_error(network);
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <AI_Run+0x80>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fee9 	bl	8006580 <ai_network_get_error>
 80017ae:	4603      	mov	r3, r0
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
//    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
	  errorHandler();
 80017b2:	f7ff fb97 	bl	8000ee4 <errorHandler>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3740      	adds	r7, #64	; 0x40
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800be4c 	.word	0x0800be4c
 80017c4:	0800be64 	.word	0x0800be64
 80017c8:	200012dc 	.word	0x200012dc

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x44>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x44>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_CRC_MspInit+0x38>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10b      	bne.n	800183e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_CRC_MspInit+0x3c>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_CRC_MspInit+0x3c>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001830:	6493      	str	r3, [r2, #72]	; 0x48
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_CRC_MspInit+0x3c>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023000 	.word	0x40023000
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0ac      	sub	sp, #176	; 0xb0
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2288      	movs	r2, #136	; 0x88
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f007 fc1f 	bl	80090b8 <memset>
  if(huart->Instance==USART1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_UART_MspInit+0xb0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d13a      	bne.n	80018fa <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fbdf 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_MspInit+0x4c>
    {
  	  errorHandler();
 800189c:	f7ff fb22 	bl	8000ee4 <errorHandler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_UART_MspInit+0xb4>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_UART_MspInit+0xb4>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6613      	str	r3, [r2, #96]	; 0x60
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_UART_MspInit+0xb4>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_UART_MspInit+0xb4>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_UART_MspInit+0xb4>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_UART_MspInit+0xb4>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018d0:	23c0      	movs	r3, #192	; 0xc0
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_UART_MspInit+0xb8>)
 80018f6:	f001 fca7 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	37b0      	adds	r7, #176	; 0xb0
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013800 	.word	0x40013800
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f001 fa34 	bl	8002dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001968:	2020      	movs	r0, #32
 800196a:	f001 ff3d 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800196e:	2040      	movs	r0, #64	; 0x40
 8001970:	f001 ff3a 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001974:	2080      	movs	r0, #128	; 0x80
 8001976:	f001 ff37 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800197a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800197e:	f001 ff33 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}

08001986 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800198a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800198e:	f001 ff2b 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001992:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001996:	f001 ff27 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800199a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800199e:	f001 ff23 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80019a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019a6:	f001 ff1f 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80019aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019ae:	f001 ff1b 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f007 fb26 	bl	8009038 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20018000 	.word	0x20018000
 8001a18:	00000800 	.word	0x00000800
 8001a1c:	200009cc 	.word	0x200009cc
 8001a20:	20001340 	.word	0x20001340

08001a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <SystemInit+0x5c>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <SystemInit+0x5c>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <SystemInit+0x60>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <SystemInit+0x60>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <SystemInit+0x60>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <SystemInit+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <SystemInit+0x60>)
 8001a50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <SystemInit+0x60>)
 8001a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <SystemInit+0x60>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <SystemInit+0x60>)
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SystemInit+0x60>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	40021000 	.word	0x40021000

08001a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff ffca 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a9c:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
	ldr	r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ab2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f007 fac5 	bl	8009044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aba:	f7ff fd17 	bl	80014ec <main>

08001abe <LoopForever>:

LoopForever:
    b LoopForever
 8001abe:	e7fe      	b.n	8001abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ac4:	08017fc4 	.word	0x08017fc4
	ldr	r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001acc:	200009b0 	.word	0x200009b0
	ldr	r2, =_sbss
 8001ad0:	200009b0 	.word	0x200009b0
	ldr	r3, = _ebss
 8001ad4:	20001340 	.word	0x20001340

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <BSP_I2C2_Init+0x70>)
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <BSP_I2C2_Init+0x74>)
 8001aea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <BSP_I2C2_Init+0x78>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	4918      	ldr	r1, [pc, #96]	; (8001b54 <BSP_I2C2_Init+0x78>)
 8001af4:	600a      	str	r2, [r1, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d122      	bne.n	8001b40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001afa:	4814      	ldr	r0, [pc, #80]	; (8001b4c <BSP_I2C2_Init+0x70>)
 8001afc:	f002 f98c 	bl	8003e18 <HAL_I2C_GetState>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11c      	bne.n	8001b40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001b06:	4811      	ldr	r0, [pc, #68]	; (8001b4c <BSP_I2C2_Init+0x70>)
 8001b08:	f000 f8fe 	bl	8001d08 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <BSP_I2C2_Init+0x70>)
 8001b14:	f000 f8b4 	bl	8001c80 <MX_I2C2_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001b1e:	f06f 0307 	mvn.w	r3, #7
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	e00c      	b.n	8001b40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <BSP_I2C2_Init+0x70>)
 8001b2a:	f002 fbab 	bl	8004284 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001b34:	f06f 0307 	mvn.w	r3, #7
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e001      	b.n	8001b40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200012e0 	.word	0x200012e0
 8001b50:	40005800 	.word	0x40005800
 8001b54:	200009d0 	.word	0x200009d0

08001b58 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <BSP_I2C2_DeInit+0x48>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d014      	beq.n	8001b94 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <BSP_I2C2_DeInit+0x48>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <BSP_I2C2_DeInit+0x48>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <BSP_I2C2_DeInit+0x48>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10b      	bne.n	8001b94 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <BSP_I2C2_DeInit+0x4c>)
 8001b7e:	f000 f909 	bl	8001d94 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001b82:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <BSP_I2C2_DeInit+0x4c>)
 8001b84:	f001 fed7 	bl	8003936 <HAL_I2C_DeInit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001b8e:	f06f 0307 	mvn.w	r3, #7
 8001b92:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200009d0 	.word	0x200009d0
 8001ba4:	200012e0 	.word	0x200012e0

08001ba8 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af04      	add	r7, sp, #16
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	81fb      	strh	r3, [r7, #14]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	81bb      	strh	r3, [r7, #12]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001bc2:	89ba      	ldrh	r2, [r7, #12]
 8001bc4:	89f9      	ldrh	r1, [r7, #14]
 8001bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <BSP_I2C2_WriteReg+0x60>)
 8001bd8:	f001 fef0 	bl	80039bc <HAL_I2C_Mem_Write>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <BSP_I2C2_WriteReg+0x60>)
 8001be4:	f002 f926 	bl	8003e34 <HAL_I2C_GetError>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d103      	bne.n	8001bf6 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001bee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e002      	b.n	8001bfc <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001bf6:	f06f 0303 	mvn.w	r3, #3
 8001bfa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001bfc:	697b      	ldr	r3, [r7, #20]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200012e0 	.word	0x200012e0

08001c0c <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	60ba      	str	r2, [r7, #8]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	81fb      	strh	r3, [r7, #14]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	81bb      	strh	r3, [r7, #12]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001c26:	89ba      	ldrh	r2, [r7, #12]
 8001c28:	89f9      	ldrh	r1, [r7, #14]
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <BSP_I2C2_ReadReg+0x60>)
 8001c3c:	f001 ffd2 	bl	8003be4 <HAL_I2C_Mem_Read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <BSP_I2C2_ReadReg+0x60>)
 8001c48:	f002 f8f4 	bl	8003e34 <HAL_I2C_GetError>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d103      	bne.n	8001c5a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c52:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e002      	b.n	8001c60 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c5a:	f06f 0303 	mvn.w	r3, #3
 8001c5e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001c60:	697b      	ldr	r3, [r7, #20]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200012e0 	.word	0x200012e0

08001c70 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c74:	f001 f8bc 	bl	8002df0 <HAL_GetTick>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <MX_I2C2_Init+0x80>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <MX_I2C2_Init+0x84>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f001 fda8 	bl	8003818 <HAL_I2C_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f002 fad5 	bl	8004284 <HAL_I2CEx_ConfigAnalogFilter>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f002 fb17 	bl	800431a <HAL_I2CEx_ConfigDigitalFilter>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40005800 	.word	0x40005800
 8001d04:	00702991 	.word	0x00702991

08001d08 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <I2C2_MspInit+0x84>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <I2C2_MspInit+0x84>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <I2C2_MspInit+0x84>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2e:	2312      	movs	r3, #18
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4812      	ldr	r0, [pc, #72]	; (8001d90 <I2C2_MspInit+0x88>)
 8001d46:	f001 fa7f 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001d4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	2312      	movs	r3, #18
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	480a      	ldr	r0, [pc, #40]	; (8001d90 <I2C2_MspInit+0x88>)
 8001d68:	f001 fa6e 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <I2C2_MspInit+0x84>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <I2C2_MspInit+0x84>)
 8001d72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <I2C2_MspInit+0x84>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000400 	.word	0x48000400

08001d94 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <I2C2_MspDeInit+0x30>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <I2C2_MspDeInit+0x30>)
 8001da2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001da6:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <I2C2_MspDeInit+0x34>)
 8001dae:	f001 fbf5 	bl	800359c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db6:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <I2C2_MspDeInit+0x34>)
 8001db8:	f001 fbf0 	bl	800359c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	48000400 	.word	0x48000400

08001dcc <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e04d      	b.n	8001e84 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7b1a      	ldrb	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <LSM6DSL_RegisterBusIO+0xc4>)
 8001e24:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <LSM6DSL_RegisterBusIO+0xc8>)
 8001e2a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e020      	b.n	8001e84 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4798      	blx	r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e016      	b.n	8001e84 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d112      	bne.n	8001e84 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2112      	movs	r1, #18
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f9b9 	bl	80021ea <LSM6DSL_Write_Reg>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	080024a5 	.word	0x080024a5
 8001e94:	080024db 	.word	0x080024db

08001e98 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	331c      	adds	r3, #28
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fcb4 	bl	8002814 <lsm6dsl_auto_increment_set>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e054      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	331c      	adds	r3, #28
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fc26 	bl	8002710 <lsm6dsl_block_data_update_set>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e048      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	331c      	adds	r3, #28
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fefb 	bl	8002cd2 <lsm6dsl_fifo_mode_set>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	e03c      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2204      	movs	r2, #4
 8001eec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	331c      	adds	r3, #28
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fb98 	bl	800262c <lsm6dsl_xl_data_rate_set>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e02c      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	331c      	adds	r3, #28
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fb2e 	bl	8002570 <lsm6dsl_xl_full_scale_set>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e020      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	331c      	adds	r3, #28
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fbc8 	bl	80026c4 <lsm6dsl_gy_data_rate_set>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e010      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	331c      	adds	r3, #28
 8001f44:	2106      	movs	r1, #6
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fb96 	bl	8002678 <lsm6dsl_gy_full_scale_set>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e004      	b.n	8001f62 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	331c      	adds	r3, #28
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fc39 	bl	80027f2 <lsm6dsl_device_id_get>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e000      	b.n	8001f8e <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e014      	b.n	8001fd6 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 021c 	add.w	r2, r3, #28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f000 fb36 	bl	800262c <lsm6dsl_xl_data_rate_set>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e004      	b.n	8001fd6 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	331c      	adds	r3, #28
 8001ff2:	f107 020b 	add.w	r2, r7, #11
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fadf 	bl	80025bc <lsm6dsl_xl_full_scale_get>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	e023      	b.n	8002052 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d81b      	bhi.n	8002048 <LSM6DSL_ACC_GetSensitivity+0x68>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002029 	.word	0x08002029
 800201c:	08002041 	.word	0x08002041
 8002020:	08002031 	.word	0x08002031
 8002024:	08002039 	.word	0x08002039
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 800202c:	601a      	str	r2, [r3, #0]
      break;
 800202e:	e00f      	b.n	8002050 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002034:	601a      	str	r2, [r3, #0]
      break;
 8002036:	e00b      	b.n	8002050 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LSM6DSL_ACC_GetSensitivity+0x84>)
 800203c:	601a      	str	r2, [r3, #0]
      break;
 800203e:	e007      	b.n	8002050 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002044:	601a      	str	r2, [r3, #0]
      break;
 8002046:	e003      	b.n	8002050 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	60fb      	str	r3, [r7, #12]
      break;
 800204e:	bf00      	nop
  }

  return ret;
 8002050:	68fb      	ldr	r3, [r7, #12]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	3d79db23 	.word	0x3d79db23
 8002060:	3df9db23 	.word	0x3df9db23
 8002064:	3e79db23 	.word	0x3e79db23
 8002068:	3ef9db23 	.word	0x3ef9db23

0800206c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002082:	ed97 0a00 	vldr	s0, [r7]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8fe 	bl	8002288 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800208c:	4603      	mov	r3, r0
 800208e:	e005      	b.n	800209c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002090:	ed97 0a00 	vldr	s0, [r7]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f983 	bl	80023a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800209a:	4603      	mov	r3, r0
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	dd0b      	ble.n	80020cc <LSM6DSL_ACC_SetFullScale+0x28>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	dd06      	ble.n	80020c8 <LSM6DSL_ACC_SetFullScale+0x24>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	dc01      	bgt.n	80020c4 <LSM6DSL_ACC_SetFullScale+0x20>
 80020c0:	2303      	movs	r3, #3
 80020c2:	e004      	b.n	80020ce <LSM6DSL_ACC_SetFullScale+0x2a>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e002      	b.n	80020ce <LSM6DSL_ACC_SetFullScale+0x2a>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e000      	b.n	80020ce <LSM6DSL_ACC_SetFullScale+0x2a>
 80020cc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80020ce:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	331c      	adds	r3, #28
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fa49 	bl	8002570 <lsm6dsl_xl_full_scale_set>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	e000      	b.n	80020ec <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	331c      	adds	r3, #28
 8002102:	f107 0208 	add.w	r2, r7, #8
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fb27 	bl	800275c <lsm6dsl_acceleration_raw_get>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	e00c      	b.n	8002134 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800211a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002122:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800212a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	331c      	adds	r3, #28
 8002150:	f107 0210 	add.w	r2, r7, #16
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fb00 	bl	800275c <lsm6dsl_acceleration_raw_get>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e03c      	b.n	80021e2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff36 	bl	8001fe0 <LSM6DSL_ACC_GetSensitivity>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e030      	b.n	80021e2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002180:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800218c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002198:	ee17 2a90 	vmov	r2, s15
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80021a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b8:	ee17 2a90 	vmov	r2, s15
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80021c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d8:	ee17 2a90 	vmov	r2, s15
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
 80021f6:	4613      	mov	r3, r2
 80021f8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f103 001c 	add.w	r0, r3, #28
 8002200:	1cba      	adds	r2, r7, #2
 8002202:	78f9      	ldrb	r1, [r7, #3]
 8002204:	2301      	movs	r3, #1
 8002206:	f000 f99b 	bl	8002540 <lsm6dsl_write_reg>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	e000      	b.n	8002218 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	331c      	adds	r3, #28
 8002230:	f107 020c 	add.w	r2, r7, #12
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fc75 	bl	8002b26 <lsm6dsl_pin_int1_route_get>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e01b      	b.n	8002280 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d811      	bhi.n	8002272 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	7b3b      	ldrb	r3, [r7, #12]
 8002258:	f362 0300 	bfi	r3, r2, #0, #1
 800225c:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	331c      	adds	r3, #28
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fafb 	bl	8002860 <lsm6dsl_pin_int1_route_set>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8002270:	e002      	b.n	8002278 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e003      	b.n	8002280 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	e000      	b.n	8002280 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002294:	edd7 7a00 	vldr	s15, [r7]
 8002298:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	d801      	bhi.n	80022aa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e058      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022aa:	edd7 7a00 	vldr	s15, [r7]
 80022ae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80022b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d801      	bhi.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80022bc:	2302      	movs	r3, #2
 80022be:	e04d      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022c0:	edd7 7a00 	vldr	s15, [r7]
 80022c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002384 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d801      	bhi.n	80022d6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e042      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022d6:	edd7 7a00 	vldr	s15, [r7]
 80022da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002388 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80022de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	d801      	bhi.n	80022ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e037      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022ec:	edd7 7a00 	vldr	s15, [r7]
 80022f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800238c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80022f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d801      	bhi.n	8002302 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80022fe:	2305      	movs	r3, #5
 8002300:	e02c      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002302:	edd7 7a00 	vldr	s15, [r7]
 8002306:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002390 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	d801      	bhi.n	8002318 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002314:	2306      	movs	r3, #6
 8002316:	e021      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002318:	edd7 7a00 	vldr	s15, [r7]
 800231c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002394 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	d801      	bhi.n	800232e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800232a:	2307      	movs	r3, #7
 800232c:	e016      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800232e:	edd7 7a00 	vldr	s15, [r7]
 8002332:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002398 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d801      	bhi.n	8002344 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002340:	2308      	movs	r3, #8
 8002342:	e00b      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002344:	edd7 7a00 	vldr	s15, [r7]
 8002348:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800239c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d801      	bhi.n	800235a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002356:	2309      	movs	r3, #9
 8002358:	e000      	b.n	800235c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800235a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800235c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	331c      	adds	r3, #28
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f960 	bl	800262c <lsm6dsl_xl_data_rate_set>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e000      	b.n	800237a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	42500000 	.word	0x42500000
 8002388:	42d00000 	.word	0x42d00000
 800238c:	43500000 	.word	0x43500000
 8002390:	43d00000 	.word	0x43d00000
 8002394:	44504000 	.word	0x44504000
 8002398:	44cf8000 	.word	0x44cf8000
 800239c:	45502000 	.word	0x45502000

080023a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80023ac:	edd7 7a00 	vldr	s15, [r7]
 80023b0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d801      	bhi.n	80023c2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80023be:	2301      	movs	r3, #1
 80023c0:	e058      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023c2:	edd7 7a00 	vldr	s15, [r7]
 80023c6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d801      	bhi.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e04d      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023d8:	edd7 7a00 	vldr	s15, [r7]
 80023dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80023e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d801      	bhi.n	80023ee <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e042      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023ee:	edd7 7a00 	vldr	s15, [r7]
 80023f2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800248c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80023f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	d801      	bhi.n	8002404 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002400:	2304      	movs	r3, #4
 8002402:	e037      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002404:	edd7 7a00 	vldr	s15, [r7]
 8002408:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002490 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800240c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002414:	d801      	bhi.n	800241a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002416:	2305      	movs	r3, #5
 8002418:	e02c      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800241a:	edd7 7a00 	vldr	s15, [r7]
 800241e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002494 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	d801      	bhi.n	8002430 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800242c:	2306      	movs	r3, #6
 800242e:	e021      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002430:	edd7 7a00 	vldr	s15, [r7]
 8002434:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002498 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	d801      	bhi.n	8002446 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002442:	2307      	movs	r3, #7
 8002444:	e016      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002446:	edd7 7a00 	vldr	s15, [r7]
 800244a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800249c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800244e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d801      	bhi.n	800245c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002458:	2308      	movs	r3, #8
 800245a:	e00b      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800245c:	edd7 7a00 	vldr	s15, [r7]
 8002460:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	d801      	bhi.n	8002472 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800246e:	2309      	movs	r3, #9
 8002470:	e000      	b.n	8002474 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002472:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	42500000 	.word	0x42500000
 800248c:	42d00000 	.word	0x42d00000
 8002490:	43500000 	.word	0x43500000
 8002494:	43d00000 	.word	0x43d00000
 8002498:	44504000 	.word	0x44504000
 800249c:	44cf8000 	.word	0x44cf8000
 80024a0:	45502000 	.word	0x45502000

080024a4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	72fb      	strb	r3, [r7, #11]
 80024b4:	4613      	mov	r3, r2
 80024b6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	695c      	ldr	r4, [r3, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	7b1b      	ldrb	r3, [r3, #12]
 80024c4:	b298      	uxth	r0, r3
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	b299      	uxth	r1, r3
 80024ca:	893b      	ldrh	r3, [r7, #8]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	47a0      	blx	r4
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd90      	pop	{r4, r7, pc}

080024da <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024da:	b590      	push	{r4, r7, lr}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	461a      	mov	r2, r3
 80024e6:	460b      	mov	r3, r1
 80024e8:	72fb      	strb	r3, [r7, #11]
 80024ea:	4613      	mov	r3, r2
 80024ec:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	691c      	ldr	r4, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	7b1b      	ldrb	r3, [r3, #12]
 80024fa:	b298      	uxth	r0, r3
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	b299      	uxth	r1, r3
 8002500:	893b      	ldrh	r3, [r7, #8]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	47a0      	blx	r4
 8002506:	4603      	mov	r3, r0
}
 8002508:	4618      	mov	r0, r3
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd90      	pop	{r4, r7, pc}

08002510 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	460b      	mov	r3, r1
 800251e:	72fb      	strb	r3, [r7, #11]
 8002520:	4613      	mov	r3, r2
 8002522:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685c      	ldr	r4, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6898      	ldr	r0, [r3, #8]
 800252c:	893b      	ldrh	r3, [r7, #8]
 800252e:	7af9      	ldrb	r1, [r7, #11]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	47a0      	blx	r4
 8002534:	6178      	str	r0, [r7, #20]
  return ret;
 8002536:	697b      	ldr	r3, [r7, #20]
}
 8002538:	4618      	mov	r0, r3
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}

08002540 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	461a      	mov	r2, r3
 800254c:	460b      	mov	r3, r1
 800254e:	72fb      	strb	r3, [r7, #11]
 8002550:	4613      	mov	r3, r2
 8002552:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681c      	ldr	r4, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6898      	ldr	r0, [r3, #8]
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	7af9      	ldrb	r1, [r7, #11]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	47a0      	blx	r4
 8002564:	6178      	str	r0, [r7, #20]
  return ret;
 8002566:	697b      	ldr	r3, [r7, #20]
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}

08002570 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800257c:	f107 0208 	add.w	r2, r7, #8
 8002580:	2301      	movs	r3, #1
 8002582:	2110      	movs	r1, #16
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffc3 	bl	8002510 <lsm6dsl_read_reg>
 800258a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	7a3b      	ldrb	r3, [r7, #8]
 800259c:	f362 0383 	bfi	r3, r2, #2, #2
 80025a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80025a2:	f107 0208 	add.w	r2, r7, #8
 80025a6:	2301      	movs	r3, #1
 80025a8:	2110      	movs	r1, #16
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffc8 	bl	8002540 <lsm6dsl_write_reg>
 80025b0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80025c6:	f107 0208 	add.w	r2, r7, #8
 80025ca:	2301      	movs	r3, #1
 80025cc:	2110      	movs	r1, #16
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff9e 	bl	8002510 <lsm6dsl_read_reg>
 80025d4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80025d6:	7a3b      	ldrb	r3, [r7, #8]
 80025d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d81a      	bhi.n	8002618 <lsm6dsl_xl_full_scale_get+0x5c>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <lsm6dsl_xl_full_scale_get+0x2c>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	080025f9 	.word	0x080025f9
 80025ec:	08002601 	.word	0x08002601
 80025f0:	08002609 	.word	0x08002609
 80025f4:	08002611 	.word	0x08002611
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
      break;
 80025fe:	e00f      	b.n	8002620 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
      break;
 8002606:	e00b      	b.n	8002620 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2202      	movs	r2, #2
 800260c:	701a      	strb	r2, [r3, #0]
      break;
 800260e:	e007      	b.n	8002620 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2203      	movs	r2, #3
 8002614:	701a      	strb	r2, [r3, #0]
      break;
 8002616:	e003      	b.n	8002620 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	701a      	strb	r2, [r3, #0]
      break;
 800261e:	bf00      	nop
  }

  return ret;
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop

0800262c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8002638:	f107 0208 	add.w	r2, r7, #8
 800263c:	2301      	movs	r3, #1
 800263e:	2110      	movs	r1, #16
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff65 	bl	8002510 <lsm6dsl_read_reg>
 8002646:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	f362 1307 	bfi	r3, r2, #4, #4
 800265c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800265e:	f107 0208 	add.w	r2, r7, #8
 8002662:	2301      	movs	r3, #1
 8002664:	2110      	movs	r1, #16
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff6a 	bl	8002540 <lsm6dsl_write_reg>
 800266c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002684:	f107 0208 	add.w	r2, r7, #8
 8002688:	2301      	movs	r3, #1
 800268a:	2111      	movs	r1, #17
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff3f 	bl	8002510 <lsm6dsl_read_reg>
 8002692:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	7a3b      	ldrb	r3, [r7, #8]
 80026a4:	f362 0343 	bfi	r3, r2, #1, #3
 80026a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026aa:	f107 0208 	add.w	r2, r7, #8
 80026ae:	2301      	movs	r3, #1
 80026b0:	2111      	movs	r1, #17
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ff44 	bl	8002540 <lsm6dsl_write_reg>
 80026b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026d0:	f107 0208 	add.w	r2, r7, #8
 80026d4:	2301      	movs	r3, #1
 80026d6:	2111      	movs	r1, #17
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff19 	bl	8002510 <lsm6dsl_read_reg>
 80026de:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	7a3b      	ldrb	r3, [r7, #8]
 80026f0:	f362 1307 	bfi	r3, r2, #4, #4
 80026f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026f6:	f107 0208 	add.w	r2, r7, #8
 80026fa:	2301      	movs	r3, #1
 80026fc:	2111      	movs	r1, #17
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ff1e 	bl	8002540 <lsm6dsl_write_reg>
 8002704:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800271c:	f107 0208 	add.w	r2, r7, #8
 8002720:	2301      	movs	r3, #1
 8002722:	2112      	movs	r1, #18
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fef3 	bl	8002510 <lsm6dsl_read_reg>
 800272a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	7a3b      	ldrb	r3, [r7, #8]
 800273c:	f362 1386 	bfi	r3, r2, #6, #1
 8002740:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002742:	f107 0208 	add.w	r2, r7, #8
 8002746:	2301      	movs	r3, #1
 8002748:	2112      	movs	r1, #18
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fef8 	bl	8002540 <lsm6dsl_write_reg>
 8002750:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002766:	f107 020c 	add.w	r2, r7, #12
 800276a:	2306      	movs	r3, #6
 800276c:	2128      	movs	r1, #40	; 0x28
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fece 	bl	8002510 <lsm6dsl_read_reg>
 8002774:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002776:	7b7b      	ldrb	r3, [r7, #13]
 8002778:	b21a      	sxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002784:	b29b      	uxth	r3, r3
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	b29a      	uxth	r2, r3
 800278a:	7b3b      	ldrb	r3, [r7, #12]
 800278c:	b29b      	uxth	r3, r3
 800278e:	4413      	add	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	b21a      	sxth	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3302      	adds	r3, #2
 800279e:	b212      	sxth	r2, r2
 80027a0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	3302      	adds	r3, #2
 80027a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3302      	adds	r3, #2
 80027bc:	b212      	sxth	r2, r2
 80027be:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80027c0:	7c7a      	ldrb	r2, [r7, #17]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	3304      	adds	r3, #4
 80027c6:	b212      	sxth	r2, r2
 80027c8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3304      	adds	r3, #4
 80027ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	7c3b      	ldrb	r3, [r7, #16]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4413      	add	r3, r2
 80027de:	b29a      	uxth	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3304      	adds	r3, #4
 80027e4:	b212      	sxth	r2, r2
 80027e6:	801a      	strh	r2, [r3, #0]
  return ret;
 80027e8:	697b      	ldr	r3, [r7, #20]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80027fc:	2301      	movs	r3, #1
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	210f      	movs	r1, #15
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff fe84 	bl	8002510 <lsm6dsl_read_reg>
 8002808:	60f8      	str	r0, [r7, #12]
  return ret;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002820:	f107 0208 	add.w	r2, r7, #8
 8002824:	2301      	movs	r3, #1
 8002826:	2112      	movs	r1, #18
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fe71 	bl	8002510 <lsm6dsl_read_reg>
 800282e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	7a3b      	ldrb	r3, [r7, #8]
 8002840:	f362 0382 	bfi	r3, r2, #2, #1
 8002844:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002846:	f107 0208 	add.w	r2, r7, #8
 800284a:	2301      	movs	r3, #1
 800284c:	2112      	movs	r1, #18
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fe76 	bl	8002540 <lsm6dsl_write_reg>
 8002854:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 800286a:	f107 021c 	add.w	r2, r7, #28
 800286e:	2301      	movs	r3, #1
 8002870:	210d      	movs	r1, #13
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fe4c 	bl	8002510 <lsm6dsl_read_reg>
 8002878:	6278      	str	r0, [r7, #36]	; 0x24
                         1);

  if (ret == 0) {
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d147      	bne.n	8002910 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002880:	783b      	ldrb	r3, [r7, #0]
 8002882:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	7f3b      	ldrb	r3, [r7, #28]
 800288a:	f362 0300 	bfi	r3, r2, #0, #1
 800288e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8002890:	783b      	ldrb	r3, [r7, #0]
 8002892:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	7f3b      	ldrb	r3, [r7, #28]
 800289a:	f362 0341 	bfi	r3, r2, #1, #1
 800289e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80028a0:	783b      	ldrb	r3, [r7, #0]
 80028a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	7f3b      	ldrb	r3, [r7, #28]
 80028aa:	f362 0382 	bfi	r3, r2, #2, #1
 80028ae:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80028b0:	783b      	ldrb	r3, [r7, #0]
 80028b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	7f3b      	ldrb	r3, [r7, #28]
 80028ba:	f362 03c3 	bfi	r3, r2, #3, #1
 80028be:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80028c0:	783b      	ldrb	r3, [r7, #0]
 80028c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	7f3b      	ldrb	r3, [r7, #28]
 80028ca:	f362 1304 	bfi	r3, r2, #4, #1
 80028ce:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80028d0:	783b      	ldrb	r3, [r7, #0]
 80028d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	7f3b      	ldrb	r3, [r7, #28]
 80028da:	f362 1345 	bfi	r3, r2, #5, #1
 80028de:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80028e0:	783b      	ldrb	r3, [r7, #0]
 80028e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7f3b      	ldrb	r3, [r7, #28]
 80028ea:	f362 1386 	bfi	r3, r2, #6, #1
 80028ee:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80028f0:	783b      	ldrb	r3, [r7, #0]
 80028f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	7f3b      	ldrb	r3, [r7, #28]
 80028fa:	f362 13c7 	bfi	r3, r2, #7, #1
 80028fe:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8002900:	f107 021c 	add.w	r2, r7, #28
 8002904:	2301      	movs	r3, #1
 8002906:	210d      	movs	r1, #13
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe19 	bl	8002540 <lsm6dsl_write_reg>
 800290e:	6278      	str	r0, [r7, #36]	; 0x24
                            1);
  }

  if (ret == 0) {
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002916:	f107 0218 	add.w	r2, r7, #24
 800291a:	2301      	movs	r3, #1
 800291c:	215e      	movs	r1, #94	; 0x5e
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fdf6 	bl	8002510 <lsm6dsl_read_reg>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800292c:	f107 0214 	add.w	r2, r7, #20
 8002930:	2301      	movs	r3, #1
 8002932:	215f      	movs	r1, #95	; 0x5f
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fdeb 	bl	8002510 <lsm6dsl_read_reg>
 800293a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d147      	bne.n	80029d2 <lsm6dsl_pin_int1_route_set+0x172>
    md1_cfg.int1_timer           = val.int1_timer;
 8002942:	787b      	ldrb	r3, [r7, #1]
 8002944:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	7e3b      	ldrb	r3, [r7, #24]
 800294c:	f362 0300 	bfi	r3, r2, #0, #1
 8002950:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8002952:	787b      	ldrb	r3, [r7, #1]
 8002954:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	7e3b      	ldrb	r3, [r7, #24]
 800295c:	f362 0341 	bfi	r3, r2, #1, #1
 8002960:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8002962:	787b      	ldrb	r3, [r7, #1]
 8002964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	7e3b      	ldrb	r3, [r7, #24]
 800296c:	f362 0382 	bfi	r3, r2, #2, #1
 8002970:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002972:	787b      	ldrb	r3, [r7, #1]
 8002974:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	7e3b      	ldrb	r3, [r7, #24]
 800297c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002980:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002982:	787b      	ldrb	r3, [r7, #1]
 8002984:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	7e3b      	ldrb	r3, [r7, #24]
 800298c:	f362 1304 	bfi	r3, r2, #4, #1
 8002990:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8002992:	787b      	ldrb	r3, [r7, #1]
 8002994:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	7e3b      	ldrb	r3, [r7, #24]
 800299c:	f362 1345 	bfi	r3, r2, #5, #1
 80029a0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80029a2:	787b      	ldrb	r3, [r7, #1]
 80029a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	7e3b      	ldrb	r3, [r7, #24]
 80029ac:	f362 1386 	bfi	r3, r2, #6, #1
 80029b0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80029b2:	787b      	ldrb	r3, [r7, #1]
 80029b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	7e3b      	ldrb	r3, [r7, #24]
 80029bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80029c0:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80029c2:	f107 0218 	add.w	r2, r7, #24
 80029c6:	2301      	movs	r3, #1
 80029c8:	215e      	movs	r1, #94	; 0x5e
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fdb8 	bl	8002540 <lsm6dsl_write_reg>
 80029d0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80029d8:	f107 0210 	add.w	r2, r7, #16
 80029dc:	2301      	movs	r3, #1
 80029de:	2113      	movs	r1, #19
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fd95 	bl	8002510 <lsm6dsl_read_reg>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80029ee:	78bb      	ldrb	r3, [r7, #2]
 80029f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	7c3b      	ldrb	r3, [r7, #16]
 80029f8:	f362 1304 	bfi	r3, r2, #4, #1
 80029fc:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80029fe:	f107 0210 	add.w	r2, r7, #16
 8002a02:	2301      	movs	r3, #1
 8002a04:	2113      	movs	r1, #19
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fd9a 	bl	8002540 <lsm6dsl_write_reg>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002a14:	f107 0220 	add.w	r2, r7, #32
 8002a18:	2301      	movs	r3, #1
 8002a1a:	211a      	movs	r1, #26
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fd77 	bl	8002510 <lsm6dsl_read_reg>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d111      	bne.n	8002a4e <lsm6dsl_pin_int1_route_set+0x1ee>
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8002a2a:	78bb      	ldrb	r3, [r7, #2]
 8002a2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a36:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a3a:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002a3e:	f107 0220 	add.w	r2, r7, #32
 8002a42:	2301      	movs	r3, #1
 8002a44:	211a      	movs	r1, #26
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff fd7a 	bl	8002540 <lsm6dsl_write_reg>
 8002a4c:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d158      	bne.n	8002b06 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002a54:	f107 020c 	add.w	r2, r7, #12
 8002a58:	2301      	movs	r3, #1
 8002a5a:	2158      	movs	r1, #88	; 0x58
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fd57 	bl	8002510 <lsm6dsl_read_reg>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d141      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13b      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d135      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d12f      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d129      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002aa6:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d123      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002aac:	7d3b      	ldrb	r3, [r7, #20]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11d      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002ab8:	7d3b      	ldrb	r3, [r7, #20]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d117      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002ac4:	7d3b      	ldrb	r3, [r7, #20]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002ad0:	7d3b      	ldrb	r3, [r7, #20]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002adc:	7d3b      	ldrb	r3, [r7, #20]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U) ) {
 8002ae8:	7d3b      	ldrb	r3, [r7, #20]
 8002aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002aee:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002af4:	7b3b      	ldrb	r3, [r7, #12]
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	733b      	strb	r3, [r7, #12]
 8002afc:	e003      	b.n	8002b06 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002afe:	7b3b      	ldrb	r3, [r7, #12]
 8002b00:	f36f 13c7 	bfc	r3, #7, #1
 8002b04:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0) {
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002b0c:	f107 020c 	add.w	r2, r7, #12
 8002b10:	2301      	movs	r3, #1
 8002b12:	2158      	movs	r1, #88	; 0x58
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fd13 	bl	8002540 <lsm6dsl_write_reg>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b088      	sub	sp, #32
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  lsm6dsl_master_config_t master_config;
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8002b30:	f107 0214 	add.w	r2, r7, #20
 8002b34:	2301      	movs	r3, #1
 8002b36:	210d      	movs	r1, #13
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fce9 	bl	8002510 <lsm6dsl_read_reg>
 8002b3e:	61f8      	str	r0, [r7, #28]
                         1);

  if (ret == 0) {
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 80c0 	bne.w	8002cc8 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002b48:	7d3b      	ldrb	r3, [r7, #20]
 8002b4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b4e:	b2d9      	uxtb	r1, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	7813      	ldrb	r3, [r2, #0]
 8002b54:	f361 0300 	bfi	r3, r1, #0, #1
 8002b58:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002b5a:	7d3b      	ldrb	r3, [r7, #20]
 8002b5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b60:	b2d9      	uxtb	r1, r3
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	7813      	ldrb	r3, [r2, #0]
 8002b66:	f361 0341 	bfi	r3, r1, #1, #1
 8002b6a:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002b6c:	7d3b      	ldrb	r3, [r7, #20]
 8002b6e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b72:	b2d9      	uxtb	r1, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	7813      	ldrb	r3, [r2, #0]
 8002b78:	f361 0382 	bfi	r3, r1, #2, #1
 8002b7c:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002b7e:	7d3b      	ldrb	r3, [r7, #20]
 8002b80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b84:	b2d9      	uxtb	r1, r3
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	7813      	ldrb	r3, [r2, #0]
 8002b8a:	f361 03c3 	bfi	r3, r1, #3, #1
 8002b8e:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002b90:	7d3b      	ldrb	r3, [r7, #20]
 8002b92:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b96:	b2d9      	uxtb	r1, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	7813      	ldrb	r3, [r2, #0]
 8002b9c:	f361 1304 	bfi	r3, r1, #4, #1
 8002ba0:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002ba2:	7d3b      	ldrb	r3, [r7, #20]
 8002ba4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ba8:	b2d9      	uxtb	r1, r3
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	7813      	ldrb	r3, [r2, #0]
 8002bae:	f361 1345 	bfi	r3, r1, #5, #1
 8002bb2:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8002bb4:	7d3b      	ldrb	r3, [r7, #20]
 8002bb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bba:	b2d9      	uxtb	r1, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	7813      	ldrb	r3, [r2, #0]
 8002bc0:	f361 1386 	bfi	r3, r1, #6, #1
 8002bc4:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002bc6:	7d3b      	ldrb	r3, [r7, #20]
 8002bc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002bcc:	b2d9      	uxtb	r1, r3
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	7813      	ldrb	r3, [r2, #0]
 8002bd2:	f361 13c7 	bfi	r3, r1, #7, #1
 8002bd6:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002bd8:	f107 0210 	add.w	r2, r7, #16
 8002bdc:	2301      	movs	r3, #1
 8002bde:	215e      	movs	r1, #94	; 0x5e
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fc95 	bl	8002510 <lsm6dsl_read_reg>
 8002be6:	61f8      	str	r0, [r7, #28]

    if (ret == 0) {
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d16c      	bne.n	8002cc8 <lsm6dsl_pin_int1_route_get+0x1a2>
      val->int1_timer       = md1_cfg.int1_timer;
 8002bee:	7c3b      	ldrb	r3, [r7, #16]
 8002bf0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bf4:	b2d9      	uxtb	r1, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	7853      	ldrb	r3, [r2, #1]
 8002bfa:	f361 0300 	bfi	r3, r1, #0, #1
 8002bfe:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002c00:	7c3b      	ldrb	r3, [r7, #16]
 8002c02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c06:	b2d9      	uxtb	r1, r3
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	7853      	ldrb	r3, [r2, #1]
 8002c0c:	f361 0341 	bfi	r3, r1, #1, #1
 8002c10:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8002c12:	7c3b      	ldrb	r3, [r7, #16]
 8002c14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c18:	b2d9      	uxtb	r1, r3
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	7853      	ldrb	r3, [r2, #1]
 8002c1e:	f361 0382 	bfi	r3, r1, #2, #1
 8002c22:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002c24:	7c3b      	ldrb	r3, [r7, #16]
 8002c26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c2a:	b2d9      	uxtb	r1, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	7853      	ldrb	r3, [r2, #1]
 8002c30:	f361 03c3 	bfi	r3, r1, #3, #1
 8002c34:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002c36:	7c3b      	ldrb	r3, [r7, #16]
 8002c38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c3c:	b2d9      	uxtb	r1, r3
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	7853      	ldrb	r3, [r2, #1]
 8002c42:	f361 1304 	bfi	r3, r1, #4, #1
 8002c46:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8002c48:	7c3b      	ldrb	r3, [r7, #16]
 8002c4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c4e:	b2d9      	uxtb	r1, r3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	7853      	ldrb	r3, [r2, #1]
 8002c54:	f361 1345 	bfi	r3, r1, #5, #1
 8002c58:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002c5a:	7c3b      	ldrb	r3, [r7, #16]
 8002c5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c60:	b2d9      	uxtb	r1, r3
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	7853      	ldrb	r3, [r2, #1]
 8002c66:	f361 1386 	bfi	r3, r1, #6, #1
 8002c6a:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002c6c:	7c3b      	ldrb	r3, [r7, #16]
 8002c6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c72:	b2d9      	uxtb	r1, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	7853      	ldrb	r3, [r2, #1]
 8002c78:	f361 13c7 	bfi	r3, r1, #7, #1
 8002c7c:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002c7e:	f107 020c 	add.w	r2, r7, #12
 8002c82:	2301      	movs	r3, #1
 8002c84:	2113      	movs	r1, #19
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fc42 	bl	8002510 <lsm6dsl_read_reg>
 8002c8c:	61f8      	str	r0, [r7, #28]

      if (ret == 0) {
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d119      	bne.n	8002cc8 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002c94:	7b3b      	ldrb	r3, [r7, #12]
 8002c96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c9a:	b2d9      	uxtb	r1, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	7893      	ldrb	r3, [r2, #2]
 8002ca0:	f361 0300 	bfi	r3, r1, #0, #1
 8002ca4:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002ca6:	f107 0218 	add.w	r2, r7, #24
 8002caa:	2301      	movs	r3, #1
 8002cac:	211a      	movs	r1, #26
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fc2e 	bl	8002510 <lsm6dsl_read_reg>
 8002cb4:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002cb6:	7e3b      	ldrb	r3, [r7, #24]
 8002cb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002cbc:	b2d9      	uxtb	r1, r3
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	7893      	ldrb	r3, [r2, #2]
 8002cc2:	f361 0300 	bfi	r3, r1, #0, #1
 8002cc6:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002cde:	f107 0208 	add.w	r2, r7, #8
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	210a      	movs	r1, #10
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fc12 	bl	8002510 <lsm6dsl_read_reg>
 8002cec:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	7a3b      	ldrb	r3, [r7, #8]
 8002cfe:	f362 0302 	bfi	r3, r2, #0, #3
 8002d02:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d04:	f107 0208 	add.w	r2, r7, #8
 8002d08:	2301      	movs	r3, #1
 8002d0a:	210a      	movs	r1, #10
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fc17 	bl	8002540 <lsm6dsl_write_reg>
 8002d12:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 f961 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f000 f80e 	bl	8002d50 <HAL_InitTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	71fb      	strb	r3, [r7, #7]
 8002d3e:	e001      	b.n	8002d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d40:	f7fe fd44 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d44:	79fb      	ldrb	r3, [r7, #7]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_InitTick+0x6c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_InitTick+0x70>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_InitTick+0x6c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f96d 	bl	800305a <HAL_SYSTICK_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d809      	bhi.n	8002da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f000 f937 	bl	8003006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_InitTick+0x74>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e007      	b.n	8002db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
 8002da4:	e004      	b.n	8002db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	e001      	b.n	8002db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000008 	.word	0x20000008
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x20>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_IncTick+0x24>)
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000008 	.word	0x20000008
 8002dec:	2000132c 	.word	0x2000132c

08002df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetTick+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000132c 	.word	0x2000132c

08002e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff ffee 	bl	8002df0 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d005      	beq.n	8002e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_Delay+0x44>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e2e:	bf00      	nop
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d8f7      	bhi.n	8002e30 <HAL_Delay+0x28>
  {
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff29 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff3e 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff31 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffa2 	bl	8002fac <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e054      	b.n	8003130 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7f5b      	ldrb	r3, [r3, #29]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fbbc 	bl	8001814 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	791b      	ldrb	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <HAL_CRC_Init+0xc4>)
 80030b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0218 	bic.w	r2, r2, #24
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	e00c      	b.n	80030de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	461a      	mov	r2, r3
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f834 	bl	800313c <HAL_CRCEx_Polynomial_Set>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e028      	b.n	8003130 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	795b      	ldrb	r3, [r3, #5]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295
 80030ee:	611a      	str	r2, [r3, #16]
 80030f0:	e004      	b.n	80030fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6912      	ldr	r2, [r2, #16]
 80030fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	04c11db7 	.word	0x04c11db7

0800313c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800314c:	231f      	movs	r3, #31
 800314e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003150:	bf00      	nop
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	613a      	str	r2, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_CRCEx_Polynomial_Set+0x34>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_CRCEx_Polynomial_Set+0x16>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b18      	cmp	r3, #24
 8003174:	d846      	bhi.n	8003204 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	0800320b 	.word	0x0800320b
 8003180:	08003205 	.word	0x08003205
 8003184:	08003205 	.word	0x08003205
 8003188:	08003205 	.word	0x08003205
 800318c:	08003205 	.word	0x08003205
 8003190:	08003205 	.word	0x08003205
 8003194:	08003205 	.word	0x08003205
 8003198:	08003205 	.word	0x08003205
 800319c:	080031f9 	.word	0x080031f9
 80031a0:	08003205 	.word	0x08003205
 80031a4:	08003205 	.word	0x08003205
 80031a8:	08003205 	.word	0x08003205
 80031ac:	08003205 	.word	0x08003205
 80031b0:	08003205 	.word	0x08003205
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003205 	.word	0x08003205
 80031bc:	080031ed 	.word	0x080031ed
 80031c0:	08003205 	.word	0x08003205
 80031c4:	08003205 	.word	0x08003205
 80031c8:	08003205 	.word	0x08003205
 80031cc:	08003205 	.word	0x08003205
 80031d0:	08003205 	.word	0x08003205
 80031d4:	08003205 	.word	0x08003205
 80031d8:	08003205 	.word	0x08003205
 80031dc:	080031e1 	.word	0x080031e1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d913      	bls.n	800320e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80031ea:	e010      	b.n	800320e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	d90f      	bls.n	8003212 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80031f6:	e00c      	b.n	8003212 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d90b      	bls.n	8003216 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003202:	e008      	b.n	8003216 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
      break;
 8003208:	e006      	b.n	8003218 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800320a:	bf00      	nop
 800320c:	e004      	b.n	8003218 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800320e:	bf00      	nop
 8003210:	e002      	b.n	8003218 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003216:	bf00      	nop
  }
  if (status == HAL_OK)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 0118 	bic.w	r1, r3, #24
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
}
 800323c:	4618      	mov	r0, r3
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	e17f      	b.n	8003558 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8171 	beq.w	8003552 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00b      	beq.n	8003290 <HAL_GPIO_Init+0x48>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d007      	beq.n	8003290 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003284:	2b11      	cmp	r3, #17
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b12      	cmp	r3, #18
 800328e:	d130      	bne.n	80032f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032c6:	2201      	movs	r2, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0201 	and.w	r2, r3, #1
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d118      	bne.n	8003330 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003304:	2201      	movs	r2, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f003 0201 	and.w	r2, r3, #1
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x128>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b12      	cmp	r3, #18
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	6939      	ldr	r1, [r7, #16]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ac 	beq.w	8003552 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_GPIO_Init+0x330>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_GPIO_Init+0x330>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6613      	str	r3, [r2, #96]	; 0x60
 8003406:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_GPIO_Init+0x330>)
 8003408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003412:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_GPIO_Init+0x334>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800343c:	d025      	beq.n	800348a <HAL_GPIO_Init+0x242>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4f      	ldr	r2, [pc, #316]	; (8003580 <HAL_GPIO_Init+0x338>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <HAL_GPIO_Init+0x23e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_GPIO_Init+0x33c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_Init+0x23a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_GPIO_Init+0x340>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0x236>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4c      	ldr	r2, [pc, #304]	; (800358c <HAL_GPIO_Init+0x344>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_Init+0x232>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4b      	ldr	r2, [pc, #300]	; (8003590 <HAL_GPIO_Init+0x348>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x22e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_GPIO_Init+0x34c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_Init+0x22a>
 800346e:	2306      	movs	r3, #6
 8003470:	e00c      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003472:	2307      	movs	r3, #7
 8003474:	e00a      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003476:	2305      	movs	r3, #5
 8003478:	e008      	b.n	800348c <HAL_GPIO_Init+0x244>
 800347a:	2304      	movs	r3, #4
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x244>
 800347e:	2303      	movs	r3, #3
 8003480:	e004      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003482:	2302      	movs	r3, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_Init+0x244>
 800348a:	2300      	movs	r3, #0
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800349c:	4937      	ldr	r1, [pc, #220]	; (800357c <HAL_GPIO_Init+0x334>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ce:	4a32      	ldr	r2, [pc, #200]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034f8:	4a27      	ldr	r2, [pc, #156]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_GPIO_Init+0x350>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_GPIO_Init+0x350>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_GPIO_Init+0x350>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_GPIO_Init+0x350>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	f47f ae78 	bne.w	8003258 <HAL_GPIO_Init+0x10>
  }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	48001400 	.word	0x48001400
 8003594:	48001800 	.word	0x48001800
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80035aa:	e0cd      	b.n	8003748 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80035ac:	2201      	movs	r2, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80c0 	beq.w	8003742 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80035c2:	4a68      	ldr	r2, [pc, #416]	; (8003764 <HAL_GPIO_DeInit+0x1c8>)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ea:	d025      	beq.n	8003638 <HAL_GPIO_DeInit+0x9c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_GPIO_DeInit+0x1cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d01f      	beq.n	8003634 <HAL_GPIO_DeInit+0x98>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a5d      	ldr	r2, [pc, #372]	; (800376c <HAL_GPIO_DeInit+0x1d0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d019      	beq.n	8003630 <HAL_GPIO_DeInit+0x94>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a5c      	ldr	r2, [pc, #368]	; (8003770 <HAL_GPIO_DeInit+0x1d4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_GPIO_DeInit+0x90>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a5b      	ldr	r2, [pc, #364]	; (8003774 <HAL_GPIO_DeInit+0x1d8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00d      	beq.n	8003628 <HAL_GPIO_DeInit+0x8c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a5a      	ldr	r2, [pc, #360]	; (8003778 <HAL_GPIO_DeInit+0x1dc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <HAL_GPIO_DeInit+0x88>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a59      	ldr	r2, [pc, #356]	; (800377c <HAL_GPIO_DeInit+0x1e0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_GPIO_DeInit+0x84>
 800361c:	2306      	movs	r3, #6
 800361e:	e00c      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 8003620:	2307      	movs	r3, #7
 8003622:	e00a      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 8003624:	2305      	movs	r3, #5
 8003626:	e008      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 8003628:	2304      	movs	r3, #4
 800362a:	e006      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 800362c:	2303      	movs	r3, #3
 800362e:	e004      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 8003630:	2302      	movs	r3, #2
 8003632:	e002      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_GPIO_DeInit+0x9e>
 8003638:	2300      	movs	r3, #0
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	f002 0203 	and.w	r2, r2, #3
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	4093      	lsls	r3, r2
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	429a      	cmp	r2, r3
 8003648:	d132      	bne.n	80036b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800364a:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	494b      	ldr	r1, [pc, #300]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 8003654:	4013      	ands	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	4947      	ldr	r1, [pc, #284]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 8003662:	4013      	ands	r3, r2
 8003664:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003666:	4b46      	ldr	r3, [pc, #280]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	4944      	ldr	r1, [pc, #272]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 8003670:	4013      	ands	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	4940      	ldr	r1, [pc, #256]	; (8003780 <HAL_GPIO_DeInit+0x1e4>)
 800367e:	4013      	ands	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003692:	4a34      	ldr	r2, [pc, #208]	; (8003764 <HAL_GPIO_DeInit+0x1c8>)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	3302      	adds	r3, #2
 800369a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	4830      	ldr	r0, [pc, #192]	; (8003764 <HAL_GPIO_DeInit+0x1c8>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	400a      	ands	r2, r1
 80036aa:	3302      	adds	r3, #2
 80036ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	2103      	movs	r1, #3
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	08d2      	lsrs	r2, r2, #3
 80036e4:	4019      	ands	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2103      	movs	r1, #3
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	2101      	movs	r1, #1
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2103      	movs	r1, #3
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003732:	2101      	movs	r1, #1
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	401a      	ands	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3301      	adds	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af2b 	bne.w	80035ac <HAL_GPIO_DeInit+0x10>
  }
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40010000 	.word	0x40010000
 8003768:	48000400 	.word	0x48000400
 800376c:	48000800 	.word	0x48000800
 8003770:	48000c00 	.word	0x48000c00
 8003774:	48001000 	.word	0x48001000
 8003778:	48001400 	.word	0x48001400
 800377c:	48001800 	.word	0x48001800
 8003780:	40010400 	.word	0x40010400

08003784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
 8003790:	4613      	mov	r3, r2
 8003792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003794:	787b      	ldrb	r3, [r7, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037a0:	e002      	b.n	80037a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4013      	ands	r3, r2
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43d9      	mvns	r1, r3
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	400b      	ands	r3, r1
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	619a      	str	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037fe:	4a05      	ldr	r2, [pc, #20]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd ff38 	bl	800167c <HAL_GPIO_EXTI_Callback>
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e081      	b.n	800392e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8a8 	bl	8003994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003868:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003878:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d107      	bne.n	8003892 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e006      	b.n	80038a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800389e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d104      	bne.n	80038b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	ea42 0103 	orr.w	r1, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e021      	b.n	800398c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f821 	bl	80039a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 80f9 	bne.w	8003bd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x34>
 80039ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0ed      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_I2C_Mem_Write+0x4e>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0e6      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a12:	f7ff f9ed 	bl	8002df0 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2319      	movs	r3, #25
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fadd 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0d1      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2221      	movs	r2, #33	; 0x21
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a5c:	88f8      	ldrh	r0, [r7, #6]
 8003a5e:	893a      	ldrh	r2, [r7, #8]
 8003a60:	8979      	ldrh	r1, [r7, #10]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f9ed 	bl	8003e4c <I2C_RequestMemoryWrite>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0a9      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2bff      	cmp	r3, #255	; 0xff
 8003a8c:	d90e      	bls.n	8003aac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fbbf 	bl	8004228 <I2C_TransferConfig>
 8003aaa:	e00f      	b.n	8003acc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	8979      	ldrh	r1, [r7, #10]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fbae 	bl	8004228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fac7 	bl	8004064 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e07b      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d034      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x1c8>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d130      	bne.n	8003b84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fa59 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e04d      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d90e      	bls.n	8003b64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	22ff      	movs	r2, #255	; 0xff
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	8979      	ldrh	r1, [r7, #10]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fb63 	bl	8004228 <I2C_TransferConfig>
 8003b62:	e00f      	b.n	8003b84 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	8979      	ldrh	r1, [r7, #10]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fb52 	bl	8004228 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d19e      	bne.n	8003acc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 faa6 	bl	80040e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e01a      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_I2C_Mem_Write+0x224>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	fe00e800 	.word	0xfe00e800

08003be4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	f040 80fd 	bne.w	8003e06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x34>
 8003c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0f1      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Read+0x4e>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0ea      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c3a:	f7ff f8d9 	bl	8002df0 <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2319      	movs	r3, #25
 8003c46:	2201      	movs	r2, #1
 8003c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f9c9 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0d5      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2222      	movs	r2, #34	; 0x22
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2240      	movs	r2, #64	; 0x40
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c84:	88f8      	ldrh	r0, [r7, #6]
 8003c86:	893a      	ldrh	r2, [r7, #8]
 8003c88:	8979      	ldrh	r1, [r7, #10]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	4603      	mov	r3, r0
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f92d 	bl	8003ef4 <I2C_RequestMemoryRead>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0ad      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d90e      	bls.n	8003cd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	22ff      	movs	r2, #255	; 0xff
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	4b52      	ldr	r3, [pc, #328]	; (8003e10 <HAL_I2C_Mem_Read+0x22c>)
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 faab 	bl	8004228 <I2C_TransferConfig>
 8003cd2:	e00f      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	8979      	ldrh	r1, [r7, #10]
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_I2C_Mem_Read+0x22c>)
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa9a 	bl	8004228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f970 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07c      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d034      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x1d0>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d130      	bne.n	8003db4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f941 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04d      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d90e      	bls.n	8003d94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	8979      	ldrh	r1, [r7, #10]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fa4b 	bl	8004228 <I2C_TransferConfig>
 8003d92:	e00f      	b.n	8003db4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	8979      	ldrh	r1, [r7, #10]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fa3a 	bl	8004228 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d19a      	bne.n	8003cf4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f98e 	bl	80040e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01a      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_I2C_Mem_Read+0x230>)
 8003de6:	400b      	ands	r3, r1
 8003de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	80002400 	.word	0x80002400
 8003e14:	fe00e800 	.word	0xfe00e800

08003e18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	813b      	strh	r3, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <I2C_RequestMemoryWrite+0xa4>)
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f9d7 	bl	8004228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8f0 	bl	8004064 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e02c      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e9e:	e015      	b.n	8003ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f8d6 	bl	8004064 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e012      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f884 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	80002000 	.word	0x80002000

08003ef4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	460b      	mov	r3, r1
 8003f08:	813b      	strh	r3, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	8979      	ldrh	r1, [r7, #10]
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <I2C_RequestMemoryRead+0xa4>)
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f984 	bl	8004228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f89d 	bl	8004064 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e02c      	b.n	8003f8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d105      	bne.n	8003f46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
 8003f44:	e015      	b.n	8003f72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f46:	893b      	ldrh	r3, [r7, #8]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f883 	bl	8004064 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e012      	b.n	8003f8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f68:	893b      	ldrh	r3, [r7, #8]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f831 	bl	8003fe4 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	80002000 	.word	0x80002000

08003f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d103      	bne.n	8003fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d007      	beq.n	8003fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	619a      	str	r2, [r3, #24]
  }
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff4:	e022      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d01e      	beq.n	800403c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe fef7 	bl	8002df0 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d113      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e00f      	b.n	800405c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	d0cd      	beq.n	8003ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004070:	e02c      	b.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f870 	bl	800415c <I2C_IsAcknowledgeFailed>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02a      	b.n	80040dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d01e      	beq.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fe feaf 	bl	8002df0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d113      	bne.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e007      	b.n	80040dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d1cb      	bne.n	8004072 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f0:	e028      	b.n	8004144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f830 	bl	800415c <I2C_IsAcknowledgeFailed>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e026      	b.n	8004154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fe fe73 	bl	8002df0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e007      	b.n	8004154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	d1cf      	bne.n	80040f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d151      	bne.n	800421a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004176:	e022      	b.n	80041be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d01e      	beq.n	80041be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fe fe36 	bl	8002df0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <I2C_IsAcknowledgeFailed+0x3a>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d113      	bne.n	80041be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e02e      	b.n	800421c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d1d5      	bne.n	8004178 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2210      	movs	r2, #16
 80041d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2220      	movs	r2, #32
 80041da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff fedd 	bl	8003f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <I2C_IsAcknowledgeFailed+0xc8>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	fe00e800 	.word	0xfe00e800

08004228 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	817b      	strh	r3, [r7, #10]
 8004236:	4613      	mov	r3, r2
 8004238:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	0d5b      	lsrs	r3, r3, #21
 8004244:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <I2C_TransferConfig+0x58>)
 800424a:	430b      	orrs	r3, r1
 800424c:	43db      	mvns	r3, r3
 800424e:	ea02 0103 	and.w	r1, r2, r3
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004258:	7a7b      	ldrb	r3, [r7, #9]
 800425a:	041b      	lsls	r3, r3, #16
 800425c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	03ff63ff 	.word	0x03ff63ff

08004284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b20      	cmp	r3, #32
 8004298:	d138      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e032      	b.n	800430e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	d139      	bne.n	80043a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800433a:	2302      	movs	r3, #2
 800433c:	e033      	b.n	80043a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	; 0x24
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800436c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_PWREx_GetVoltageRange+0x18>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40007000 	.word	0x40007000

080043d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043de:	d130      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d038      	beq.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2232      	movs	r2, #50	; 0x32
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	0c9b      	lsrs	r3, r3, #18
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004414:	e002      	b.n	800441c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b01      	subs	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d102      	bne.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f2      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d110      	bne.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00f      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d007      	beq.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004458:	4a05      	ldr	r2, [pc, #20]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800445e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40007000 	.word	0x40007000
 8004474:	20000000 	.word	0x20000000
 8004478:	431bde83 	.word	0x431bde83

0800447c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e3d4      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448e:	4ba1      	ldr	r3, [pc, #644]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004498:	4b9e      	ldr	r3, [pc, #632]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80e4 	beq.w	8004678 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_RCC_OscConfig+0x4a>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	f040 808b 	bne.w	80045d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	f040 8087 	bne.w	80045d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c6:	4b93      	ldr	r3, [pc, #588]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_RCC_OscConfig+0x62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e3ac      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	4b8c      	ldr	r3, [pc, #560]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <HAL_RCC_OscConfig+0x7c>
 80044ee:	4b89      	ldr	r3, [pc, #548]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f6:	e005      	b.n	8004504 <HAL_RCC_OscConfig+0x88>
 80044f8:	4b86      	ldr	r3, [pc, #536]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004504:	4293      	cmp	r3, r2
 8004506:	d223      	bcs.n	8004550 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fd41 	bl	8004f94 <RCC_SetFlashLatencyFromMSIRange>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e38d      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451c:	4b7d      	ldr	r3, [pc, #500]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7c      	ldr	r2, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004522:	f043 0308 	orr.w	r3, r3, #8
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b7a      	ldr	r3, [pc, #488]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4977      	ldr	r1, [pc, #476]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	4972      	ldr	r1, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
 800454e:	e025      	b.n	800459c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004550:	4b70      	ldr	r3, [pc, #448]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004556:	f043 0308 	orr.w	r3, r3, #8
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	496a      	ldr	r1, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456e:	4b69      	ldr	r3, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	4965      	ldr	r1, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fd01 	bl	8004f94 <RCC_SetFlashLatencyFromMSIRange>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e34d      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800459c:	f000 fc36 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b5c      	ldr	r3, [pc, #368]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	495a      	ldr	r1, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x29c>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
 80045b8:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCC_OscConfig+0x2a0>)
 80045ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045bc:	4b58      	ldr	r3, [pc, #352]	; (8004720 <HAL_RCC_OscConfig+0x2a4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fbc5 	bl	8002d50 <HAL_InitTick>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d052      	beq.n	8004676 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	e331      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d032      	beq.n	8004642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a4c      	ldr	r2, [pc, #304]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045e8:	f7fe fc02 	bl	8002df0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f0:	f7fe fbfe 	bl	8002df0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e31a      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a40      	ldr	r2, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b3e      	ldr	r3, [pc, #248]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	493b      	ldr	r1, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800462c:	4b39      	ldr	r3, [pc, #228]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	4936      	ldr	r1, [pc, #216]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	e01a      	b.n	8004678 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004642:	4b34      	ldr	r3, [pc, #208]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a33      	ldr	r2, [pc, #204]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800464e:	f7fe fbcf 	bl	8002df0 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004656:	f7fe fbcb 	bl	8002df0 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e2e7      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004668:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x1da>
 8004674:	e000      	b.n	8004678 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004676:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d074      	beq.n	800476e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x21a>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d10e      	bne.n	80046ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d10b      	bne.n	80046ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004696:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d064      	beq.n	800476c <HAL_RCC_OscConfig+0x2f0>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d160      	bne.n	800476c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e2c4      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x24a>
 80046b8:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	e01d      	b.n	8004702 <HAL_RCC_OscConfig+0x286>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ce:	d10c      	bne.n	80046ea <HAL_RCC_OscConfig+0x26e>
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0f      	ldr	r2, [pc, #60]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e00b      	b.n	8004702 <HAL_RCC_OscConfig+0x286>
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a06      	ldr	r2, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01c      	beq.n	8004744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fe fb71 	bl	8002df0 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004710:	e011      	b.n	8004736 <HAL_RCC_OscConfig+0x2ba>
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
 8004718:	0800be80 	.word	0x0800be80
 800471c:	20000000 	.word	0x20000000
 8004720:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fe fb64 	bl	8002df0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e280      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004736:	4baf      	ldr	r3, [pc, #700]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x2a8>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fe fb54 	bl	8002df0 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fb50 	bl	8002df0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e26c      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800475e:	4ba5      	ldr	r3, [pc, #660]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x2d0>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d060      	beq.n	800483c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x310>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d119      	bne.n	80047ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d116      	bne.n	80047ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	4b99      	ldr	r3, [pc, #612]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x328>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e249      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b93      	ldr	r3, [pc, #588]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	4990      	ldr	r1, [pc, #576]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b8:	e040      	b.n	800483c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d023      	beq.n	800480a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c2:	4b8c      	ldr	r3, [pc, #560]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a8b      	ldr	r2, [pc, #556]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fe fb0f 	bl	8002df0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fe fb0b 	bl	8002df0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e227      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047e8:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	497c      	ldr	r1, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
 8004808:	e018      	b.n	800483c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fe faeb 	bl	8002df0 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481e:	f7fe fae7 	bl	8002df0 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e203      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004830:	4b70      	ldr	r3, [pc, #448]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03c      	beq.n	80048c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01c      	beq.n	800488a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fe fac6 	bl	8002df0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fe fac2 	bl	8002df0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1de      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487a:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ef      	beq.n	8004868 <HAL_RCC_OscConfig+0x3ec>
 8004888:	e01b      	b.n	80048c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488a:	4b5a      	ldr	r3, [pc, #360]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fe faa9 	bl	8002df0 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a2:	f7fe faa5 	bl	8002df0 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e1c1      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ef      	bne.n	80048a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a6 	beq.w	8004a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d0:	2300      	movs	r3, #0
 80048d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10d      	bne.n	80048fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b44      	ldr	r3, [pc, #272]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a43      	ldr	r2, [pc, #268]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fc:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d118      	bne.n	800493a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004914:	f7fe fa6c 	bl	8002df0 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491c:	f7fe fa68 	bl	8002df0 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e184      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d108      	bne.n	8004954 <HAL_RCC_OscConfig+0x4d8>
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004952:	e024      	b.n	800499e <HAL_RCC_OscConfig+0x522>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d110      	bne.n	800497e <HAL_RCC_OscConfig+0x502>
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496c:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497c:	e00f      	b.n	800499e <HAL_RCC_OscConfig+0x522>
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fe fa23 	bl	8002df0 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fe fa1f 	bl	8002df0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e139      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ed      	beq.n	80049ae <HAL_RCC_OscConfig+0x532>
 80049d2:	e01a      	b.n	8004a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fe fa0c 	bl	8002df0 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049da:	e00f      	b.n	80049fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fe fa08 	bl	8002df0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d906      	bls.n	80049fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e122      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fc:	4b90      	ldr	r3, [pc, #576]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e8      	bne.n	80049dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a0a:	7ffb      	ldrb	r3, [r7, #31]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a10:	4b8b      	ldr	r3, [pc, #556]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	4a8a      	ldr	r2, [pc, #552]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8108 	beq.w	8004c36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	f040 80d0 	bne.w	8004bd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a30:	4b83      	ldr	r3, [pc, #524]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0203 	and.w	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d130      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d127      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d11f      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a70:	2a07      	cmp	r2, #7
 8004a72:	bf14      	ite	ne
 8004a74:	2201      	movne	r2, #1
 8004a76:	2200      	moveq	r2, #0
 8004a78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d113      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d06e      	beq.n	8004b84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d069      	beq.n	8004b80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aac:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ab8:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0b7      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5c      	ldr	r2, [pc, #368]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad4:	f7fe f98c 	bl	8002df0 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fe f988 	bl	8002df0 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0a4      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aee:	4b54      	ldr	r3, [pc, #336]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004afa:	4b51      	ldr	r3, [pc, #324]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	4b51      	ldr	r3, [pc, #324]	; (8004c44 <HAL_RCC_OscConfig+0x7c8>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b14:	0212      	lsls	r2, r2, #8
 8004b16:	4311      	orrs	r1, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b1c:	0852      	lsrs	r2, r2, #1
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0552      	lsls	r2, r2, #21
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b28:	0852      	lsrs	r2, r2, #1
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	0652      	lsls	r2, r2, #25
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b34:	0912      	lsrs	r2, r2, #4
 8004b36:	0452      	lsls	r2, r2, #17
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	4941      	ldr	r1, [pc, #260]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b40:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a3e      	ldr	r2, [pc, #248]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b4c:	4b3c      	ldr	r3, [pc, #240]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a3b      	ldr	r2, [pc, #236]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b58:	f7fe f94a 	bl	8002df0 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fe f946 	bl	8002df0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e062      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b72:	4b33      	ldr	r3, [pc, #204]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b7e:	e05a      	b.n	8004c36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e059      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b84:	4b2e      	ldr	r3, [pc, #184]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d152      	bne.n	8004c36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b9c:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ba8:	f7fe f922 	bl	8002df0 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fe f91e 	bl	8002df0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e03a      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x734>
 8004bce:	e032      	b.n	8004c36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d02d      	beq.n	8004c32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004be2:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004bf4:	f023 0303 	bic.w	r3, r3, #3
 8004bf8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4a10      	ldr	r2, [pc, #64]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004c00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fe f8f1 	bl	8002df0 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fe f8ed 	bl	8002df0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e009      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_OscConfig+0x7c4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f0      	bne.n	8004c12 <HAL_RCC_OscConfig+0x796>
 8004c30:	e001      	b.n	8004c36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	f99d808c 	.word	0xf99d808c

08004c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0c8      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b66      	ldr	r3, [pc, #408]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d910      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b63      	ldr	r3, [pc, #396]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 0207 	bic.w	r2, r3, #7
 8004c72:	4961      	ldr	r1, [pc, #388]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b5f      	ldr	r3, [pc, #380]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0b0      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d04c      	beq.n	8004d32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca0:	4b56      	ldr	r3, [pc, #344]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d121      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e09e      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb8:	4b50      	ldr	r3, [pc, #320]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d115      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e092      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd0:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e086      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e07e      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cf0:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 0203 	bic.w	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	493f      	ldr	r1, [pc, #252]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fe f875 	bl	8002df0 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0a:	f7fe f871 	bl	8002df0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e066      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d20:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 020c 	and.w	r2, r3, #12
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d1eb      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3e:	4b2f      	ldr	r3, [pc, #188]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	492c      	ldr	r1, [pc, #176]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d210      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	4924      	ldr	r1, [pc, #144]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <HAL_RCC_ClockConfig+0x1b0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e036      	b.n	8004dee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4918      	ldr	r1, [pc, #96]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4910      	ldr	r1, [pc, #64]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dbe:	f000 f825 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <HAL_RCC_ClockConfig+0x1b4>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	490c      	ldr	r1, [pc, #48]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	5ccb      	ldrb	r3, [r1, r3]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd ffb4 	bl	8002d50 <HAL_InitTick>
 8004de8:	4603      	mov	r3, r0
 8004dea:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dec:	7afb      	ldrb	r3, [r7, #11]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	0800be80 	.word	0x0800be80
 8004e04:	20000000 	.word	0x20000000
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e24:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x34>
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d121      	bne.n	8004e7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d11e      	bne.n	8004e7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e40:	4b34      	ldr	r3, [pc, #208]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e4c:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e005      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10d      	bne.n	8004e94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e84:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e004      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e90:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d134      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d003      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xac>
 8004eb0:	e005      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004eb4:	617b      	str	r3, [r7, #20]
      break;
 8004eb6:	e005      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004eba:	617b      	str	r3, [r7, #20]
      break;
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	617b      	str	r3, [r7, #20]
      break;
 8004ec2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	3301      	adds	r3, #1
 8004ed0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	fb02 f203 	mul.w	r2, r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	0e5b      	lsrs	r3, r3, #25
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f04:	69bb      	ldr	r3, [r7, #24]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3724      	adds	r7, #36	; 0x24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	0800be98 	.word	0x0800be98
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	007a1200 	.word	0x007a1200

08004f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000000 	.word	0x20000000

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4904      	ldr	r1, [pc, #16]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000
 8004f64:	0800be90 	.word	0x0800be90

08004f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f6c:	f7ff ffda 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0adb      	lsrs	r3, r3, #11
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4904      	ldr	r1, [pc, #16]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800be90 	.word	0x0800be90

08004f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fac:	f7ff fa02 	bl	80043b4 <HAL_PWREx_GetVoltageRange>
 8004fb0:	6178      	str	r0, [r7, #20]
 8004fb2:	e014      	b.n	8004fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	4a24      	ldr	r2, [pc, #144]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc0:	4b22      	ldr	r3, [pc, #136]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fcc:	f7ff f9f2 	bl	80043b4 <HAL_PWREx_GetVoltageRange>
 8004fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe4:	d10b      	bne.n	8004ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d919      	bls.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2ba0      	cmp	r3, #160	; 0xa0
 8004ff0:	d902      	bls.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e013      	b.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e010      	b.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d902      	bls.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005004:	2303      	movs	r3, #3
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	e00a      	b.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d102      	bne.n	8005016 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005010:	2302      	movs	r3, #2
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e004      	b.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b70      	cmp	r3, #112	; 0x70
 800501a:	d101      	bne.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800501c:	2301      	movs	r3, #1
 800501e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 0207 	bic.w	r2, r3, #7
 8005028:	4909      	ldr	r1, [pc, #36]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d001      	beq.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40021000 	.word	0x40021000
 8005050:	40022000 	.word	0x40022000

08005054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800505c:	2300      	movs	r3, #0
 800505e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005060:	2300      	movs	r3, #0
 8005062:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506c:	2b00      	cmp	r3, #0
 800506e:	d041      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005074:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005078:	d02a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800507a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800507e:	d824      	bhi.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005084:	d008      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800508a:	d81e      	bhi.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005094:	d010      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005096:	e018      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005098:	4b86      	ldr	r3, [pc, #536]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a85      	ldr	r2, [pc, #532]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a4:	e015      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	2100      	movs	r1, #0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fabb 	bl	8005628 <RCCEx_PLLSAI1_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b6:	e00c      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3320      	adds	r3, #32
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fba6 	bl	8005810 <RCCEx_PLLSAI2_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c8:	e003      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	74fb      	strb	r3, [r7, #19]
      break;
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050d8:	4b76      	ldr	r3, [pc, #472]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e6:	4973      	ldr	r1, [pc, #460]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050ee:	e001      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	7cfb      	ldrb	r3, [r7, #19]
 80050f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d041      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005108:	d02a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800510a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800510e:	d824      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005114:	d008      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511a:	d81e      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005124:	d010      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005126:	e018      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005128:	4b62      	ldr	r3, [pc, #392]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a61      	ldr	r2, [pc, #388]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005132:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005134:	e015      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fa73 	bl	8005628 <RCCEx_PLLSAI1_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005146:	e00c      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3320      	adds	r3, #32
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb5e 	bl	8005810 <RCCEx_PLLSAI2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005158:	e003      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	74fb      	strb	r3, [r7, #19]
      break;
 800515e:	e000      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005162:	7cfb      	ldrb	r3, [r7, #19]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005168:	4b52      	ldr	r3, [pc, #328]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005176:	494f      	ldr	r1, [pc, #316]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800517e:	e001      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80a0 	beq.w	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00d      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ac:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	4a40      	ldr	r2, [pc, #256]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b6:	6593      	str	r3, [r2, #88]	; 0x58
 80051b8:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c4:	2301      	movs	r3, #1
 80051c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051c8:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051d4:	f7fd fe0c 	bl	8002df0 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051da:	e009      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051dc:	f7fd fe08 	bl	8002df0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	74fb      	strb	r3, [r7, #19]
        break;
 80051ee:	e005      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051f0:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d15c      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005202:	4b2c      	ldr	r3, [pc, #176]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01f      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	d019      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800522c:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800523c:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7fd fdc7 	bl	8002df0 <HAL_GetTick>
 8005262:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005264:	e00b      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fd fdc3 	bl	8002df0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d902      	bls.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	74fb      	strb	r3, [r7, #19]
            break;
 800527c:	e006      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ec      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a2:	4904      	ldr	r1, [pc, #16]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052aa:	e009      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
 80052b0:	e006      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c0:	7c7b      	ldrb	r3, [r7, #17]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c6:	4b9e      	ldr	r3, [pc, #632]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	4a9d      	ldr	r2, [pc, #628]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052de:	4b98      	ldr	r3, [pc, #608]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 0203 	bic.w	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	4994      	ldr	r1, [pc, #592]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005300:	4b8f      	ldr	r3, [pc, #572]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 020c 	bic.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	498c      	ldr	r1, [pc, #560]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005322:	4b87      	ldr	r3, [pc, #540]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	4983      	ldr	r1, [pc, #524]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005344:	4b7e      	ldr	r3, [pc, #504]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	497b      	ldr	r1, [pc, #492]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005374:	4972      	ldr	r1, [pc, #456]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005388:	4b6d      	ldr	r3, [pc, #436]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	496a      	ldr	r1, [pc, #424]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053aa:	4b65      	ldr	r3, [pc, #404]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	4961      	ldr	r1, [pc, #388]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053cc:	4b5c      	ldr	r3, [pc, #368]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053da:	4959      	ldr	r1, [pc, #356]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ee:	4b54      	ldr	r3, [pc, #336]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	4950      	ldr	r1, [pc, #320]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005410:	4b4b      	ldr	r3, [pc, #300]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	4948      	ldr	r1, [pc, #288]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005432:	4b43      	ldr	r3, [pc, #268]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	493f      	ldr	r1, [pc, #252]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d028      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005454:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005462:	4937      	ldr	r1, [pc, #220]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005472:	d106      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005474:	4b32      	ldr	r3, [pc, #200]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a31      	ldr	r2, [pc, #196]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547e:	60d3      	str	r3, [r2, #12]
 8005480:	e011      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548a:	d10c      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f8c8 	bl	8005628 <RCCEx_PLLSAI1_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d028      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c0:	491f      	ldr	r1, [pc, #124]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4a1a      	ldr	r2, [pc, #104]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054dc:	60d3      	str	r3, [r2, #12]
 80054de:	e011      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	2101      	movs	r1, #1
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 f899 	bl	8005628 <RCCEx_PLLSAI1_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d02b      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551e:	4908      	ldr	r1, [pc, #32]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552e:	d109      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a02      	ldr	r2, [pc, #8]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553a:	60d3      	str	r3, [r2, #12]
 800553c:	e014      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800554c:	d10c      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	2101      	movs	r1, #1
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f867 	bl	8005628 <RCCEx_PLLSAI1_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800555e:	7cfb      	ldrb	r3, [r7, #19]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005564:	7cfb      	ldrb	r3, [r7, #19]
 8005566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d02f      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005574:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005582:	4928      	ldr	r1, [pc, #160]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005592:	d10d      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	2102      	movs	r1, #2
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f844 	bl	8005628 <RCCEx_PLLSAI1_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d014      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	74bb      	strb	r3, [r7, #18]
 80055ae:	e011      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3320      	adds	r3, #32
 80055be:	2102      	movs	r1, #2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f925 	bl	8005810 <RCCEx_PLLSAI2_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ee:	490d      	ldr	r1, [pc, #52]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005612:	4904      	ldr	r1, [pc, #16]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800561a:	7cbb      	ldrb	r3, [r7, #18]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000

08005628 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005636:	4b75      	ldr	r3, [pc, #468]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d018      	beq.n	8005674 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005642:	4b72      	ldr	r3, [pc, #456]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0203 	and.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d10d      	bne.n	800566e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
       ||
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800565a:	4b6c      	ldr	r3, [pc, #432]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
       ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d047      	beq.n	80056fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	e044      	b.n	80056fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d018      	beq.n	80056ae <RCCEx_PLLSAI1_Config+0x86>
 800567c:	2b03      	cmp	r3, #3
 800567e:	d825      	bhi.n	80056cc <RCCEx_PLLSAI1_Config+0xa4>
 8005680:	2b01      	cmp	r3, #1
 8005682:	d002      	beq.n	800568a <RCCEx_PLLSAI1_Config+0x62>
 8005684:	2b02      	cmp	r3, #2
 8005686:	d009      	beq.n	800569c <RCCEx_PLLSAI1_Config+0x74>
 8005688:	e020      	b.n	80056cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800568a:	4b60      	ldr	r3, [pc, #384]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11d      	bne.n	80056d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569a:	e01a      	b.n	80056d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800569c:	4b5b      	ldr	r3, [pc, #364]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d116      	bne.n	80056d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ac:	e013      	b.n	80056d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ae:	4b57      	ldr	r3, [pc, #348]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10f      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ba:	4b54      	ldr	r3, [pc, #336]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ca:	e006      	b.n	80056da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e004      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056d2:	bf00      	nop
 80056d4:	e002      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056da:	bf00      	nop
    }

    if(status == HAL_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10d      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056e2:	4b4a      	ldr	r3, [pc, #296]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6819      	ldr	r1, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	430b      	orrs	r3, r1
 80056f8:	4944      	ldr	r1, [pc, #272]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d17d      	bne.n	8005800 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005704:	4b41      	ldr	r3, [pc, #260]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a40      	ldr	r2, [pc, #256]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 800570a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800570e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005710:	f7fd fb6e 	bl	8002df0 <HAL_GetTick>
 8005714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005716:	e009      	b.n	800572c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005718:	f7fd fb6a 	bl	8002df0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d902      	bls.n	800572c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	73fb      	strb	r3, [r7, #15]
        break;
 800572a:	e005      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800572c:	4b37      	ldr	r3, [pc, #220]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ef      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d160      	bne.n	8005800 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d111      	bne.n	8005768 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005744:	4b31      	ldr	r3, [pc, #196]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800574c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6892      	ldr	r2, [r2, #8]
 8005754:	0211      	lsls	r1, r2, #8
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68d2      	ldr	r2, [r2, #12]
 800575a:	0912      	lsrs	r2, r2, #4
 800575c:	0452      	lsls	r2, r2, #17
 800575e:	430a      	orrs	r2, r1
 8005760:	492a      	ldr	r1, [pc, #168]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	610b      	str	r3, [r1, #16]
 8005766:	e027      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d112      	bne.n	8005794 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800576e:	4b27      	ldr	r3, [pc, #156]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005776:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6892      	ldr	r2, [r2, #8]
 800577e:	0211      	lsls	r1, r2, #8
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6912      	ldr	r2, [r2, #16]
 8005784:	0852      	lsrs	r2, r2, #1
 8005786:	3a01      	subs	r2, #1
 8005788:	0552      	lsls	r2, r2, #21
 800578a:	430a      	orrs	r2, r1
 800578c:	491f      	ldr	r1, [pc, #124]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]
 8005792:	e011      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005794:	4b1d      	ldr	r3, [pc, #116]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800579c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	0211      	lsls	r1, r2, #8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6952      	ldr	r2, [r2, #20]
 80057aa:	0852      	lsrs	r2, r2, #1
 80057ac:	3a01      	subs	r2, #1
 80057ae:	0652      	lsls	r2, r2, #25
 80057b0:	430a      	orrs	r2, r1
 80057b2:	4916      	ldr	r1, [pc, #88]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c4:	f7fd fb14 	bl	8002df0 <HAL_GetTick>
 80057c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ca:	e009      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057cc:	f7fd fb10 	bl	8002df0 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d902      	bls.n	80057e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	73fb      	strb	r3, [r7, #15]
          break;
 80057de:	e005      	b.n	80057ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ef      	beq.n	80057cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	4904      	ldr	r1, [pc, #16]	; (800580c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000

08005810 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800581e:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d018      	beq.n	800585c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800582a:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0203 	and.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d10d      	bne.n	8005856 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
       ||
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005842:	4b61      	ldr	r3, [pc, #388]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
       ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d047      	beq.n	80058e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
 800585a:	e044      	b.n	80058e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d018      	beq.n	8005896 <RCCEx_PLLSAI2_Config+0x86>
 8005864:	2b03      	cmp	r3, #3
 8005866:	d825      	bhi.n	80058b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d002      	beq.n	8005872 <RCCEx_PLLSAI2_Config+0x62>
 800586c:	2b02      	cmp	r3, #2
 800586e:	d009      	beq.n	8005884 <RCCEx_PLLSAI2_Config+0x74>
 8005870:	e020      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005872:	4b55      	ldr	r3, [pc, #340]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11d      	bne.n	80058ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005882:	e01a      	b.n	80058ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005884:	4b50      	ldr	r3, [pc, #320]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588c:	2b00      	cmp	r3, #0
 800588e:	d116      	bne.n	80058be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005894:	e013      	b.n	80058be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005896:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10f      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058a2:	4b49      	ldr	r3, [pc, #292]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058b2:	e006      	b.n	80058c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      break;
 80058b8:	e004      	b.n	80058c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058ca:	4b3f      	ldr	r3, [pc, #252]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6819      	ldr	r1, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	430b      	orrs	r3, r1
 80058e0:	4939      	ldr	r1, [pc, #228]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d167      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058ec:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a35      	ldr	r2, [pc, #212]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f8:	f7fd fa7a 	bl	8002df0 <HAL_GetTick>
 80058fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058fe:	e009      	b.n	8005914 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005900:	f7fd fa76 	bl	8002df0 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d902      	bls.n	8005914 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	73fb      	strb	r3, [r7, #15]
        break;
 8005912:	e005      	b.n	8005920 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005914:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1ef      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d14a      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d111      	bne.n	8005950 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800592c:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6892      	ldr	r2, [r2, #8]
 800593c:	0211      	lsls	r1, r2, #8
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68d2      	ldr	r2, [r2, #12]
 8005942:	0912      	lsrs	r2, r2, #4
 8005944:	0452      	lsls	r2, r2, #17
 8005946:	430a      	orrs	r2, r1
 8005948:	491f      	ldr	r1, [pc, #124]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800594a:	4313      	orrs	r3, r2
 800594c:	614b      	str	r3, [r1, #20]
 800594e:	e011      	b.n	8005974 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005950:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6892      	ldr	r2, [r2, #8]
 8005960:	0211      	lsls	r1, r2, #8
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6912      	ldr	r2, [r2, #16]
 8005966:	0852      	lsrs	r2, r2, #1
 8005968:	3a01      	subs	r2, #1
 800596a:	0652      	lsls	r2, r2, #25
 800596c:	430a      	orrs	r2, r1
 800596e:	4916      	ldr	r1, [pc, #88]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005970:	4313      	orrs	r3, r2
 8005972:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005974:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fd fa36 	bl	8002df0 <HAL_GetTick>
 8005984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005986:	e009      	b.n	800599c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005988:	f7fd fa32 	bl	8002df0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d902      	bls.n	800599c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	73fb      	strb	r3, [r7, #15]
          break;
 800599a:	e005      	b.n	80059a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ef      	beq.n	8005988 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	4904      	ldr	r1, [pc, #16]	; (80059c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000

080059cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e040      	b.n	8005a60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fb ff30 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8c0 	bl	8005b90 <UART_SetConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e022      	b.n	8005a60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb3e 	bl	80060a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fbc5 	bl	80061e8 <UART_CheckIdleState>
 8005a5e:	4603      	mov	r3, r0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	f040 8082 	bne.w	8005b86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Transmit+0x26>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07a      	b.n	8005b88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Transmit+0x38>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e073      	b.n	8005b88 <HAL_UART_Transmit+0x120>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2221      	movs	r2, #33	; 0x21
 8005ab4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab6:	f7fd f99b 	bl	8002df0 <HAL_GetTick>
 8005aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad4:	d108      	bne.n	8005ae8 <HAL_UART_Transmit+0x80>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e003      	b.n	8005af0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005af8:	e02d      	b.n	8005b56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2200      	movs	r2, #0
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fbb8 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e039      	b.n	8005b88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	881a      	ldrh	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b26:	b292      	uxth	r2, r2
 8005b28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e008      	b.n	8005b44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	781a      	ldrb	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1cb      	bne.n	8005afa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2140      	movs	r1, #64	; 0x40
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fb84 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e005      	b.n	8005b88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e000      	b.n	8005b88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
  }
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4bad      	ldr	r3, [pc, #692]	; (8005e70 <UART_SetConfig+0x2e0>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	69f9      	ldr	r1, [r7, #28]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4aa2      	ldr	r2, [pc, #648]	; (8005e74 <UART_SetConfig+0x2e4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a99      	ldr	r2, [pc, #612]	; (8005e78 <UART_SetConfig+0x2e8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d121      	bne.n	8005c5a <UART_SetConfig+0xca>
 8005c16:	4b99      	ldr	r3, [pc, #612]	; (8005e7c <UART_SetConfig+0x2ec>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d817      	bhi.n	8005c54 <UART_SetConfig+0xc4>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x9c>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c49 	.word	0x08005c49
 8005c34:	08005c43 	.word	0x08005c43
 8005c38:	08005c4f 	.word	0x08005c4f
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	76fb      	strb	r3, [r7, #27]
 8005c40:	e0e7      	b.n	8005e12 <UART_SetConfig+0x282>
 8005c42:	2302      	movs	r3, #2
 8005c44:	76fb      	strb	r3, [r7, #27]
 8005c46:	e0e4      	b.n	8005e12 <UART_SetConfig+0x282>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	76fb      	strb	r3, [r7, #27]
 8005c4c:	e0e1      	b.n	8005e12 <UART_SetConfig+0x282>
 8005c4e:	2308      	movs	r3, #8
 8005c50:	76fb      	strb	r3, [r7, #27]
 8005c52:	e0de      	b.n	8005e12 <UART_SetConfig+0x282>
 8005c54:	2310      	movs	r3, #16
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e0db      	b.n	8005e12 <UART_SetConfig+0x282>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a88      	ldr	r2, [pc, #544]	; (8005e80 <UART_SetConfig+0x2f0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d132      	bne.n	8005cca <UART_SetConfig+0x13a>
 8005c64:	4b85      	ldr	r3, [pc, #532]	; (8005e7c <UART_SetConfig+0x2ec>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d828      	bhi.n	8005cc4 <UART_SetConfig+0x134>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <UART_SetConfig+0xe8>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cc5 	.word	0x08005cc5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cb9 	.word	0x08005cb9
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cc5 	.word	0x08005cc5
 8005c98:	08005cb3 	.word	0x08005cb3
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005cc5 	.word	0x08005cc5
 8005ca8:	08005cbf 	.word	0x08005cbf
 8005cac:	2300      	movs	r3, #0
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e0af      	b.n	8005e12 <UART_SetConfig+0x282>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e0ac      	b.n	8005e12 <UART_SetConfig+0x282>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e0a9      	b.n	8005e12 <UART_SetConfig+0x282>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e0a6      	b.n	8005e12 <UART_SetConfig+0x282>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e0a3      	b.n	8005e12 <UART_SetConfig+0x282>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6d      	ldr	r2, [pc, #436]	; (8005e84 <UART_SetConfig+0x2f4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d120      	bne.n	8005d16 <UART_SetConfig+0x186>
 8005cd4:	4b69      	ldr	r3, [pc, #420]	; (8005e7c <UART_SetConfig+0x2ec>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cde:	2b30      	cmp	r3, #48	; 0x30
 8005ce0:	d013      	beq.n	8005d0a <UART_SetConfig+0x17a>
 8005ce2:	2b30      	cmp	r3, #48	; 0x30
 8005ce4:	d814      	bhi.n	8005d10 <UART_SetConfig+0x180>
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d009      	beq.n	8005cfe <UART_SetConfig+0x16e>
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d810      	bhi.n	8005d10 <UART_SetConfig+0x180>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <UART_SetConfig+0x168>
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d006      	beq.n	8005d04 <UART_SetConfig+0x174>
 8005cf6:	e00b      	b.n	8005d10 <UART_SetConfig+0x180>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	76fb      	strb	r3, [r7, #27]
 8005cfc:	e089      	b.n	8005e12 <UART_SetConfig+0x282>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	76fb      	strb	r3, [r7, #27]
 8005d02:	e086      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d04:	2304      	movs	r3, #4
 8005d06:	76fb      	strb	r3, [r7, #27]
 8005d08:	e083      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	76fb      	strb	r3, [r7, #27]
 8005d0e:	e080      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d10:	2310      	movs	r3, #16
 8005d12:	76fb      	strb	r3, [r7, #27]
 8005d14:	e07d      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a5b      	ldr	r2, [pc, #364]	; (8005e88 <UART_SetConfig+0x2f8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d120      	bne.n	8005d62 <UART_SetConfig+0x1d2>
 8005d20:	4b56      	ldr	r3, [pc, #344]	; (8005e7c <UART_SetConfig+0x2ec>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d2c:	d013      	beq.n	8005d56 <UART_SetConfig+0x1c6>
 8005d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d30:	d814      	bhi.n	8005d5c <UART_SetConfig+0x1cc>
 8005d32:	2b80      	cmp	r3, #128	; 0x80
 8005d34:	d009      	beq.n	8005d4a <UART_SetConfig+0x1ba>
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d810      	bhi.n	8005d5c <UART_SetConfig+0x1cc>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <UART_SetConfig+0x1b4>
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d006      	beq.n	8005d50 <UART_SetConfig+0x1c0>
 8005d42:	e00b      	b.n	8005d5c <UART_SetConfig+0x1cc>
 8005d44:	2300      	movs	r3, #0
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e063      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	76fb      	strb	r3, [r7, #27]
 8005d4e:	e060      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d50:	2304      	movs	r3, #4
 8005d52:	76fb      	strb	r3, [r7, #27]
 8005d54:	e05d      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d56:	2308      	movs	r3, #8
 8005d58:	76fb      	strb	r3, [r7, #27]
 8005d5a:	e05a      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	76fb      	strb	r3, [r7, #27]
 8005d60:	e057      	b.n	8005e12 <UART_SetConfig+0x282>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a49      	ldr	r2, [pc, #292]	; (8005e8c <UART_SetConfig+0x2fc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d125      	bne.n	8005db8 <UART_SetConfig+0x228>
 8005d6c:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <UART_SetConfig+0x2ec>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7a:	d017      	beq.n	8005dac <UART_SetConfig+0x21c>
 8005d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d80:	d817      	bhi.n	8005db2 <UART_SetConfig+0x222>
 8005d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d86:	d00b      	beq.n	8005da0 <UART_SetConfig+0x210>
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8c:	d811      	bhi.n	8005db2 <UART_SetConfig+0x222>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <UART_SetConfig+0x20a>
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d006      	beq.n	8005da6 <UART_SetConfig+0x216>
 8005d98:	e00b      	b.n	8005db2 <UART_SetConfig+0x222>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	76fb      	strb	r3, [r7, #27]
 8005d9e:	e038      	b.n	8005e12 <UART_SetConfig+0x282>
 8005da0:	2302      	movs	r3, #2
 8005da2:	76fb      	strb	r3, [r7, #27]
 8005da4:	e035      	b.n	8005e12 <UART_SetConfig+0x282>
 8005da6:	2304      	movs	r3, #4
 8005da8:	76fb      	strb	r3, [r7, #27]
 8005daa:	e032      	b.n	8005e12 <UART_SetConfig+0x282>
 8005dac:	2308      	movs	r3, #8
 8005dae:	76fb      	strb	r3, [r7, #27]
 8005db0:	e02f      	b.n	8005e12 <UART_SetConfig+0x282>
 8005db2:	2310      	movs	r3, #16
 8005db4:	76fb      	strb	r3, [r7, #27]
 8005db6:	e02c      	b.n	8005e12 <UART_SetConfig+0x282>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <UART_SetConfig+0x2e4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d125      	bne.n	8005e0e <UART_SetConfig+0x27e>
 8005dc2:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <UART_SetConfig+0x2ec>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd0:	d017      	beq.n	8005e02 <UART_SetConfig+0x272>
 8005dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd6:	d817      	bhi.n	8005e08 <UART_SetConfig+0x278>
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ddc:	d00b      	beq.n	8005df6 <UART_SetConfig+0x266>
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de2:	d811      	bhi.n	8005e08 <UART_SetConfig+0x278>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <UART_SetConfig+0x260>
 8005de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dec:	d006      	beq.n	8005dfc <UART_SetConfig+0x26c>
 8005dee:	e00b      	b.n	8005e08 <UART_SetConfig+0x278>
 8005df0:	2300      	movs	r3, #0
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e00d      	b.n	8005e12 <UART_SetConfig+0x282>
 8005df6:	2302      	movs	r3, #2
 8005df8:	76fb      	strb	r3, [r7, #27]
 8005dfa:	e00a      	b.n	8005e12 <UART_SetConfig+0x282>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	76fb      	strb	r3, [r7, #27]
 8005e00:	e007      	b.n	8005e12 <UART_SetConfig+0x282>
 8005e02:	2308      	movs	r3, #8
 8005e04:	76fb      	strb	r3, [r7, #27]
 8005e06:	e004      	b.n	8005e12 <UART_SetConfig+0x282>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e001      	b.n	8005e12 <UART_SetConfig+0x282>
 8005e0e:	2310      	movs	r3, #16
 8005e10:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <UART_SetConfig+0x2e4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	f040 8087 	bne.w	8005f2c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e1e:	7efb      	ldrb	r3, [r7, #27]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d837      	bhi.n	8005e94 <UART_SetConfig+0x304>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <UART_SetConfig+0x29c>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e95 	.word	0x08005e95
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e95 	.word	0x08005e95
 8005e3c:	08005e5f 	.word	0x08005e5f
 8005e40:	08005e95 	.word	0x08005e95
 8005e44:	08005e95 	.word	0x08005e95
 8005e48:	08005e95 	.word	0x08005e95
 8005e4c:	08005e67 	.word	0x08005e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7ff f874 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8005e54:	6178      	str	r0, [r7, #20]
        break;
 8005e56:	e022      	b.n	8005e9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e58:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <UART_SetConfig+0x300>)
 8005e5a:	617b      	str	r3, [r7, #20]
        break;
 8005e5c:	e01f      	b.n	8005e9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5e:	f7fe ffd5 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8005e62:	6178      	str	r0, [r7, #20]
        break;
 8005e64:	e01b      	b.n	8005e9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6a:	617b      	str	r3, [r7, #20]
        break;
 8005e6c:	e017      	b.n	8005e9e <UART_SetConfig+0x30e>
 8005e6e:	bf00      	nop
 8005e70:	efff69f3 	.word	0xefff69f3
 8005e74:	40008000 	.word	0x40008000
 8005e78:	40013800 	.word	0x40013800
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40004400 	.word	0x40004400
 8005e84:	40004800 	.word	0x40004800
 8005e88:	40004c00 	.word	0x40004c00
 8005e8c:	40005000 	.word	0x40005000
 8005e90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	76bb      	strb	r3, [r7, #26]
        break;
 8005e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80f1 	beq.w	8006088 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d305      	bcc.n	8005ec2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d902      	bls.n	8005ec8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	76bb      	strb	r3, [r7, #26]
 8005ec6:	e0df      	b.n	8006088 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	020b      	lsls	r3, r1, #8
 8005eda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ede:	0202      	lsls	r2, r0, #8
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	6849      	ldr	r1, [r1, #4]
 8005ee4:	0849      	lsrs	r1, r1, #1
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	f04f 0100 	mov.w	r1, #0
 8005eec:	1814      	adds	r4, r2, r0
 8005eee:	eb43 0501 	adc.w	r5, r3, r1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fe52 	bl	8000ba8 <__aeabi_uldivmod>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4613      	mov	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f12:	d308      	bcc.n	8005f26 <UART_SetConfig+0x396>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1a:	d204      	bcs.n	8005f26 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	60da      	str	r2, [r3, #12]
 8005f24:	e0b0      	b.n	8006088 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	76bb      	strb	r3, [r7, #26]
 8005f2a:	e0ad      	b.n	8006088 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f34:	d15c      	bne.n	8005ff0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005f36:	7efb      	ldrb	r3, [r7, #27]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d828      	bhi.n	8005f8e <UART_SetConfig+0x3fe>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x3b4>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f8f 	.word	0x08005f8f
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f8f 	.word	0x08005f8f
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	08005f87 	.word	0x08005f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f68:	f7fe ffe8 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8005f6c:	6178      	str	r0, [r7, #20]
        break;
 8005f6e:	e013      	b.n	8005f98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fe fffa 	bl	8004f68 <HAL_RCC_GetPCLK2Freq>
 8005f74:	6178      	str	r0, [r7, #20]
        break;
 8005f76:	e00f      	b.n	8005f98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f78:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <UART_SetConfig+0x510>)
 8005f7a:	617b      	str	r3, [r7, #20]
        break;
 8005f7c:	e00c      	b.n	8005f98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fe ff45 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8005f82:	6178      	str	r0, [r7, #20]
        break;
 8005f84:	e008      	b.n	8005f98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8a:	617b      	str	r3, [r7, #20]
        break;
 8005f8c:	e004      	b.n	8005f98 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	76bb      	strb	r3, [r7, #26]
        break;
 8005f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d074      	beq.n	8006088 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	005a      	lsls	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	441a      	add	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d916      	bls.n	8005fea <UART_SetConfig+0x45a>
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc2:	d212      	bcs.n	8005fea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f023 030f 	bic.w	r3, r3, #15
 8005fcc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	89fa      	ldrh	r2, [r7, #14]
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e04e      	b.n	8006088 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	76bb      	strb	r3, [r7, #26]
 8005fee:	e04b      	b.n	8006088 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff0:	7efb      	ldrb	r3, [r7, #27]
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d827      	bhi.n	8006046 <UART_SetConfig+0x4b6>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x46c>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006029 	.word	0x08006029
 8006004:	08006031 	.word	0x08006031
 8006008:	08006047 	.word	0x08006047
 800600c:	08006037 	.word	0x08006037
 8006010:	08006047 	.word	0x08006047
 8006014:	08006047 	.word	0x08006047
 8006018:	08006047 	.word	0x08006047
 800601c:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006020:	f7fe ff8c 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8006024:	6178      	str	r0, [r7, #20]
        break;
 8006026:	e013      	b.n	8006050 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fe ff9e 	bl	8004f68 <HAL_RCC_GetPCLK2Freq>
 800602c:	6178      	str	r0, [r7, #20]
        break;
 800602e:	e00f      	b.n	8006050 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <UART_SetConfig+0x510>)
 8006032:	617b      	str	r3, [r7, #20]
        break;
 8006034:	e00c      	b.n	8006050 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7fe fee9 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 800603a:	6178      	str	r0, [r7, #20]
        break;
 800603c:	e008      	b.n	8006050 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006042:	617b      	str	r3, [r7, #20]
        break;
 8006044:	e004      	b.n	8006050 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	76bb      	strb	r3, [r7, #26]
        break;
 800604e:	bf00      	nop
    }

    if (pclk != 0U)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	085a      	lsrs	r2, r3, #1
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	b29b      	uxth	r3, r3
 800606a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d908      	bls.n	8006084 <UART_SetConfig+0x4f4>
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006078:	d204      	bcs.n	8006084 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e001      	b.n	8006088 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006094:	7ebb      	ldrb	r3, [r7, #26]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bdb0      	pop	{r4, r5, r7, pc}
 800609e:	bf00      	nop
 80060a0:	00f42400 	.word	0x00f42400

080060a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01a      	beq.n	80061ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d10a      	bne.n	80061ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061f8:	f7fc fdfa 	bl	8002df0 <HAL_GetTick>
 80061fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b08      	cmp	r3, #8
 800620a:	d10e      	bne.n	800622a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f82d 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e023      	b.n	8006272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d10e      	bne.n	8006256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f817 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e00d      	b.n	8006272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	e05e      	b.n	800634a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d05a      	beq.n	800634a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006294:	f7fc fdac 	bl	8002df0 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <UART_WaitOnFlagUntilTimeout+0x30>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11b      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e043      	b.n	800636a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d02c      	beq.n	800634a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fe:	d124      	bne.n	800634a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006308:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006318:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2220      	movs	r2, #32
 800632e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e00f      	b.n	800636a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4013      	ands	r3, r2
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	429a      	cmp	r2, r3
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	429a      	cmp	r2, r3
 8006366:	d091      	beq.n	800628c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8006382:	f107 030c 	add.w	r3, r7, #12
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	2101      	movs	r1, #1
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f9a8 	bl	80066e0 <ai_platform_get_activations_map>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d035      	beq.n	8006402 <network_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8006396:	4b1d      	ldr	r3, [pc, #116]	; (800640c <network_configure_activations+0x98>)
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <network_configure_activations+0x98>)
 800639e:	2200      	movs	r2, #0
 80063a0:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 64);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3340      	adds	r3, #64	; 0x40
 80063a6:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <network_configure_activations+0x9c>)
 80063a8:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 64);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3340      	adds	r3, #64	; 0x40
 80063ae:	4a18      	ldr	r2, [pc, #96]	; (8006410 <network_configure_activations+0x9c>)
 80063b0:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a17      	ldr	r2, [pc, #92]	; (8006414 <network_configure_activations+0xa0>)
 80063b6:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a16      	ldr	r2, [pc, #88]	; (8006414 <network_configure_activations+0xa0>)
 80063bc:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 704);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80063c4:	4a14      	ldr	r2, [pc, #80]	; (8006418 <network_configure_activations+0xa4>)
 80063c6:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 704);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80063ce:	4a12      	ldr	r2, [pc, #72]	; (8006418 <network_configure_activations+0xa4>)
 80063d0:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a11      	ldr	r2, [pc, #68]	; (800641c <network_configure_activations+0xa8>)
 80063d6:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <network_configure_activations+0xa8>)
 80063dc:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 256);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063e4:	4a0e      	ldr	r2, [pc, #56]	; (8006420 <network_configure_activations+0xac>)
 80063e6:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 256);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <network_configure_activations+0xac>)
 80063f0:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <network_configure_activations+0xb0>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <network_configure_activations+0xb0>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	60da      	str	r2, [r3, #12]
    
    return true;
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <network_configure_activations+0x90>
  }
  return false;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	2000000c 	.word	0x2000000c
 8006410:	2000001c 	.word	0x2000001c
 8006414:	2000002c 	.word	0x2000002c
 8006418:	2000003c 	.word	0x2000003c
 800641c:	2000004c 	.word	0x2000004c
 8006420:	2000005c 	.word	0x2000005c
 8006424:	2000006c 	.word	0x2000006c

08006428 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8006436:	f107 030c 	add.w	r3, r7, #12
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	2101      	movs	r1, #1
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f91a 	bl	8006678 <ai_platform_get_weights_map>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8084 	beq.w	8006554 <network_configure_weights+0x12c>
    /* Updating weights with array addresses */
    
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800644c:	4b44      	ldr	r3, [pc, #272]	; (8006560 <network_configure_weights+0x138>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006454:	4a42      	ldr	r2, [pc, #264]	; (8006560 <network_configure_weights+0x138>)
 8006456:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a41      	ldr	r2, [pc, #260]	; (8006560 <network_configure_weights+0x138>)
 800645c:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a3f      	ldr	r2, [pc, #252]	; (8006560 <network_configure_weights+0x138>)
 8006462:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006464:	4b3f      	ldr	r3, [pc, #252]	; (8006564 <network_configure_weights+0x13c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800646c:	4a3d      	ldr	r2, [pc, #244]	; (8006564 <network_configure_weights+0x13c>)
 800646e:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 576);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006476:	4a3b      	ldr	r2, [pc, #236]	; (8006564 <network_configure_weights+0x13c>)
 8006478:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 576);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006480:	4a38      	ldr	r2, [pc, #224]	; (8006564 <network_configure_weights+0x13c>)
 8006482:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006484:	4b38      	ldr	r3, [pc, #224]	; (8006568 <network_configure_weights+0x140>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648c:	4a36      	ldr	r2, [pc, #216]	; (8006568 <network_configure_weights+0x140>)
 800648e:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 640);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006496:	4a34      	ldr	r2, [pc, #208]	; (8006568 <network_configure_weights+0x140>)
 8006498:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 640);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064a0:	4a31      	ldr	r2, [pc, #196]	; (8006568 <network_configure_weights+0x140>)
 80064a2:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80064a4:	4b31      	ldr	r3, [pc, #196]	; (800656c <network_configure_weights+0x144>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ac:	4a2f      	ldr	r2, [pc, #188]	; (800656c <network_configure_weights+0x144>)
 80064ae:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 2176);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 80064b6:	4a2d      	ldr	r2, [pc, #180]	; (800656c <network_configure_weights+0x144>)
 80064b8:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2176);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 80064c0:	4a2a      	ldr	r2, [pc, #168]	; (800656c <network_configure_weights+0x144>)
 80064c2:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80064c4:	4b2a      	ldr	r3, [pc, #168]	; (8006570 <network_configure_weights+0x148>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064cc:	4a28      	ldr	r2, [pc, #160]	; (8006570 <network_configure_weights+0x148>)
 80064ce:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 2208);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80064d6:	4a26      	ldr	r2, [pc, #152]	; (8006570 <network_configure_weights+0x148>)
 80064d8:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 2208);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80064e0:	4a23      	ldr	r2, [pc, #140]	; (8006570 <network_configure_weights+0x148>)
 80064e2:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <network_configure_weights+0x14c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <network_configure_weights+0x14c>)
 80064ee:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 47264);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 80064f6:	33a0      	adds	r3, #160	; 0xa0
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <network_configure_weights+0x14c>)
 80064fa:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 47264);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8006502:	33a0      	adds	r3, #160	; 0xa0
 8006504:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <network_configure_weights+0x14c>)
 8006506:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <network_configure_weights+0x150>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006510:	4a19      	ldr	r2, [pc, #100]	; (8006578 <network_configure_weights+0x150>)
 8006512:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 47520);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 800651a:	33a0      	adds	r3, #160	; 0xa0
 800651c:	4a16      	ldr	r2, [pc, #88]	; (8006578 <network_configure_weights+0x150>)
 800651e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 47520);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8006526:	33a0      	adds	r3, #160	; 0xa0
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <network_configure_weights+0x150>)
 800652a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800652c:	4b13      	ldr	r3, [pc, #76]	; (800657c <network_configure_weights+0x154>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006534:	4a11      	ldr	r2, [pc, #68]	; (800657c <network_configure_weights+0x154>)
 8006536:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 48288);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800653e:	33a0      	adds	r3, #160	; 0xa0
 8006540:	4a0e      	ldr	r2, [pc, #56]	; (800657c <network_configure_weights+0x154>)
 8006542:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 48288);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800654a:	33a0      	adds	r3, #160	; 0xa0
 800654c:	4a0b      	ldr	r2, [pc, #44]	; (800657c <network_configure_weights+0x154>)
 800654e:	60d3      	str	r3, [r2, #12]
    return true;
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <network_configure_weights+0x12e>
  }
  return false;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	2000007c 	.word	0x2000007c
 8006564:	2000008c 	.word	0x2000008c
 8006568:	2000009c 	.word	0x2000009c
 800656c:	200000ac 	.word	0x200000ac
 8006570:	200000bc 	.word	0x200000bc
 8006574:	200000cc 	.word	0x200000cc
 8006578:	200000dc 	.word	0x200000dc
 800657c:	200000ec 	.word	0x200000ec

08006580 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8dd 	bl	8006748 <ai_platform_network_get_error>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af02      	add	r7, sp, #8
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80065a2:	2300      	movs	r3, #0
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	2304      	movs	r3, #4
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	2301      	movs	r3, #1
 80065ac:	4a04      	ldr	r2, [pc, #16]	; (80065c0 <ai_network_create+0x28>)
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f943 	bl	800683c <ai_platform_network_create>
 80065b6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000794 	.word	0x20000794

080065c4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa09 	bl	80069e8 <ai_platform_network_init>
 80065d6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <ai_network_init+0x1e>
 80065de:	2300      	movs	r3, #0
 80065e0:	e028      	b.n	8006634 <ai_network_init+0x70>

  ai_bool ok = true;
 80065e2:	2301      	movs	r3, #1
 80065e4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff ff1d 	bl	8006428 <network_configure_weights>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf14      	ite	ne
 80065fa:	2301      	movne	r3, #1
 80065fc:	2300      	moveq	r3, #0
 80065fe:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff feb6 	bl	8006374 <network_configure_activations>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 faf6 	bl	8006c0c <ai_platform_network_post_init>
 8006620:	4603      	mov	r3, r0
 8006622:	461a      	mov	r2, r3
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006632:	7afb      	ldrb	r3, [r7, #11]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fb71 	bl	8006d34 <ai_platform_network_process>
 8006652:	4603      	mov	r3, r0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <ai_network_data_weights_get+0x10>)

}
 8006662:	4618      	mov	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	08017bb0 	.word	0x08017bb0

08006670 <_ai_platform_acquire_crc>:
 8006670:	2001      	movs	r0, #1
 8006672:	4770      	bx	lr

08006674 <_ai_platform_release_crc>:
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop

08006678 <ai_platform_get_weights_map>:
 8006678:	b132      	cbz	r2, 8006688 <ai_platform_get_weights_map+0x10>
 800667a:	6912      	ldr	r2, [r2, #16]
 800667c:	b122      	cbz	r2, 8006688 <ai_platform_get_weights_map+0x10>
 800667e:	b110      	cbz	r0, 8006686 <ai_platform_get_weights_map+0xe>
 8006680:	b921      	cbnz	r1, 800668c <ai_platform_get_weights_map+0x14>
 8006682:	4608      	mov	r0, r1
 8006684:	4770      	bx	lr
 8006686:	4770      	bx	lr
 8006688:	4610      	mov	r0, r2
 800668a:	4770      	bx	lr
 800668c:	b470      	push	{r4, r5, r6}
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <ai_platform_get_weights_map+0x64>)
 8006690:	6815      	ldr	r5, [r2, #0]
 8006692:	429d      	cmp	r5, r3
 8006694:	d007      	beq.n	80066a6 <ai_platform_get_weights_map+0x2e>
 8006696:	6002      	str	r2, [r0, #0]
 8006698:	f1a1 0001 	sub.w	r0, r1, #1
 800669c:	fab0 f080 	clz	r0, r0
 80066a0:	0940      	lsrs	r0, r0, #5
 80066a2:	bc70      	pop	{r4, r5, r6}
 80066a4:	4770      	bx	lr
 80066a6:	6854      	ldr	r4, [r2, #4]
 80066a8:	42ac      	cmp	r4, r5
 80066aa:	f102 0204 	add.w	r2, r2, #4
 80066ae:	d011      	beq.n	80066d4 <ai_platform_get_weights_map+0x5c>
 80066b0:	1f03      	subs	r3, r0, #4
 80066b2:	4616      	mov	r6, r2
 80066b4:	2000      	movs	r0, #0
 80066b6:	e003      	b.n	80066c0 <ai_platform_get_weights_map+0x48>
 80066b8:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80066bc:	42ac      	cmp	r4, r5
 80066be:	d009      	beq.n	80066d4 <ai_platform_get_weights_map+0x5c>
 80066c0:	3001      	adds	r0, #1
 80066c2:	4281      	cmp	r1, r0
 80066c4:	f843 4f04 	str.w	r4, [r3, #4]!
 80066c8:	d1f6      	bne.n	80066b8 <ai_platform_get_weights_map+0x40>
 80066ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80066ce:	4b03      	ldr	r3, [pc, #12]	; (80066dc <ai_platform_get_weights_map+0x64>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <ai_platform_get_weights_map+0x60>
 80066d4:	2000      	movs	r0, #0
 80066d6:	e7e4      	b.n	80066a2 <ai_platform_get_weights_map+0x2a>
 80066d8:	2001      	movs	r0, #1
 80066da:	e7e2      	b.n	80066a2 <ai_platform_get_weights_map+0x2a>
 80066dc:	a1facade 	.word	0xa1facade

080066e0 <ai_platform_get_activations_map>:
 80066e0:	b132      	cbz	r2, 80066f0 <ai_platform_get_activations_map+0x10>
 80066e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80066e4:	b122      	cbz	r2, 80066f0 <ai_platform_get_activations_map+0x10>
 80066e6:	b110      	cbz	r0, 80066ee <ai_platform_get_activations_map+0xe>
 80066e8:	b921      	cbnz	r1, 80066f4 <ai_platform_get_activations_map+0x14>
 80066ea:	4608      	mov	r0, r1
 80066ec:	4770      	bx	lr
 80066ee:	4770      	bx	lr
 80066f0:	4610      	mov	r0, r2
 80066f2:	4770      	bx	lr
 80066f4:	b470      	push	{r4, r5, r6}
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <ai_platform_get_activations_map+0x64>)
 80066f8:	6815      	ldr	r5, [r2, #0]
 80066fa:	429d      	cmp	r5, r3
 80066fc:	d007      	beq.n	800670e <ai_platform_get_activations_map+0x2e>
 80066fe:	6002      	str	r2, [r0, #0]
 8006700:	f1a1 0001 	sub.w	r0, r1, #1
 8006704:	fab0 f080 	clz	r0, r0
 8006708:	0940      	lsrs	r0, r0, #5
 800670a:	bc70      	pop	{r4, r5, r6}
 800670c:	4770      	bx	lr
 800670e:	6854      	ldr	r4, [r2, #4]
 8006710:	42ac      	cmp	r4, r5
 8006712:	f102 0204 	add.w	r2, r2, #4
 8006716:	d011      	beq.n	800673c <ai_platform_get_activations_map+0x5c>
 8006718:	1f03      	subs	r3, r0, #4
 800671a:	4616      	mov	r6, r2
 800671c:	2000      	movs	r0, #0
 800671e:	e003      	b.n	8006728 <ai_platform_get_activations_map+0x48>
 8006720:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006724:	42ac      	cmp	r4, r5
 8006726:	d009      	beq.n	800673c <ai_platform_get_activations_map+0x5c>
 8006728:	3001      	adds	r0, #1
 800672a:	4281      	cmp	r1, r0
 800672c:	f843 4f04 	str.w	r4, [r3, #4]!
 8006730:	d1f6      	bne.n	8006720 <ai_platform_get_activations_map+0x40>
 8006732:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006736:	4b03      	ldr	r3, [pc, #12]	; (8006744 <ai_platform_get_activations_map+0x64>)
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <ai_platform_get_activations_map+0x60>
 800673c:	2000      	movs	r0, #0
 800673e:	e7e4      	b.n	800670a <ai_platform_get_activations_map+0x2a>
 8006740:	2001      	movs	r0, #1
 8006742:	e7e2      	b.n	800670a <ai_platform_get_activations_map+0x2a>
 8006744:	a1facade 	.word	0xa1facade

08006748 <ai_platform_network_get_error>:
 8006748:	b510      	push	{r4, lr}
 800674a:	b120      	cbz	r0, 8006756 <ai_platform_network_get_error+0xe>
 800674c:	4b32      	ldr	r3, [pc, #200]	; (8006818 <ai_platform_network_get_error+0xd0>)
 800674e:	6802      	ldr	r2, [r0, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	4604      	mov	r4, r0
 8006754:	d02e      	beq.n	80067b4 <ai_platform_network_get_error+0x6c>
 8006756:	4a31      	ldr	r2, [pc, #196]	; (800681c <ai_platform_network_get_error+0xd4>)
 8006758:	6813      	ldr	r3, [r2, #0]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	f7ff ff86 	bl	8006670 <_ai_platform_acquire_crc>
 8006764:	4b2e      	ldr	r3, [pc, #184]	; (8006820 <ai_platform_network_get_error+0xd8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d00d      	beq.n	800678e <ai_platform_network_get_error+0x46>
 8006772:	4b2c      	ldr	r3, [pc, #176]	; (8006824 <ai_platform_network_get_error+0xdc>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	2a00      	cmp	r2, #0
 800677c:	d1fc      	bne.n	8006778 <ai_platform_network_get_error+0x30>
 800677e:	4b2a      	ldr	r3, [pc, #168]	; (8006828 <ai_platform_network_get_error+0xe0>)
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <ai_platform_network_get_error+0xe4>)
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <ai_platform_network_get_error+0xe8>)
 8006788:	429a      	cmp	r2, r3
 800678a:	d00d      	beq.n	80067a8 <ai_platform_network_get_error+0x60>
 800678c:	e7fe      	b.n	800678c <ai_platform_network_get_error+0x44>
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <ai_platform_network_get_error+0xec>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	2a00      	cmp	r2, #0
 8006798:	d1fc      	bne.n	8006794 <ai_platform_network_get_error+0x4c>
 800679a:	4b27      	ldr	r3, [pc, #156]	; (8006838 <ai_platform_network_get_error+0xf0>)
 800679c:	4a23      	ldr	r2, [pc, #140]	; (800682c <ai_platform_network_get_error+0xe4>)
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b23      	ldr	r3, [pc, #140]	; (8006830 <ai_platform_network_get_error+0xe8>)
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d104      	bne.n	80067b2 <ai_platform_network_get_error+0x6a>
 80067a8:	f7ff ff64 	bl	8006674 <_ai_platform_release_crc>
 80067ac:	f241 0010 	movw	r0, #4112	; 0x1010
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	e7fe      	b.n	80067b2 <ai_platform_network_get_error+0x6a>
 80067b4:	4a19      	ldr	r2, [pc, #100]	; (800681c <ai_platform_network_get_error+0xd4>)
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	f7ff ff57 	bl	8006670 <_ai_platform_acquire_crc>
 80067c2:	4b17      	ldr	r3, [pc, #92]	; (8006820 <ai_platform_network_get_error+0xd8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d00d      	beq.n	80067ec <ai_platform_network_get_error+0xa4>
 80067d0:	4b14      	ldr	r3, [pc, #80]	; (8006824 <ai_platform_network_get_error+0xdc>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d1fc      	bne.n	80067d6 <ai_platform_network_get_error+0x8e>
 80067dc:	4b12      	ldr	r3, [pc, #72]	; (8006828 <ai_platform_network_get_error+0xe0>)
 80067de:	4a13      	ldr	r2, [pc, #76]	; (800682c <ai_platform_network_get_error+0xe4>)
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b12      	ldr	r3, [pc, #72]	; (8006830 <ai_platform_network_get_error+0xe8>)
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d00e      	beq.n	8006808 <ai_platform_network_get_error+0xc0>
 80067ea:	e7fe      	b.n	80067ea <ai_platform_network_get_error+0xa2>
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <ai_platform_network_get_error+0xec>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1fc      	bne.n	80067f2 <ai_platform_network_get_error+0xaa>
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <ai_platform_network_get_error+0xf0>)
 80067fa:	4a0c      	ldr	r2, [pc, #48]	; (800682c <ai_platform_network_get_error+0xe4>)
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <ai_platform_network_get_error+0xe8>)
 8006802:	429a      	cmp	r2, r3
 8006804:	d000      	beq.n	8006808 <ai_platform_network_get_error+0xc0>
 8006806:	e7fe      	b.n	8006806 <ai_platform_network_get_error+0xbe>
 8006808:	f7ff ff34 	bl	8006674 <_ai_platform_release_crc>
 800680c:	f104 0010 	add.w	r0, r4, #16
 8006810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006814:	f000 bd0e 	b.w	8007234 <core_get_error>
 8006818:	a1c00100 	.word	0xa1c00100
 800681c:	e0002000 	.word	0xe0002000
 8006820:	e0042000 	.word	0xe0042000
 8006824:	58024c08 	.word	0x58024c08
 8006828:	58024c00 	.word	0x58024c00
 800682c:	f407a5c2 	.word	0xf407a5c2
 8006830:	b5e8b5cd 	.word	0xb5e8b5cd
 8006834:	40023008 	.word	0x40023008
 8006838:	40023000 	.word	0x40023000

0800683c <ai_platform_network_create>:
 800683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	4607      	mov	r7, r0
 8006844:	4616      	mov	r6, r2
 8006846:	461d      	mov	r5, r3
 8006848:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800684c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8006850:	f7ff ff0e 	bl	8006670 <_ai_platform_acquire_crc>
 8006854:	b178      	cbz	r0, 8006876 <ai_platform_network_create+0x3a>
 8006856:	4b5a      	ldr	r3, [pc, #360]	; (80069c0 <ai_platform_network_create+0x184>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006862:	4602      	mov	r2, r0
 8006864:	d00c      	beq.n	8006880 <ai_platform_network_create+0x44>
 8006866:	4b57      	ldr	r3, [pc, #348]	; (80069c4 <ai_platform_network_create+0x188>)
 8006868:	2118      	movs	r1, #24
 800686a:	6019      	str	r1, [r3, #0]
 800686c:	6819      	ldr	r1, [r3, #0]
 800686e:	2918      	cmp	r1, #24
 8006870:	d034      	beq.n	80068dc <ai_platform_network_create+0xa0>
 8006872:	f7ff feff 	bl	8006674 <_ai_platform_release_crc>
 8006876:	f241 0033 	movw	r0, #4147	; 0x1033
 800687a:	b002      	add	sp, #8
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006880:	4b51      	ldr	r3, [pc, #324]	; (80069c8 <ai_platform_network_create+0x18c>)
 8006882:	2101      	movs	r1, #1
 8006884:	6019      	str	r1, [r3, #0]
 8006886:	2114      	movs	r1, #20
 8006888:	e001      	b.n	800688e <ai_platform_network_create+0x52>
 800688a:	3901      	subs	r1, #1
 800688c:	d002      	beq.n	8006894 <ai_platform_network_create+0x58>
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	2800      	cmp	r0, #0
 8006892:	d1fa      	bne.n	800688a <ai_platform_network_create+0x4e>
 8006894:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <ai_platform_network_create+0x18c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b9f3      	cbnz	r3, 80068d8 <ai_platform_network_create+0x9c>
 800689a:	4610      	mov	r0, r2
 800689c:	f7ff feea 	bl	8006674 <_ai_platform_release_crc>
 80068a0:	4a4a      	ldr	r2, [pc, #296]	; (80069cc <ai_platform_network_create+0x190>)
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	f7ff fee1 	bl	8006670 <_ai_platform_acquire_crc>
 80068ae:	4b44      	ldr	r3, [pc, #272]	; (80069c0 <ai_platform_network_create+0x184>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ba:	d015      	beq.n	80068e8 <ai_platform_network_create+0xac>
 80068bc:	4b41      	ldr	r3, [pc, #260]	; (80069c4 <ai_platform_network_create+0x188>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	d1fc      	bne.n	80068c2 <ai_platform_network_create+0x86>
 80068c8:	4b41      	ldr	r3, [pc, #260]	; (80069d0 <ai_platform_network_create+0x194>)
 80068ca:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <ai_platform_network_create+0x198>)
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <ai_platform_network_create+0x19c>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d016      	beq.n	8006904 <ai_platform_network_create+0xc8>
 80068d6:	e7fe      	b.n	80068d6 <ai_platform_network_create+0x9a>
 80068d8:	4610      	mov	r0, r2
 80068da:	e7ca      	b.n	8006872 <ai_platform_network_create+0x36>
 80068dc:	2101      	movs	r1, #1
 80068de:	6019      	str	r1, [r3, #0]
 80068e0:	6819      	ldr	r1, [r3, #0]
 80068e2:	2900      	cmp	r1, #0
 80068e4:	d1fc      	bne.n	80068e0 <ai_platform_network_create+0xa4>
 80068e6:	e7d8      	b.n	800689a <ai_platform_network_create+0x5e>
 80068e8:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <ai_platform_network_create+0x18c>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	d1fc      	bne.n	80068ee <ai_platform_network_create+0xb2>
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <ai_platform_network_create+0x1a0>)
 80068f6:	4a37      	ldr	r2, [pc, #220]	; (80069d4 <ai_platform_network_create+0x198>)
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4b36      	ldr	r3, [pc, #216]	; (80069d8 <ai_platform_network_create+0x19c>)
 80068fe:	429a      	cmp	r2, r3
 8006900:	d000      	beq.n	8006904 <ai_platform_network_create+0xc8>
 8006902:	e7fe      	b.n	8006902 <ai_platform_network_create+0xc6>
 8006904:	f7ff feb6 	bl	8006674 <_ai_platform_release_crc>
 8006908:	b1af      	cbz	r7, 8006936 <ai_platform_network_create+0xfa>
 800690a:	4b35      	ldr	r3, [pc, #212]	; (80069e0 <ai_platform_network_create+0x1a4>)
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	603e      	str	r6, [r7, #0]
 8006910:	f000 fc8e 	bl	8007230 <core_init>
 8006914:	b990      	cbnz	r0, 800693c <ai_platform_network_create+0x100>
 8006916:	062d      	lsls	r5, r5, #24
 8006918:	0424      	lsls	r4, r4, #16
 800691a:	2230      	movs	r2, #48	; 0x30
 800691c:	2300      	movs	r3, #0
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	2110      	movs	r1, #16
 8006922:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8006926:	2000      	movs	r0, #0
 8006928:	432b      	orrs	r3, r5
 800692a:	f362 0007 	bfi	r0, r2, #0, #8
 800692e:	6473      	str	r3, [r6, #68]	; 0x44
 8006930:	f361 201f 	bfi	r0, r1, #8, #24
 8006934:	e7a1      	b.n	800687a <ai_platform_network_create+0x3e>
 8006936:	f241 0010 	movw	r0, #4112	; 0x1010
 800693a:	e79e      	b.n	800687a <ai_platform_network_create+0x3e>
 800693c:	4a23      	ldr	r2, [pc, #140]	; (80069cc <ai_platform_network_create+0x190>)
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	f7ff fe93 	bl	8006670 <_ai_platform_acquire_crc>
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <ai_platform_network_create+0x184>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006956:	d00d      	beq.n	8006974 <ai_platform_network_create+0x138>
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <ai_platform_network_create+0x188>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	2a00      	cmp	r2, #0
 8006962:	d1fc      	bne.n	800695e <ai_platform_network_create+0x122>
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <ai_platform_network_create+0x194>)
 8006966:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <ai_platform_network_create+0x198>)
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <ai_platform_network_create+0x19c>)
 800696e:	429a      	cmp	r2, r3
 8006970:	d00e      	beq.n	8006990 <ai_platform_network_create+0x154>
 8006972:	e7fe      	b.n	8006972 <ai_platform_network_create+0x136>
 8006974:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <ai_platform_network_create+0x18c>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2a00      	cmp	r2, #0
 800697e:	d1fc      	bne.n	800697a <ai_platform_network_create+0x13e>
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <ai_platform_network_create+0x1a0>)
 8006982:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <ai_platform_network_create+0x198>)
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <ai_platform_network_create+0x19c>)
 800698a:	429a      	cmp	r2, r3
 800698c:	d000      	beq.n	8006990 <ai_platform_network_create+0x154>
 800698e:	e7fe      	b.n	800698e <ai_platform_network_create+0x152>
 8006990:	062d      	lsls	r5, r5, #24
 8006992:	0424      	lsls	r4, r4, #16
 8006994:	f7ff fe6e 	bl	8006674 <_ai_platform_release_crc>
 8006998:	ea45 0304 	orr.w	r3, r5, r4
 800699c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80069a0:	d001      	beq.n	80069a6 <ai_platform_network_create+0x16a>
 80069a2:	2201      	movs	r2, #1
 80069a4:	e7ba      	b.n	800691c <ai_platform_network_create+0xe0>
 80069a6:	a802      	add	r0, sp, #8
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <ai_platform_network_create+0x1a8>)
 80069aa:	f840 3d04 	str.w	r3, [r0, #-4]!
 80069ae:	f002 fa25 	bl	8008dfc <ai_check_custom_types>
 80069b2:	b110      	cbz	r0, 80069ba <ai_platform_network_create+0x17e>
 80069b4:	2100      	movs	r1, #0
 80069b6:	460a      	mov	r2, r1
 80069b8:	e7b3      	b.n	8006922 <ai_platform_network_create+0xe6>
 80069ba:	2202      	movs	r2, #2
 80069bc:	e7ae      	b.n	800691c <ai_platform_network_create+0xe0>
 80069be:	bf00      	nop
 80069c0:	e0042000 	.word	0xe0042000
 80069c4:	58024c08 	.word	0x58024c08
 80069c8:	40023008 	.word	0x40023008
 80069cc:	e0002000 	.word	0xe0002000
 80069d0:	58024c00 	.word	0x58024c00
 80069d4:	f407a5c2 	.word	0xf407a5c2
 80069d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80069dc:	40023000 	.word	0x40023000
 80069e0:	a1c00100 	.word	0xa1c00100
 80069e4:	84048403 	.word	0x84048403

080069e8 <ai_platform_network_init>:
 80069e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d04d      	beq.n	8006a8c <ai_platform_network_init+0xa4>
 80069f0:	4b7c      	ldr	r3, [pc, #496]	; (8006be4 <ai_platform_network_init+0x1fc>)
 80069f2:	6802      	ldr	r2, [r0, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	4604      	mov	r4, r0
 80069f8:	d148      	bne.n	8006a8c <ai_platform_network_init+0xa4>
 80069fa:	4a7b      	ldr	r2, [pc, #492]	; (8006be8 <ai_platform_network_init+0x200>)
 80069fc:	6813      	ldr	r3, [r2, #0]
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	460d      	mov	r5, r1
 8006a06:	f7ff fe33 	bl	8006670 <_ai_platform_acquire_crc>
 8006a0a:	4b78      	ldr	r3, [pc, #480]	; (8006bec <ai_platform_network_init+0x204>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a16:	d00d      	beq.n	8006a34 <ai_platform_network_init+0x4c>
 8006a18:	4b75      	ldr	r3, [pc, #468]	; (8006bf0 <ai_platform_network_init+0x208>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d1fc      	bne.n	8006a1e <ai_platform_network_init+0x36>
 8006a24:	4b73      	ldr	r3, [pc, #460]	; (8006bf4 <ai_platform_network_init+0x20c>)
 8006a26:	4a74      	ldr	r2, [pc, #464]	; (8006bf8 <ai_platform_network_init+0x210>)
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4b73      	ldr	r3, [pc, #460]	; (8006bfc <ai_platform_network_init+0x214>)
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d00d      	beq.n	8006a4e <ai_platform_network_init+0x66>
 8006a32:	e7fe      	b.n	8006a32 <ai_platform_network_init+0x4a>
 8006a34:	4b72      	ldr	r3, [pc, #456]	; (8006c00 <ai_platform_network_init+0x218>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	d1fc      	bne.n	8006a3a <ai_platform_network_init+0x52>
 8006a40:	4b70      	ldr	r3, [pc, #448]	; (8006c04 <ai_platform_network_init+0x21c>)
 8006a42:	4a6d      	ldr	r2, [pc, #436]	; (8006bf8 <ai_platform_network_init+0x210>)
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b6c      	ldr	r3, [pc, #432]	; (8006bfc <ai_platform_network_init+0x214>)
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d11d      	bne.n	8006a8a <ai_platform_network_init+0xa2>
 8006a4e:	f7ff fe11 	bl	8006674 <_ai_platform_release_crc>
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	d076      	beq.n	8006b44 <ai_platform_network_init+0x15c>
 8006a56:	4b6c      	ldr	r3, [pc, #432]	; (8006c08 <ai_platform_network_init+0x220>)
 8006a58:	682a      	ldr	r2, [r5, #0]
 8006a5a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d030      	beq.n	8006ac4 <ai_platform_network_init+0xdc>
 8006a62:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006a64:	46a9      	mov	r9, r5
 8006a66:	f105 0118 	add.w	r1, r5, #24
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	f000 8095 	beq.w	8006b9a <ai_platform_network_init+0x1b2>
 8006a70:	f1bc 0f00 	cmp.w	ip, #0
 8006a74:	f000 80a4 	beq.w	8006bc0 <ai_platform_network_init+0x1d8>
 8006a78:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8006a7c:	f1b8 0f01 	cmp.w	r8, #1
 8006a80:	d16a      	bne.n	8006b58 <ai_platform_network_init+0x170>
 8006a82:	2700      	movs	r7, #0
 8006a84:	468c      	mov	ip, r1
 8006a86:	83a7      	strh	r7, [r4, #28]
 8006a88:	e028      	b.n	8006adc <ai_platform_network_init+0xf4>
 8006a8a:	e7fe      	b.n	8006a8a <ai_platform_network_init+0xa2>
 8006a8c:	4a56      	ldr	r2, [pc, #344]	; (8006be8 <ai_platform_network_init+0x200>)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	f7ff fdeb 	bl	8006670 <_ai_platform_acquire_crc>
 8006a9a:	4b54      	ldr	r3, [pc, #336]	; (8006bec <ai_platform_network_init+0x204>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa6:	d067      	beq.n	8006b78 <ai_platform_network_init+0x190>
 8006aa8:	4b51      	ldr	r3, [pc, #324]	; (8006bf0 <ai_platform_network_init+0x208>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	d1fc      	bne.n	8006aae <ai_platform_network_init+0xc6>
 8006ab4:	4b4f      	ldr	r3, [pc, #316]	; (8006bf4 <ai_platform_network_init+0x20c>)
 8006ab6:	4a50      	ldr	r2, [pc, #320]	; (8006bf8 <ai_platform_network_init+0x210>)
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4b4f      	ldr	r3, [pc, #316]	; (8006bfc <ai_platform_network_init+0x214>)
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d067      	beq.n	8006b92 <ai_platform_network_init+0x1aa>
 8006ac2:	e7fe      	b.n	8006ac2 <ai_platform_network_init+0xda>
 8006ac4:	8be1      	ldrh	r1, [r4, #30]
 8006ac6:	88eb      	ldrh	r3, [r5, #6]
 8006ac8:	89af      	ldrh	r7, [r5, #12]
 8006aca:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8006ace:	88aa      	ldrh	r2, [r5, #4]
 8006ad0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	d13f      	bne.n	8006b58 <ai_platform_network_init+0x170>
 8006ad8:	83a2      	strh	r2, [r4, #28]
 8006ada:	b19b      	cbz	r3, 8006b04 <ai_platform_network_init+0x11c>
 8006adc:	f04f 0e00 	mov.w	lr, #0
 8006ae0:	46f2      	mov	sl, lr
 8006ae2:	eb09 060e 	add.w	r6, r9, lr
 8006ae6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006ae8:	6a25      	ldr	r5, [r4, #32]
 8006aea:	4475      	add	r5, lr
 8006aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aee:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006af6:	8be3      	ldrh	r3, [r4, #30]
 8006af8:	f10a 0a01 	add.w	sl, sl, #1
 8006afc:	459a      	cmp	sl, r3
 8006afe:	f10e 0e18 	add.w	lr, lr, #24
 8006b02:	d3ee      	bcc.n	8006ae2 <ai_platform_network_init+0xfa>
 8006b04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006b06:	4598      	cmp	r8, r3
 8006b08:	d12e      	bne.n	8006b68 <ai_platform_network_init+0x180>
 8006b0a:	84a7      	strh	r7, [r4, #36]	; 0x24
 8006b0c:	f1b8 0f00 	cmp.w	r8, #0
 8006b10:	d012      	beq.n	8006b38 <ai_platform_network_init+0x150>
 8006b12:	2700      	movs	r7, #0
 8006b14:	46be      	mov	lr, r7
 8006b16:	eb0c 0607 	add.w	r6, ip, r7
 8006b1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006b1c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006b1e:	443d      	add	r5, r7
 8006b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b22:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006b26:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006b2c:	f10e 0e01 	add.w	lr, lr, #1
 8006b30:	459e      	cmp	lr, r3
 8006b32:	f107 0718 	add.w	r7, r7, #24
 8006b36:	d3ee      	bcc.n	8006b16 <ai_platform_network_init+0x12e>
 8006b38:	2303      	movs	r3, #3
 8006b3a:	60e3      	str	r3, [r4, #12]
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f002 f987 	bl	8008e50 <ai_layers_init_all>
 8006b42:	e006      	b.n	8006b52 <ai_platform_network_init+0x16a>
 8006b44:	f104 0010 	add.w	r0, r4, #16
 8006b48:	2211      	movs	r2, #17
 8006b4a:	2110      	movs	r1, #16
 8006b4c:	462c      	mov	r4, r5
 8006b4e:	f000 fb77 	bl	8007240 <core_set_error>
 8006b52:	4620      	mov	r0, r4
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	f104 0010 	add.w	r0, r4, #16
 8006b5c:	2212      	movs	r2, #18
 8006b5e:	2116      	movs	r1, #22
 8006b60:	f000 fb6e 	bl	8007240 <core_set_error>
 8006b64:	2400      	movs	r4, #0
 8006b66:	e7f4      	b.n	8006b52 <ai_platform_network_init+0x16a>
 8006b68:	f104 0010 	add.w	r0, r4, #16
 8006b6c:	2213      	movs	r2, #19
 8006b6e:	2116      	movs	r1, #22
 8006b70:	f000 fb66 	bl	8007240 <core_set_error>
 8006b74:	2400      	movs	r4, #0
 8006b76:	e7ec      	b.n	8006b52 <ai_platform_network_init+0x16a>
 8006b78:	4b21      	ldr	r3, [pc, #132]	; (8006c00 <ai_platform_network_init+0x218>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	d1fc      	bne.n	8006b7e <ai_platform_network_init+0x196>
 8006b84:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <ai_platform_network_init+0x21c>)
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <ai_platform_network_init+0x210>)
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <ai_platform_network_init+0x214>)
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d115      	bne.n	8006bbe <ai_platform_network_init+0x1d6>
 8006b92:	f7ff fd6f 	bl	8006674 <_ai_platform_release_crc>
 8006b96:	2400      	movs	r4, #0
 8006b98:	e7db      	b.n	8006b52 <ai_platform_network_init+0x16a>
 8006b9a:	8c28      	ldrh	r0, [r5, #32]
 8006b9c:	8bea      	ldrh	r2, [r5, #30]
 8006b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ba0:	fb02 f200 	mul.w	r2, r2, r0
 8006ba4:	fb03 f302 	mul.w	r3, r3, r2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f43f af61 	beq.w	8006a70 <ai_platform_network_init+0x88>
 8006bae:	f104 0010 	add.w	r0, r4, #16
 8006bb2:	2213      	movs	r2, #19
 8006bb4:	2110      	movs	r1, #16
 8006bb6:	4634      	mov	r4, r6
 8006bb8:	f000 fb42 	bl	8007240 <core_set_error>
 8006bbc:	e7c9      	b.n	8006b52 <ai_platform_network_init+0x16a>
 8006bbe:	e7fe      	b.n	8006bbe <ai_platform_network_init+0x1d6>
 8006bc0:	8928      	ldrh	r0, [r5, #8]
 8006bc2:	88ea      	ldrh	r2, [r5, #6]
 8006bc4:	68eb      	ldr	r3, [r5, #12]
 8006bc6:	fb02 f200 	mul.w	r2, r2, r0
 8006bca:	fb03 f302 	mul.w	r3, r3, r2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f43f af52 	beq.w	8006a78 <ai_platform_network_init+0x90>
 8006bd4:	f104 0010 	add.w	r0, r4, #16
 8006bd8:	2212      	movs	r2, #18
 8006bda:	2110      	movs	r1, #16
 8006bdc:	4664      	mov	r4, ip
 8006bde:	f000 fb2f 	bl	8007240 <core_set_error>
 8006be2:	e7b6      	b.n	8006b52 <ai_platform_network_init+0x16a>
 8006be4:	a1c00100 	.word	0xa1c00100
 8006be8:	e0002000 	.word	0xe0002000
 8006bec:	e0042000 	.word	0xe0042000
 8006bf0:	58024c08 	.word	0x58024c08
 8006bf4:	58024c00 	.word	0x58024c00
 8006bf8:	f407a5c2 	.word	0xf407a5c2
 8006bfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c00:	40023008 	.word	0x40023008
 8006c04:	40023000 	.word	0x40023000
 8006c08:	a1facade 	.word	0xa1facade

08006c0c <ai_platform_network_post_init>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	b120      	cbz	r0, 8006c1a <ai_platform_network_post_init+0xe>
 8006c10:	4b3f      	ldr	r3, [pc, #252]	; (8006d10 <ai_platform_network_post_init+0x104>)
 8006c12:	6802      	ldr	r2, [r0, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	4604      	mov	r4, r0
 8006c18:	d02d      	beq.n	8006c76 <ai_platform_network_post_init+0x6a>
 8006c1a:	4a3e      	ldr	r2, [pc, #248]	; (8006d14 <ai_platform_network_post_init+0x108>)
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	f7ff fd24 	bl	8006670 <_ai_platform_acquire_crc>
 8006c28:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <ai_platform_network_post_init+0x10c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c34:	d00d      	beq.n	8006c52 <ai_platform_network_post_init+0x46>
 8006c36:	4b39      	ldr	r3, [pc, #228]	; (8006d1c <ai_platform_network_post_init+0x110>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	d1fc      	bne.n	8006c3c <ai_platform_network_post_init+0x30>
 8006c42:	4b37      	ldr	r3, [pc, #220]	; (8006d20 <ai_platform_network_post_init+0x114>)
 8006c44:	4a37      	ldr	r2, [pc, #220]	; (8006d24 <ai_platform_network_post_init+0x118>)
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <ai_platform_network_post_init+0x11c>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d00d      	beq.n	8006c6c <ai_platform_network_post_init+0x60>
 8006c50:	e7fe      	b.n	8006c50 <ai_platform_network_post_init+0x44>
 8006c52:	4b36      	ldr	r3, [pc, #216]	; (8006d2c <ai_platform_network_post_init+0x120>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	d1fc      	bne.n	8006c58 <ai_platform_network_post_init+0x4c>
 8006c5e:	4b34      	ldr	r3, [pc, #208]	; (8006d30 <ai_platform_network_post_init+0x124>)
 8006c60:	4a30      	ldr	r2, [pc, #192]	; (8006d24 <ai_platform_network_post_init+0x118>)
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b30      	ldr	r3, [pc, #192]	; (8006d28 <ai_platform_network_post_init+0x11c>)
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d103      	bne.n	8006c74 <ai_platform_network_post_init+0x68>
 8006c6c:	f7ff fd02 	bl	8006674 <_ai_platform_release_crc>
 8006c70:	2000      	movs	r0, #0
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	e7fe      	b.n	8006c74 <ai_platform_network_post_init+0x68>
 8006c76:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <ai_platform_network_post_init+0x108>)
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	f7ff fcf6 	bl	8006670 <_ai_platform_acquire_crc>
 8006c84:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <ai_platform_network_post_init+0x10c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c90:	d00d      	beq.n	8006cae <ai_platform_network_post_init+0xa2>
 8006c92:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <ai_platform_network_post_init+0x110>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	d1fc      	bne.n	8006c98 <ai_platform_network_post_init+0x8c>
 8006c9e:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <ai_platform_network_post_init+0x114>)
 8006ca0:	4a20      	ldr	r2, [pc, #128]	; (8006d24 <ai_platform_network_post_init+0x118>)
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <ai_platform_network_post_init+0x11c>)
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d00e      	beq.n	8006cca <ai_platform_network_post_init+0xbe>
 8006cac:	e7fe      	b.n	8006cac <ai_platform_network_post_init+0xa0>
 8006cae:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <ai_platform_network_post_init+0x120>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	d1fc      	bne.n	8006cb4 <ai_platform_network_post_init+0xa8>
 8006cba:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <ai_platform_network_post_init+0x124>)
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <ai_platform_network_post_init+0x118>)
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <ai_platform_network_post_init+0x11c>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d000      	beq.n	8006cca <ai_platform_network_post_init+0xbe>
 8006cc8:	e7fe      	b.n	8006cc8 <ai_platform_network_post_init+0xbc>
 8006cca:	f7ff fcd3 	bl	8006674 <_ai_platform_release_crc>
 8006cce:	68e3      	ldr	r3, [r4, #12]
 8006cd0:	f013 0502 	ands.w	r5, r3, #2
 8006cd4:	d011      	beq.n	8006cfa <ai_platform_network_post_init+0xee>
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f002 f8ce 	bl	8008e78 <ai_layers_post_init_all>
 8006cdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cde:	b1a3      	cbz	r3, 8006d0a <ai_platform_network_post_init+0xfe>
 8006ce0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006ce2:	b195      	cbz	r5, 8006d0a <ai_platform_network_post_init+0xfe>
 8006ce4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	2000      	movs	r0, #0
 8006cea:	4798      	blx	r3
 8006cec:	692b      	ldr	r3, [r5, #16]
 8006cee:	42ab      	cmp	r3, r5
 8006cf0:	d00b      	beq.n	8006d0a <ai_platform_network_post_init+0xfe>
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	b14b      	cbz	r3, 8006d0a <ai_platform_network_post_init+0xfe>
 8006cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cf8:	e7f4      	b.n	8006ce4 <ai_platform_network_post_init+0xd8>
 8006cfa:	f104 0010 	add.w	r0, r4, #16
 8006cfe:	2210      	movs	r2, #16
 8006d00:	2111      	movs	r1, #17
 8006d02:	f000 fa9d 	bl	8007240 <core_set_error>
 8006d06:	4628      	mov	r0, r5
 8006d08:	bd38      	pop	{r3, r4, r5, pc}
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	a1c00100 	.word	0xa1c00100
 8006d14:	e0002000 	.word	0xe0002000
 8006d18:	e0042000 	.word	0xe0042000
 8006d1c:	58024c08 	.word	0x58024c08
 8006d20:	58024c00 	.word	0x58024c00
 8006d24:	f407a5c2 	.word	0xf407a5c2
 8006d28:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d2c:	40023008 	.word	0x40023008
 8006d30:	40023000 	.word	0x40023000

08006d34 <ai_platform_network_process>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	9202      	str	r2, [sp, #8]
 8006d3e:	4604      	mov	r4, r0
 8006d40:	b120      	cbz	r0, 8006d4c <ai_platform_network_process+0x18>
 8006d42:	4b7b      	ldr	r3, [pc, #492]	; (8006f30 <ai_platform_network_process+0x1fc>)
 8006d44:	6802      	ldr	r2, [r0, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	bf18      	it	ne
 8006d4a:	2400      	movne	r4, #0
 8006d4c:	4a79      	ldr	r2, [pc, #484]	; (8006f34 <ai_platform_network_process+0x200>)
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	f023 0301 	bic.w	r3, r3, #1
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	f7ff fc8b 	bl	8006670 <_ai_platform_acquire_crc>
 8006d5a:	4b77      	ldr	r3, [pc, #476]	; (8006f38 <ai_platform_network_process+0x204>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d66:	d00d      	beq.n	8006d84 <ai_platform_network_process+0x50>
 8006d68:	4b74      	ldr	r3, [pc, #464]	; (8006f3c <ai_platform_network_process+0x208>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d1fc      	bne.n	8006d6e <ai_platform_network_process+0x3a>
 8006d74:	4b72      	ldr	r3, [pc, #456]	; (8006f40 <ai_platform_network_process+0x20c>)
 8006d76:	4a73      	ldr	r2, [pc, #460]	; (8006f44 <ai_platform_network_process+0x210>)
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	4b72      	ldr	r3, [pc, #456]	; (8006f48 <ai_platform_network_process+0x214>)
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d00e      	beq.n	8006da0 <ai_platform_network_process+0x6c>
 8006d82:	e7fe      	b.n	8006d82 <ai_platform_network_process+0x4e>
 8006d84:	4b71      	ldr	r3, [pc, #452]	; (8006f4c <ai_platform_network_process+0x218>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	d1fc      	bne.n	8006d8a <ai_platform_network_process+0x56>
 8006d90:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <ai_platform_network_process+0x21c>)
 8006d92:	4a6c      	ldr	r2, [pc, #432]	; (8006f44 <ai_platform_network_process+0x210>)
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b6b      	ldr	r3, [pc, #428]	; (8006f48 <ai_platform_network_process+0x214>)
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d000      	beq.n	8006da0 <ai_platform_network_process+0x6c>
 8006d9e:	e7fe      	b.n	8006d9e <ai_platform_network_process+0x6a>
 8006da0:	f7ff fc68 	bl	8006674 <_ai_platform_release_crc>
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	f000 808e 	beq.w	8006ec6 <ai_platform_network_process+0x192>
 8006daa:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f040 823c 	bne.w	800722a <ai_platform_network_process+0x4f6>
 8006db2:	68e3      	ldr	r3, [r4, #12]
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	f04f 0b00 	mov.w	fp, #0
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	f8c4 b014 	str.w	fp, [r4, #20]
 8006dc2:	f040 822b 	bne.w	800721c <ai_platform_network_process+0x4e8>
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	f000 80a8 	beq.w	8006f1c <ai_platform_network_process+0x1e8>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	f000 80a5 	beq.w	8006f1c <ai_platform_network_process+0x1e8>
 8006dd2:	883b      	ldrh	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80a1 	beq.w	8006f1c <ai_platform_network_process+0x1e8>
 8006dda:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8006dde:	9401      	str	r4, [sp, #4]
 8006de0:	46d8      	mov	r8, fp
 8006de2:	4598      	cmp	r8, r3
 8006de4:	f080 80b6 	bcs.w	8006f54 <ai_platform_network_process+0x220>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80b2 	beq.w	8006f54 <ai_platform_network_process+0x220>
 8006df0:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	f000 80ad 	beq.w	8006f54 <ai_platform_network_process+0x220>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	9303      	str	r3, [sp, #12]
 8006e00:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006e04:	eb13 0a04 	adds.w	sl, r3, r4
 8006e08:	f000 8087 	beq.w	8006f1a <ai_platform_network_process+0x1e6>
 8006e0c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006e10:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006e14:	69b0      	ldr	r0, [r6, #24]
 8006e16:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006e1a:	6841      	ldr	r1, [r0, #4]
 8006e1c:	fb0b f30e 	mul.w	r3, fp, lr
 8006e20:	fb0c f303 	mul.w	r3, ip, r3
 8006e24:	4299      	cmp	r1, r3
 8006e26:	d36e      	bcc.n	8006f06 <ai_platform_network_process+0x1d2>
 8006e28:	68f3      	ldr	r3, [r6, #12]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	455a      	cmp	r2, fp
 8006e2e:	d16a      	bne.n	8006f06 <ai_platform_network_process+0x1d2>
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	4572      	cmp	r2, lr
 8006e34:	d167      	bne.n	8006f06 <ai_platform_network_process+0x1d2>
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	459c      	cmp	ip, r3
 8006e3a:	d164      	bne.n	8006f06 <ai_platform_network_process+0x1d2>
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f002 f8d9 	bl	8008ff4 <ai_array_get_byte_size>
 8006e42:	68f2      	ldr	r2, [r6, #12]
 8006e44:	6973      	ldr	r3, [r6, #20]
 8006e46:	68d2      	ldr	r2, [r2, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	fb03 f302 	mul.w	r3, r3, r2
 8006e4e:	4298      	cmp	r0, r3
 8006e50:	d359      	bcc.n	8006f06 <ai_platform_network_process+0x1d2>
 8006e52:	69b3      	ldr	r3, [r6, #24]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	f002 f875 	bl	8008f44 <ai_array_to_buffer_fmt>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	4043      	eors	r3, r0
 8006e5e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006e62:	d146      	bne.n	8006ef2 <ai_platform_network_process+0x1be>
 8006e64:	692b      	ldr	r3, [r5, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d03a      	beq.n	8006ee0 <ai_platform_network_process+0x1ac>
 8006e6a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006e6e:	f1bb 0f00 	cmp.w	fp, #0
 8006e72:	d02d      	beq.n	8006ed0 <ai_platform_network_process+0x19c>
 8006e74:	68f2      	ldr	r2, [r6, #12]
 8006e76:	6973      	ldr	r3, [r6, #20]
 8006e78:	68d1      	ldr	r1, [r2, #12]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	fb02 f201 	mul.w	r2, r2, r1
 8006e80:	f8ca 2008 	str.w	r2, [sl, #8]
 8006e84:	88ab      	ldrh	r3, [r5, #4]
 8006e86:	fb02 f203 	mul.w	r2, r2, r3
 8006e8a:	f8ca 200c 	str.w	r2, [sl, #12]
 8006e8e:	6929      	ldr	r1, [r5, #16]
 8006e90:	f8ca 1004 	str.w	r1, [sl, #4]
 8006e94:	692b      	ldr	r3, [r5, #16]
 8006e96:	4413      	add	r3, r2
 8006e98:	9a03      	ldr	r2, [sp, #12]
 8006e9a:	5113      	str	r3, [r2, r4]
 8006e9c:	69b0      	ldr	r0, [r6, #24]
 8006e9e:	6803      	ldr	r3, [r0, #0]
 8006ea0:	45d9      	cmp	r9, fp
 8006ea2:	bf38      	it	cc
 8006ea4:	46d9      	movcc	r9, fp
 8006ea6:	009a      	lsls	r2, r3, #2
 8006ea8:	d408      	bmi.n	8006ebc <ai_platform_network_process+0x188>
 8006eaa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	4419      	add	r1, r3
 8006eb2:	6081      	str	r1, [r0, #8]
 8006eb4:	69b3      	ldr	r3, [r6, #24]
 8006eb6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006eba:	60da      	str	r2, [r3, #12]
 8006ebc:	883b      	ldrh	r3, [r7, #0]
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	3518      	adds	r5, #24
 8006ec4:	e78d      	b.n	8006de2 <ai_platform_network_process+0xae>
 8006ec6:	46a3      	mov	fp, r4
 8006ec8:	4658      	mov	r0, fp
 8006eca:	b005      	add	sp, #20
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	9c01      	ldr	r4, [sp, #4]
 8006ed2:	2221      	movs	r2, #33	; 0x21
 8006ed4:	f104 0010 	add.w	r0, r4, #16
 8006ed8:	2112      	movs	r1, #18
 8006eda:	f000 f9b1 	bl	8007240 <core_set_error>
 8006ede:	e7f3      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8006ee0:	9c01      	ldr	r4, [sp, #4]
 8006ee2:	2217      	movs	r2, #23
 8006ee4:	f104 0010 	add.w	r0, r4, #16
 8006ee8:	2112      	movs	r1, #18
 8006eea:	469b      	mov	fp, r3
 8006eec:	f000 f9a8 	bl	8007240 <core_set_error>
 8006ef0:	e7ea      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8006ef2:	9c01      	ldr	r4, [sp, #4]
 8006ef4:	2219      	movs	r2, #25
 8006ef6:	f104 0010 	add.w	r0, r4, #16
 8006efa:	2112      	movs	r1, #18
 8006efc:	f000 f9a0 	bl	8007240 <core_set_error>
 8006f00:	f04f 0b00 	mov.w	fp, #0
 8006f04:	e7e0      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8006f06:	9c01      	ldr	r4, [sp, #4]
 8006f08:	2218      	movs	r2, #24
 8006f0a:	f104 0010 	add.w	r0, r4, #16
 8006f0e:	2112      	movs	r1, #18
 8006f10:	f000 f996 	bl	8007240 <core_set_error>
 8006f14:	f04f 0b00 	mov.w	fp, #0
 8006f18:	e7d6      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8006f1a:	9c01      	ldr	r4, [sp, #4]
 8006f1c:	f104 0010 	add.w	r0, r4, #16
 8006f20:	2217      	movs	r2, #23
 8006f22:	2112      	movs	r1, #18
 8006f24:	f000 f98c 	bl	8007240 <core_set_error>
 8006f28:	f04f 0b00 	mov.w	fp, #0
 8006f2c:	e7cc      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8006f2e:	bf00      	nop
 8006f30:	a1c00100 	.word	0xa1c00100
 8006f34:	e0002000 	.word	0xe0002000
 8006f38:	e0042000 	.word	0xe0042000
 8006f3c:	58024c08 	.word	0x58024c08
 8006f40:	58024c00 	.word	0x58024c00
 8006f44:	f407a5c2 	.word	0xf407a5c2
 8006f48:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f4c:	40023008 	.word	0x40023008
 8006f50:	40023000 	.word	0x40023000
 8006f54:	9c01      	ldr	r4, [sp, #4]
 8006f56:	9a02      	ldr	r2, [sp, #8]
 8006f58:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006f5a:	2a00      	cmp	r2, #0
 8006f5c:	f000 80a9 	beq.w	80070b2 <ai_platform_network_process+0x37e>
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f240 809b 	bls.w	800709c <ai_platform_network_process+0x368>
 8006f66:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8006f6a:	f11a 0f0c 	cmn.w	sl, #12
 8006f6e:	f000 8095 	beq.w	800709c <ai_platform_network_process+0x368>
 8006f72:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8090 	beq.w	800709c <ai_platform_network_process+0x368>
 8006f7c:	9d02      	ldr	r5, [sp, #8]
 8006f7e:	9401      	str	r4, [sp, #4]
 8006f80:	f04f 0800 	mov.w	r8, #0
 8006f84:	4598      	cmp	r8, r3
 8006f86:	f080 8092 	bcs.w	80070ae <ai_platform_network_process+0x37a>
 8006f8a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 808d 	beq.w	80070ae <ai_platform_network_process+0x37a>
 8006f94:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	f000 8088 	beq.w	80070ae <ai_platform_network_process+0x37a>
 8006f9e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	9302      	str	r3, [sp, #8]
 8006fa6:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006faa:	191f      	adds	r7, r3, r4
 8006fac:	f000 812d 	beq.w	800720a <ai_platform_network_process+0x4d6>
 8006fb0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006fb4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006fb8:	69b0      	ldr	r0, [r6, #24]
 8006fba:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006fbe:	6841      	ldr	r1, [r0, #4]
 8006fc0:	fb0b f30e 	mul.w	r3, fp, lr
 8006fc4:	fb0c f303 	mul.w	r3, ip, r3
 8006fc8:	4299      	cmp	r1, r3
 8006fca:	d366      	bcc.n	800709a <ai_platform_network_process+0x366>
 8006fcc:	68f3      	ldr	r3, [r6, #12]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	455a      	cmp	r2, fp
 8006fd2:	d162      	bne.n	800709a <ai_platform_network_process+0x366>
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	4572      	cmp	r2, lr
 8006fd8:	d15f      	bne.n	800709a <ai_platform_network_process+0x366>
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	459c      	cmp	ip, r3
 8006fde:	d15c      	bne.n	800709a <ai_platform_network_process+0x366>
 8006fe0:	6800      	ldr	r0, [r0, #0]
 8006fe2:	f002 f807 	bl	8008ff4 <ai_array_get_byte_size>
 8006fe6:	68f2      	ldr	r2, [r6, #12]
 8006fe8:	6973      	ldr	r3, [r6, #20]
 8006fea:	68d2      	ldr	r2, [r2, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	fb03 f302 	mul.w	r3, r3, r2
 8006ff2:	4298      	cmp	r0, r3
 8006ff4:	d351      	bcc.n	800709a <ai_platform_network_process+0x366>
 8006ff6:	69b3      	ldr	r3, [r6, #24]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	f001 ffa3 	bl	8008f44 <ai_array_to_buffer_fmt>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	4043      	eors	r3, r0
 8007002:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007006:	d13e      	bne.n	8007086 <ai_platform_network_process+0x352>
 8007008:	692b      	ldr	r3, [r5, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d032      	beq.n	8007074 <ai_platform_network_process+0x340>
 800700e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8007012:	f1bb 0f00 	cmp.w	fp, #0
 8007016:	d025      	beq.n	8007064 <ai_platform_network_process+0x330>
 8007018:	68f2      	ldr	r2, [r6, #12]
 800701a:	6973      	ldr	r3, [r6, #20]
 800701c:	68d1      	ldr	r1, [r2, #12]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	fb02 f201 	mul.w	r2, r2, r1
 8007024:	60ba      	str	r2, [r7, #8]
 8007026:	88ab      	ldrh	r3, [r5, #4]
 8007028:	fb02 f203 	mul.w	r2, r2, r3
 800702c:	60fa      	str	r2, [r7, #12]
 800702e:	6929      	ldr	r1, [r5, #16]
 8007030:	6079      	str	r1, [r7, #4]
 8007032:	692b      	ldr	r3, [r5, #16]
 8007034:	4413      	add	r3, r2
 8007036:	9a02      	ldr	r2, [sp, #8]
 8007038:	5113      	str	r3, [r2, r4]
 800703a:	69b0      	ldr	r0, [r6, #24]
 800703c:	6803      	ldr	r3, [r0, #0]
 800703e:	45d9      	cmp	r9, fp
 8007040:	bf38      	it	cc
 8007042:	46d9      	movcc	r9, fp
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	d407      	bmi.n	8007058 <ai_platform_network_process+0x324>
 8007048:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	4419      	add	r1, r3
 8007050:	6081      	str	r1, [r0, #8]
 8007052:	69b3      	ldr	r3, [r6, #24]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800705c:	f108 0801 	add.w	r8, r8, #1
 8007060:	3518      	adds	r5, #24
 8007062:	e78f      	b.n	8006f84 <ai_platform_network_process+0x250>
 8007064:	9c01      	ldr	r4, [sp, #4]
 8007066:	2221      	movs	r2, #33	; 0x21
 8007068:	f104 0010 	add.w	r0, r4, #16
 800706c:	2113      	movs	r1, #19
 800706e:	f000 f8e7 	bl	8007240 <core_set_error>
 8007072:	e729      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8007074:	9c01      	ldr	r4, [sp, #4]
 8007076:	2217      	movs	r2, #23
 8007078:	f104 0010 	add.w	r0, r4, #16
 800707c:	2113      	movs	r1, #19
 800707e:	469b      	mov	fp, r3
 8007080:	f000 f8de 	bl	8007240 <core_set_error>
 8007084:	e720      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8007086:	9c01      	ldr	r4, [sp, #4]
 8007088:	2219      	movs	r2, #25
 800708a:	f104 0010 	add.w	r0, r4, #16
 800708e:	2113      	movs	r1, #19
 8007090:	f000 f8d6 	bl	8007240 <core_set_error>
 8007094:	f04f 0b00 	mov.w	fp, #0
 8007098:	e716      	b.n	8006ec8 <ai_platform_network_process+0x194>
 800709a:	9c01      	ldr	r4, [sp, #4]
 800709c:	f104 0010 	add.w	r0, r4, #16
 80070a0:	2218      	movs	r2, #24
 80070a2:	2113      	movs	r1, #19
 80070a4:	f000 f8cc 	bl	8007240 <core_set_error>
 80070a8:	f04f 0b00 	mov.w	fp, #0
 80070ac:	e70c      	b.n	8006ec8 <ai_platform_network_process+0x194>
 80070ae:	9c01      	ldr	r4, [sp, #4]
 80070b0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80070b2:	f8a4 9014 	strh.w	r9, [r4, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a4 	beq.w	8007204 <ai_platform_network_process+0x4d0>
 80070bc:	2b01      	cmp	r3, #1
 80070be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80070c0:	f240 809e 	bls.w	8007200 <ai_platform_network_process+0x4cc>
 80070c4:	f105 070c 	add.w	r7, r5, #12
 80070c8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80070cc:	8aa3      	ldrh	r3, [r4, #20]
 80070ce:	455b      	cmp	r3, fp
 80070d0:	f67f aefa 	bls.w	8006ec8 <ai_platform_network_process+0x194>
 80070d4:	9401      	str	r4, [sp, #4]
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	d036      	beq.n	8007148 <ai_platform_network_process+0x414>
 80070da:	882b      	ldrh	r3, [r5, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d033      	beq.n	8007148 <ai_platform_network_process+0x414>
 80070e0:	686b      	ldr	r3, [r5, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d030      	beq.n	8007148 <ai_platform_network_process+0x414>
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f04f 0800 	mov.w	r8, #0
 80070ec:	b9db      	cbnz	r3, 8007126 <ai_platform_network_process+0x3f2>
 80070ee:	e02b      	b.n	8007148 <ai_platform_network_process+0x414>
 80070f0:	68d4      	ldr	r4, [r2, #12]
 80070f2:	1b00      	subs	r0, r0, r4
 80070f4:	4401      	add	r1, r0
 80070f6:	6091      	str	r1, [r2, #8]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	6872      	ldr	r2, [r6, #4]
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007102:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007106:	440b      	add	r3, r1
 8007108:	4293      	cmp	r3, r2
 800710a:	bf24      	itt	cs
 800710c:	68f3      	ldrcs	r3, [r6, #12]
 800710e:	1ad3      	subcs	r3, r2, r3
 8007110:	6073      	str	r3, [r6, #4]
 8007112:	882b      	ldrh	r3, [r5, #0]
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	4598      	cmp	r8, r3
 800711a:	d215      	bcs.n	8007148 <ai_platform_network_process+0x414>
 800711c:	686b      	ldr	r3, [r5, #4]
 800711e:	b19b      	cbz	r3, 8007148 <ai_platform_network_process+0x414>
 8007120:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007124:	b183      	cbz	r3, 8007148 <ai_platform_network_process+0x414>
 8007126:	68a9      	ldr	r1, [r5, #8]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	f8d1 a000 	ldr.w	sl, [r1]
 800712e:	6814      	ldr	r4, [r2, #0]
 8007130:	6890      	ldr	r0, [r2, #8]
 8007132:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007136:	eb0a 0609 	add.w	r6, sl, r9
 800713a:	00a4      	lsls	r4, r4, #2
 800713c:	6871      	ldr	r1, [r6, #4]
 800713e:	d5d7      	bpl.n	80070f0 <ai_platform_network_process+0x3bc>
 8007140:	68b2      	ldr	r2, [r6, #8]
 8007142:	f001 ffab 	bl	800909c <memcpy>
 8007146:	e7da      	b.n	80070fe <ai_platform_network_process+0x3ca>
 8007148:	9801      	ldr	r0, [sp, #4]
 800714a:	f001 fead 	bl	8008ea8 <ai_layers_forward_all>
 800714e:	2f00      	cmp	r7, #0
 8007150:	d047      	beq.n	80071e2 <ai_platform_network_process+0x4ae>
 8007152:	883b      	ldrh	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d044      	beq.n	80071e2 <ai_platform_network_process+0x4ae>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d041      	beq.n	80071e2 <ai_platform_network_process+0x4ae>
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	2800      	cmp	r0, #0
 8007162:	d03e      	beq.n	80071e2 <ai_platform_network_process+0x4ae>
 8007164:	f04f 0800 	mov.w	r8, #0
 8007168:	e019      	b.n	800719e <ai_platform_network_process+0x46a>
 800716a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800716e:	4293      	cmp	r3, r2
 8007170:	bf24      	itt	cs
 8007172:	68f3      	ldrcs	r3, [r6, #12]
 8007174:	1ad3      	subcs	r3, r2, r3
 8007176:	6073      	str	r3, [r6, #4]
 8007178:	6981      	ldr	r1, [r0, #24]
 800717a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800717e:	1b12      	subs	r2, r2, r4
 8007180:	4413      	add	r3, r2
 8007182:	608b      	str	r3, [r1, #8]
 8007184:	6983      	ldr	r3, [r0, #24]
 8007186:	6872      	ldr	r2, [r6, #4]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	883b      	ldrh	r3, [r7, #0]
 800718c:	f108 0801 	add.w	r8, r8, #1
 8007190:	4598      	cmp	r8, r3
 8007192:	d226      	bcs.n	80071e2 <ai_platform_network_process+0x4ae>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	b323      	cbz	r3, 80071e2 <ai_platform_network_process+0x4ae>
 8007198:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800719c:	b308      	cbz	r0, 80071e2 <ai_platform_network_process+0x4ae>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6981      	ldr	r1, [r0, #24]
 80071a2:	f8d3 a000 	ldr.w	sl, [r3]
 80071a6:	680c      	ldr	r4, [r1, #0]
 80071a8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80071ac:	eb0a 0609 	add.w	r6, sl, r9
 80071b0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80071b4:	00a4      	lsls	r4, r4, #2
 80071b6:	eb0c 0302 	add.w	r3, ip, r2
 80071ba:	d5d6      	bpl.n	800716a <ai_platform_network_process+0x436>
 80071bc:	6889      	ldr	r1, [r1, #8]
 80071be:	4660      	mov	r0, ip
 80071c0:	f001 ff6c 	bl	800909c <memcpy>
 80071c4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80071c8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80071cc:	440b      	add	r3, r1
 80071ce:	4293      	cmp	r3, r2
 80071d0:	bf24      	itt	cs
 80071d2:	68f3      	ldrcs	r3, [r6, #12]
 80071d4:	1ad3      	subcs	r3, r2, r3
 80071d6:	6073      	str	r3, [r6, #4]
 80071d8:	883b      	ldrh	r3, [r7, #0]
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	4598      	cmp	r8, r3
 80071e0:	d3d8      	bcc.n	8007194 <ai_platform_network_process+0x460>
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80071e8:	461a      	mov	r2, r3
 80071ea:	f10b 0b01 	add.w	fp, fp, #1
 80071ee:	8a9b      	ldrh	r3, [r3, #20]
 80071f0:	fa1f fb8b 	uxth.w	fp, fp
 80071f4:	455b      	cmp	r3, fp
 80071f6:	f8a2 b016 	strh.w	fp, [r2, #22]
 80071fa:	f63f af6c 	bhi.w	80070d6 <ai_platform_network_process+0x3a2>
 80071fe:	e663      	b.n	8006ec8 <ai_platform_network_process+0x194>
 8007200:	2700      	movs	r7, #0
 8007202:	e761      	b.n	80070c8 <ai_platform_network_process+0x394>
 8007204:	461d      	mov	r5, r3
 8007206:	461f      	mov	r7, r3
 8007208:	e75e      	b.n	80070c8 <ai_platform_network_process+0x394>
 800720a:	9c01      	ldr	r4, [sp, #4]
 800720c:	2217      	movs	r2, #23
 800720e:	f104 0010 	add.w	r0, r4, #16
 8007212:	2113      	movs	r1, #19
 8007214:	f000 f814 	bl	8007240 <core_set_error>
 8007218:	46bb      	mov	fp, r7
 800721a:	e655      	b.n	8006ec8 <ai_platform_network_process+0x194>
 800721c:	f104 0010 	add.w	r0, r4, #16
 8007220:	2230      	movs	r2, #48	; 0x30
 8007222:	2111      	movs	r1, #17
 8007224:	f000 f80c 	bl	8007240 <core_set_error>
 8007228:	e64e      	b.n	8006ec8 <ai_platform_network_process+0x194>
 800722a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800722c:	e5c1      	b.n	8006db2 <ai_platform_network_process+0x7e>
 800722e:	bf00      	nop

08007230 <core_init>:
 8007230:	2001      	movs	r0, #1
 8007232:	4770      	bx	lr

08007234 <core_get_error>:
 8007234:	4603      	mov	r3, r0
 8007236:	2200      	movs	r2, #0
 8007238:	6800      	ldr	r0, [r0, #0]
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop

08007240 <core_set_error>:
 8007240:	7803      	ldrb	r3, [r0, #0]
 8007242:	b933      	cbnz	r3, 8007252 <core_set_error+0x12>
 8007244:	7001      	strb	r1, [r0, #0]
 8007246:	6803      	ldr	r3, [r0, #0]
 8007248:	f362 231f 	bfi	r3, r2, #8, #24
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	2001      	movs	r0, #1
 8007250:	4770      	bx	lr
 8007252:	2000      	movs	r0, #0
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop

08007258 <func_dummy>:
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <ai_dict8_dot_array_f32>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007264:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007268:	f000 80c0 	beq.w	80073ec <ai_dict8_dot_array_f32+0x190>
 800726c:	f101 0408 	add.w	r4, r1, #8
 8007270:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007274:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80073f4 <ai_dict8_dot_array_f32+0x198>
 8007278:	eb04 0e09 	add.w	lr, r4, r9
 800727c:	f103 0520 	add.w	r5, r3, #32
 8007280:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007284:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007288:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800728c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007290:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007294:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007298:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800729c:	ed55 3a04 	vldr	s7, [r5, #-16]
 80072a0:	ed55 4a03 	vldr	s9, [r5, #-12]
 80072a4:	ed55 5a02 	vldr	s11, [r5, #-8]
 80072a8:	ed55 6a01 	vldr	s13, [r5, #-4]
 80072ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072b0:	edd6 7a00 	vldr	s15, [r6]
 80072b4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80072b8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80072bc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80072c0:	ed9a 3a00 	vldr	s6, [sl]
 80072c4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80072c8:	eee3 7a05 	vfma.f32	s15, s6, s10
 80072cc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80072d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072d4:	ed97 3a00 	vldr	s6, [r7]
 80072d8:	ed96 5a00 	vldr	s10, [r6]
 80072dc:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80072e0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80072e4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80072e8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80072ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072f0:	ed9a 3a00 	vldr	s6, [sl]
 80072f4:	ed96 4a00 	vldr	s8, [r6]
 80072f8:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80072fc:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007300:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007304:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007308:	ed97 5a00 	vldr	s10, [r7]
 800730c:	ed96 6a00 	vldr	s12, [r6]
 8007310:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007314:	3408      	adds	r4, #8
 8007316:	45a6      	cmp	lr, r4
 8007318:	f105 0520 	add.w	r5, r5, #32
 800731c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007320:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007324:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800732c:	d1a8      	bne.n	8007280 <ai_dict8_dot_array_f32+0x24>
 800732e:	4449      	add	r1, r9
 8007330:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007334:	f01c 0c07 	ands.w	ip, ip, #7
 8007338:	d050      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 800733a:	780c      	ldrb	r4, [r1, #0]
 800733c:	edd3 6a00 	vldr	s13, [r3]
 8007340:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007344:	edd4 7a00 	vldr	s15, [r4]
 8007348:	f1bc 0f01 	cmp.w	ip, #1
 800734c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007350:	d044      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 8007352:	784c      	ldrb	r4, [r1, #1]
 8007354:	edd3 6a01 	vldr	s13, [r3, #4]
 8007358:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800735c:	edd4 7a00 	vldr	s15, [r4]
 8007360:	f1bc 0f02 	cmp.w	ip, #2
 8007364:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007368:	d038      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 800736a:	788c      	ldrb	r4, [r1, #2]
 800736c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007370:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007374:	edd4 7a00 	vldr	s15, [r4]
 8007378:	f1bc 0f03 	cmp.w	ip, #3
 800737c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007380:	d02c      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 8007382:	78cc      	ldrb	r4, [r1, #3]
 8007384:	edd3 6a03 	vldr	s13, [r3, #12]
 8007388:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800738c:	edd4 7a00 	vldr	s15, [r4]
 8007390:	f1bc 0f04 	cmp.w	ip, #4
 8007394:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007398:	d020      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 800739a:	790c      	ldrb	r4, [r1, #4]
 800739c:	edd3 6a04 	vldr	s13, [r3, #16]
 80073a0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073a4:	edd4 7a00 	vldr	s15, [r4]
 80073a8:	f1bc 0f05 	cmp.w	ip, #5
 80073ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073b0:	d014      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 80073b2:	794c      	ldrb	r4, [r1, #5]
 80073b4:	edd3 6a05 	vldr	s13, [r3, #20]
 80073b8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073bc:	edd4 7a00 	vldr	s15, [r4]
 80073c0:	f1bc 0f06 	cmp.w	ip, #6
 80073c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073c8:	d008      	beq.n	80073dc <ai_dict8_dot_array_f32+0x180>
 80073ca:	7989      	ldrb	r1, [r1, #6]
 80073cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80073d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80073d4:	edd2 6a00 	vldr	s13, [r2]
 80073d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073dc:	edd0 7a00 	vldr	s15, [r0]
 80073e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e4:	ed80 7a00 	vstr	s14, [r0]
 80073e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ec:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80073f4 <ai_dict8_dot_array_f32+0x198>
 80073f0:	e7a0      	b.n	8007334 <ai_dict8_dot_array_f32+0xd8>
 80073f2:	bf00      	nop
 80073f4:	00000000 	.word	0x00000000

080073f8 <ai_dict4_dot_array_f32>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073fe:	f027 0c01 	bic.w	ip, r7, #1
 8007402:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8007406:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800740a:	f000 80ae 	beq.w	800756a <ai_dict4_dot_array_f32+0x172>
 800740e:	1d0d      	adds	r5, r1, #4
 8007410:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007414:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007570 <ai_dict4_dot_array_f32+0x178>
 8007418:	eb05 0e09 	add.w	lr, r5, r9
 800741c:	f103 0420 	add.w	r4, r3, #32
 8007420:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007424:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8007428:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800742c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007430:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007434:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8007438:	ed14 5a04 	vldr	s10, [r4, #-16]
 800743c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007440:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007444:	ed54 6a01 	vldr	s13, [r4, #-4]
 8007448:	f006 0a0f 	and.w	sl, r6, #15
 800744c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007450:	edda 7a00 	vldr	s15, [sl]
 8007454:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8007458:	0936      	lsrs	r6, r6, #4
 800745a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800745e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007462:	ed96 3a00 	vldr	s6, [r6]
 8007466:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800746a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800746e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007472:	f00b 0b0f 	and.w	fp, fp, #15
 8007476:	edd6 3a00 	vldr	s7, [r6]
 800747a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800747e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007482:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007486:	3504      	adds	r5, #4
 8007488:	ed9b 4a00 	vldr	s8, [fp]
 800748c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007490:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007494:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007498:	f00a 0a0f 	and.w	sl, sl, #15
 800749c:	eddb 4a00 	vldr	s9, [fp]
 80074a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80074a4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80074a8:	45ae      	cmp	lr, r5
 80074aa:	ed9a 5a00 	vldr	s10, [sl]
 80074ae:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80074b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80074b6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80074ba:	f006 060f 	and.w	r6, r6, #15
 80074be:	edda 5a00 	vldr	s11, [sl]
 80074c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80074c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074ca:	f104 0420 	add.w	r4, r4, #32
 80074ce:	ed96 6a00 	vldr	s12, [r6]
 80074d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074da:	d1a1      	bne.n	8007420 <ai_dict4_dot_array_f32+0x28>
 80074dc:	4449      	add	r1, r9
 80074de:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80074e2:	459c      	cmp	ip, r3
 80074e4:	d92d      	bls.n	8007542 <ai_dict4_dot_array_f32+0x14a>
 80074e6:	f10c 0c07 	add.w	ip, ip, #7
 80074ea:	f103 0508 	add.w	r5, r3, #8
 80074ee:	ebac 0c05 	sub.w	ip, ip, r5
 80074f2:	f02c 0407 	bic.w	r4, ip, #7
 80074f6:	f103 0810 	add.w	r8, r3, #16
 80074fa:	44a0      	add	r8, r4
 80074fc:	f101 3eff 	add.w	lr, r1, #4294967295
 8007500:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8007504:	ed15 6a01 	vldr	s12, [r5, #-4]
 8007508:	ed55 6a02 	vldr	s13, [r5, #-8]
 800750c:	f004 060f 	and.w	r6, r4, #15
 8007510:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007514:	0924      	lsrs	r4, r4, #4
 8007516:	edd6 7a00 	vldr	s15, [r6]
 800751a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800751e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007522:	ed94 6a00 	vldr	s12, [r4]
 8007526:	eee6 7a26 	vfma.f32	s15, s12, s13
 800752a:	3508      	adds	r5, #8
 800752c:	45a8      	cmp	r8, r5
 800752e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007532:	d1e5      	bne.n	8007500 <ai_dict4_dot_array_f32+0x108>
 8007534:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007538:	f10c 0c01 	add.w	ip, ip, #1
 800753c:	4461      	add	r1, ip
 800753e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007542:	07fc      	lsls	r4, r7, #31
 8007544:	d509      	bpl.n	800755a <ai_dict4_dot_array_f32+0x162>
 8007546:	7809      	ldrb	r1, [r1, #0]
 8007548:	edd3 7a00 	vldr	s15, [r3]
 800754c:	090b      	lsrs	r3, r1, #4
 800754e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007552:	edd2 6a00 	vldr	s13, [r2]
 8007556:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800755a:	edd0 7a00 	vldr	s15, [r0]
 800755e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007562:	ed80 7a00 	vstr	s14, [r0]
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007570 <ai_dict4_dot_array_f32+0x178>
 800756e:	e7b8      	b.n	80074e2 <ai_dict4_dot_array_f32+0xea>
 8007570:	00000000 	.word	0x00000000

08007574 <ai_dict_decompress_f32>:
 8007574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007578:	9f08      	ldr	r7, [sp, #32]
 800757a:	2b04      	cmp	r3, #4
 800757c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007580:	d00e      	beq.n	80075a0 <ai_dict_decompress_f32+0x2c>
 8007582:	2b08      	cmp	r3, #8
 8007584:	d10a      	bne.n	800759c <ai_dict_decompress_f32+0x28>
 8007586:	42b8      	cmp	r0, r7
 8007588:	d208      	bcs.n	800759c <ai_dict_decompress_f32+0x28>
 800758a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f840 3b04 	str.w	r3, [r0], #4
 8007598:	4287      	cmp	r7, r0
 800759a:	d8f6      	bhi.n	800758a <ai_dict_decompress_f32+0x16>
 800759c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a0:	9b07      	ldr	r3, [sp, #28]
 80075a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80075a6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80075aa:	f10c 38ff 	add.w	r8, ip, #4294967295
 80075ae:	f003 0e01 	and.w	lr, r3, #1
 80075b2:	42b8      	cmp	r0, r7
 80075b4:	d2f2      	bcs.n	800759c <ai_dict_decompress_f32+0x28>
 80075b6:	f1bc 0f00 	cmp.w	ip, #0
 80075ba:	d01a      	beq.n	80075f2 <ai_dict_decompress_f32+0x7e>
 80075bc:	f100 0508 	add.w	r5, r0, #8
 80075c0:	1e4c      	subs	r4, r1, #1
 80075c2:	eb01 0608 	add.w	r6, r1, r8
 80075c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80075ca:	091b      	lsrs	r3, r3, #4
 80075cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075d0:	42a6      	cmp	r6, r4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f845 3c08 	str.w	r3, [r5, #-8]
 80075d8:	7823      	ldrb	r3, [r4, #0]
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075e2:	f105 0508 	add.w	r5, r5, #8
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f845 3c0c 	str.w	r3, [r5, #-12]
 80075ec:	d1eb      	bne.n	80075c6 <ai_dict_decompress_f32+0x52>
 80075ee:	4461      	add	r1, ip
 80075f0:	4448      	add	r0, r9
 80075f2:	f1be 0f00 	cmp.w	lr, #0
 80075f6:	d103      	bne.n	8007600 <ai_dict_decompress_f32+0x8c>
 80075f8:	4287      	cmp	r7, r0
 80075fa:	d8dc      	bhi.n	80075b6 <ai_dict_decompress_f32+0x42>
 80075fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007600:	780b      	ldrb	r3, [r1, #0]
 8007602:	091b      	lsrs	r3, r3, #4
 8007604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007608:	3101      	adds	r1, #1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	3004      	adds	r0, #4
 8007610:	e7cf      	b.n	80075b2 <ai_dict_decompress_f32+0x3e>
 8007612:	bf00      	nop

08007614 <forward_conv2d>:
 8007614:	6983      	ldr	r3, [r0, #24]
 8007616:	881a      	ldrh	r2, [r3, #0]
 8007618:	2a00      	cmp	r2, #0
 800761a:	f000 87c7 	beq.w	80085ac <forward_conv2d+0xf98>
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	b101      	cbz	r1, 8007626 <forward_conv2d+0x12>
 8007624:	6809      	ldr	r1, [r1, #0]
 8007626:	2a01      	cmp	r2, #1
 8007628:	f240 87bd 	bls.w	80085a6 <forward_conv2d+0xf92>
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	ed2d 8b10 	vpush	{d8-d15}
 8007634:	b0cb      	sub	sp, #300	; 0x12c
 8007636:	691c      	ldr	r4, [r3, #16]
 8007638:	af02      	add	r7, sp, #8
 800763a:	2c00      	cmp	r4, #0
 800763c:	f000 87af 	beq.w	800859e <forward_conv2d+0xf8a>
 8007640:	6824      	ldr	r4, [r4, #0]
 8007642:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8007646:	2a02      	cmp	r2, #2
 8007648:	f000 87a4 	beq.w	8008594 <forward_conv2d+0xf80>
 800764c:	69dd      	ldr	r5, [r3, #28]
 800764e:	2d00      	cmp	r5, #0
 8007650:	f000 8799 	beq.w	8008586 <forward_conv2d+0xf72>
 8007654:	f113 0218 	adds.w	r2, r3, #24
 8007658:	682c      	ldr	r4, [r5, #0]
 800765a:	d004      	beq.n	8007666 <forward_conv2d+0x52>
 800765c:	8b1b      	ldrh	r3, [r3, #24]
 800765e:	2b01      	cmp	r3, #1
 8007660:	f240 87a6 	bls.w	80085b0 <forward_conv2d+0xf9c>
 8007664:	686a      	ldr	r2, [r5, #4]
 8007666:	68ab      	ldr	r3, [r5, #8]
 8007668:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800766c:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8007670:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007674:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007678:	68ce      	ldr	r6, [r1, #12]
 800767a:	69a1      	ldr	r1, [r4, #24]
 800767c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007680:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007684:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8007688:	f8de 1004 	ldr.w	r1, [lr, #4]
 800768c:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007690:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007694:	6479      	str	r1, [r7, #68]	; 0x44
 8007696:	f8de 1008 	ldr.w	r1, [lr, #8]
 800769a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800769e:	6871      	ldr	r1, [r6, #4]
 80076a0:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80076a4:	68f1      	ldr	r1, [r6, #12]
 80076a6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80076aa:	68b1      	ldr	r1, [r6, #8]
 80076ac:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80076b0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80076b4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80076b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80076bc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80076c0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80076c4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80076c6:	6889      	ldr	r1, [r1, #8]
 80076c8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80076cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80076ce:	e9d5 ba00 	ldrd	fp, sl, [r5]
 80076d2:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80076d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80076d8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80076dc:	69c1      	ldr	r1, [r0, #28]
 80076de:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80076e2:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	f000 8749 	beq.w	800857e <forward_conv2d+0xf6a>
 80076ec:	6992      	ldr	r2, [r2, #24]
 80076ee:	6892      	ldr	r2, [r2, #8]
 80076f0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80076f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076f8:	6992      	ldr	r2, [r2, #24]
 80076fa:	6892      	ldr	r2, [r2, #8]
 80076fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007700:	4606      	mov	r6, r0
 8007702:	6a00      	ldr	r0, [r0, #32]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 872c 	beq.w	8008562 <forward_conv2d+0xf4e>
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	2a00      	cmp	r2, #0
 800770e:	f000 8594 	beq.w	800823a <forward_conv2d+0xc26>
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800771a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800771e:	6893      	ldr	r3, [r2, #8]
 8007720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007724:	f001 fc66 	bl	8008ff4 <ai_array_get_byte_size>
 8007728:	69a3      	ldr	r3, [r4, #24]
 800772a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800772e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007738:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800773a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800773e:	f3c3 5441 	ubfx	r4, r3, #21, #2
 8007742:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 8007746:	fa1f f088 	uxth.w	r0, r8
 800774a:	4125      	asrs	r5, r4
 800774c:	3801      	subs	r0, #1
 800774e:	1e4c      	subs	r4, r1, #1
 8007750:	fb04 1100 	mla	r1, r4, r0, r1
 8007754:	6439      	str	r1, [r7, #64]	; 0x40
 8007756:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800775a:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8007afc <forward_conv2d+0x4e8>
 800775e:	fa1f f289 	uxth.w	r2, r9
 8007762:	3a01      	subs	r2, #1
 8007764:	1e48      	subs	r0, r1, #1
 8007766:	fb00 1102 	mla	r1, r0, r2, r1
 800776a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800776e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007772:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007776:	4610      	mov	r0, r2
 8007778:	2a00      	cmp	r2, #0
 800777a:	bf08      	it	eq
 800777c:	4660      	moveq	r0, ip
 800777e:	2b04      	cmp	r3, #4
 8007780:	b2ad      	uxth	r5, r5
 8007782:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8007786:	f000 8533 	beq.w	80081f0 <forward_conv2d+0xbdc>
 800778a:	2b08      	cmp	r3, #8
 800778c:	f000 8530 	beq.w	80081f0 <forward_conv2d+0xbdc>
 8007790:	fa1f f38b 	uxth.w	r3, fp
 8007794:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007798:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800779c:	425b      	negs	r3, r3
 800779e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077a2:	2900      	cmp	r1, #0
 80077a4:	f000 8242 	beq.w	8007c2c <forward_conv2d+0x618>
 80077a8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80077ac:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 80077b0:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8007af8 <forward_conv2d+0x4e4>
 80077b4:	fb00 f305 	mul.w	r3, r0, r5
 80077b8:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 80077bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80077c0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80077c4:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 80077c8:	663d      	str	r5, [r7, #96]	; 0x60
 80077ca:	fa0f f288 	sxth.w	r2, r8
 80077ce:	fb03 f400 	mul.w	r4, r3, r0
 80077d2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80077d6:	fa1f f18a 	uxth.w	r1, sl
 80077da:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80077de:	67bc      	str	r4, [r7, #120]	; 0x78
 80077e0:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80077e4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80077e8:	4249      	negs	r1, r1
 80077ea:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80077ee:	0092      	lsls	r2, r2, #2
 80077f0:	0081      	lsls	r1, r0, #2
 80077f2:	4605      	mov	r5, r0
 80077f4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80077f8:	fb04 f200 	mul.w	r2, r4, r0
 80077fc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007800:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8007804:	fb01 fc00 	mul.w	ip, r1, r0
 8007808:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800780c:	fb01 fc03 	mul.w	ip, r1, r3
 8007810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007812:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007820:	fa0f f689 	sxth.w	r6, r9
 8007824:	469c      	mov	ip, r3
 8007826:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800782a:	4633      	mov	r3, r6
 800782c:	fb0c f606 	mul.w	r6, ip, r6
 8007830:	677e      	str	r6, [r7, #116]	; 0x74
 8007832:	4666      	mov	r6, ip
 8007834:	fb04 f606 	mul.w	r6, r4, r6
 8007838:	4686      	mov	lr, r0
 800783a:	4620      	mov	r0, r4
 800783c:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8007840:	62be      	str	r6, [r7, #40]	; 0x28
 8007842:	fb01 f404 	mul.w	r4, r1, r4
 8007846:	fb03 f605 	mul.w	r6, r3, r5
 800784a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800784c:	66bc      	str	r4, [r7, #104]	; 0x68
 800784e:	460b      	mov	r3, r1
 8007850:	4604      	mov	r4, r0
 8007852:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007856:	627e      	str	r6, [r7, #36]	; 0x24
 8007858:	fb05 f404 	mul.w	r4, r5, r4
 800785c:	617c      	str	r4, [r7, #20]
 800785e:	460c      	mov	r4, r1
 8007860:	fb04 f403 	mul.w	r4, r4, r3
 8007864:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007868:	65bc      	str	r4, [r7, #88]	; 0x58
 800786a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800786e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007872:	fb01 f104 	mul.w	r1, r1, r4
 8007876:	61b9      	str	r1, [r7, #24]
 8007878:	0091      	lsls	r1, r2, #2
 800787a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800787e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007880:	fb00 f202 	mul.w	r2, r0, r2
 8007884:	0081      	lsls	r1, r0, #2
 8007886:	61f9      	str	r1, [r7, #28]
 8007888:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800788c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8007890:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8007894:	011a      	lsls	r2, r3, #4
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800789c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078a4:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80078a8:	2300      	movs	r3, #0
 80078aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078b0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80078b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80078bc:	2900      	cmp	r1, #0
 80078be:	441a      	add	r2, r3
 80078c0:	bfb4      	ite	lt
 80078c2:	2100      	movlt	r1, #0
 80078c4:	2300      	movge	r3, #0
 80078c6:	4282      	cmp	r2, r0
 80078c8:	bf28      	it	cs
 80078ca:	4602      	movcs	r2, r0
 80078cc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80078d0:	2801      	cmp	r0, #1
 80078d2:	f000 8320 	beq.w	8007f16 <forward_conv2d+0x902>
 80078d6:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80078da:	4281      	cmp	r1, r0
 80078dc:	f000 81c3 	beq.w	8007c66 <forward_conv2d+0x652>
 80078e0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80078e4:	2900      	cmp	r1, #0
 80078e6:	f000 8182 	beq.w	8007bee <forward_conv2d+0x5da>
 80078ea:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80078ee:	fb93 f1f0 	sdiv	r1, r3, r0
 80078f2:	fb00 3111 	mls	r1, r0, r1, r3
 80078f6:	1a41      	subs	r1, r0, r1
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	fb91 f5f0 	sdiv	r5, r1, r0
 80078fe:	fb00 1515 	mls	r5, r0, r5, r1
 8007902:	1b52      	subs	r2, r2, r5
 8007904:	4601      	mov	r1, r0
 8007906:	4402      	add	r2, r0
 8007908:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800790c:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 8007910:	f8c7 b020 	str.w	fp, [r7, #32]
 8007914:	4604      	mov	r4, r0
 8007916:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800791a:	fbb4 f4f0 	udiv	r4, r4, r0
 800791e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007920:	3a01      	subs	r2, #1
 8007922:	fb92 f8f1 	sdiv	r8, r2, r1
 8007926:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800792a:	eba0 0c04 	sub.w	ip, r0, r4
 800792e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007932:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007936:	4614      	mov	r4, r2
 8007938:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800793c:	fbb4 f2f2 	udiv	r2, r4, r2
 8007940:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8007944:	657a      	str	r2, [r7, #84]	; 0x54
 8007946:	441d      	add	r5, r3
 8007948:	fb0e f000 	mul.w	r0, lr, r0
 800794c:	440b      	add	r3, r1
 800794e:	eba6 0608 	sub.w	r6, r6, r8
 8007952:	fb04 f505 	mul.w	r5, r4, r5
 8007956:	3b01      	subs	r3, #1
 8007958:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800795c:	fb93 f3f4 	sdiv	r3, r3, r4
 8007960:	fb00 f406 	mul.w	r4, r0, r6
 8007964:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007968:	66fd      	str	r5, [r7, #108]	; 0x6c
 800796a:	0091      	lsls	r1, r2, #2
 800796c:	fb00 f003 	mul.w	r0, r0, r3
 8007970:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8007974:	6538      	str	r0, [r7, #80]	; 0x50
 8007976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800797a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800797e:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8007982:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8007986:	1ac3      	subs	r3, r0, r3
 8007988:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800798c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007990:	008b      	lsls	r3, r1, #2
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
 8007994:	00d3      	lsls	r3, r2, #3
 8007996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007998:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800799c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079a8:	2300      	movs	r3, #0
 80079aa:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80079ae:	673b      	str	r3, [r7, #112]	; 0x70
 80079b0:	46c2      	mov	sl, r8
 80079b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079ba:	eb03 0c02 	add.w	ip, r3, r2
 80079be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f2c0 813b 	blt.w	8007c3e <forward_conv2d+0x62a>
 80079c8:	2000      	movs	r0, #0
 80079ca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80079cc:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 80079d0:	4605      	mov	r5, r0
 80079d2:	4606      	mov	r6, r0
 80079d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079dc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80079e0:	4413      	add	r3, r2
 80079e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079e6:	440a      	add	r2, r1
 80079e8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80079ec:	428b      	cmp	r3, r1
 80079ee:	bf94      	ite	ls
 80079f0:	ebc6 0303 	rsbls	r3, r6, r3
 80079f4:	ebc6 0301 	rsbhi	r3, r6, r1
 80079f8:	4415      	add	r5, r2
 80079fa:	1a1b      	subs	r3, r3, r0
 80079fc:	00a4      	lsls	r4, r4, #2
 80079fe:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8007a02:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8007a06:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007a0a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	bf08      	it	eq
 8007a12:	4662      	moveq	r2, ip
 8007a14:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a18:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007a1c:	fb91 f1f0 	sdiv	r1, r1, r0
 8007a20:	4429      	add	r1, r5
 8007a22:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8007a26:	fb0e 5501 	mla	r5, lr, r1, r5
 8007a2a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007a2e:	4403      	add	r3, r0
 8007a30:	fb01 6104 	mla	r1, r1, r4, r6
 8007a34:	3b01      	subs	r3, #1
 8007a36:	fb93 f6f0 	sdiv	r6, r3, r0
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8007a40:	fb06 3110 	mls	r1, r6, r0, r3
 8007a44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a48:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007a4c:	4562      	cmp	r2, ip
 8007a4e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007a52:	bf08      	it	eq
 8007a54:	eeb0 6a48 	vmoveq.f32	s12, s16
 8007a58:	1b9b      	subs	r3, r3, r6
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d076      	beq.n	8007b4c <forward_conv2d+0x538>
 8007a5e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007a62:	fb0e f803 	mul.w	r8, lr, r3
 8007a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a68:	fb00 fb01 	mul.w	fp, r0, r1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d06d      	beq.n	8007b4c <forward_conv2d+0x538>
 8007a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a74:	18d3      	adds	r3, r2, r3
 8007a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
 8007a82:	2300      	movs	r3, #0
 8007a84:	667b      	str	r3, [r7, #100]	; 0x64
 8007a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8c:	4413      	add	r3, r2
 8007a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	4413      	add	r3, r2
 8007a98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007aa0:	ecf3 7a01 	vldmia	r3!, {s15}
 8007aa4:	f1ba 0f00 	cmp.w	sl, #0
 8007aa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007aac:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007ab0:	f340 80c3 	ble.w	8007c3a <forward_conv2d+0x626>
 8007ab4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007ab8:	f04f 0c00 	mov.w	ip, #0
 8007abc:	2e00      	cmp	r6, #0
 8007abe:	dd1f      	ble.n	8007b00 <forward_conv2d+0x4ec>
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	eb00 040e 	add.w	r4, r0, lr
 8007ac6:	4284      	cmp	r4, r0
 8007ac8:	d910      	bls.n	8007aec <forward_conv2d+0x4d8>
 8007aca:	4603      	mov	r3, r0
 8007acc:	462a      	mov	r2, r5
 8007ace:	ecb3 7a01 	vldmia	r3!, {s14}
 8007ad2:	ecf2 6a01 	vldmia	r2!, {s13}
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007adc:	d8f7      	bhi.n	8007ace <forward_conv2d+0x4ba>
 8007ade:	43c3      	mvns	r3, r0
 8007ae0:	441c      	add	r4, r3
 8007ae2:	f024 0403 	bic.w	r4, r4, #3
 8007ae6:	3404      	adds	r4, #4
 8007ae8:	4425      	add	r5, r4
 8007aea:	4420      	add	r0, r4
 8007aec:	3101      	adds	r1, #1
 8007aee:	428e      	cmp	r6, r1
 8007af0:	4448      	add	r0, r9
 8007af2:	d1e6      	bne.n	8007ac2 <forward_conv2d+0x4ae>
 8007af4:	e004      	b.n	8007b00 <forward_conv2d+0x4ec>
 8007af6:	bf00      	nop
 8007af8:	00000000 	.word	0x00000000
 8007afc:	08007259 	.word	0x08007259
 8007b00:	f10c 0c01 	add.w	ip, ip, #1
 8007b04:	45e2      	cmp	sl, ip
 8007b06:	4458      	add	r0, fp
 8007b08:	4445      	add	r5, r8
 8007b0a:	d1d7      	bne.n	8007abc <forward_conv2d+0x4a8>
 8007b0c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b14:	441d      	add	r5, r3
 8007b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b1a:	ece3 7a01 	vstmia	r3!, {s15}
 8007b1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d1b8      	bne.n	8007a9c <forward_conv2d+0x488>
 8007b2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b32:	4472      	add	r2, lr
 8007b34:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b3a:	1a52      	subs	r2, r2, r1
 8007b3c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007b40:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007b44:	3301      	adds	r3, #1
 8007b46:	429a      	cmp	r2, r3
 8007b48:	667b      	str	r3, [r7, #100]	; 0x64
 8007b4a:	d19c      	bne.n	8007a86 <forward_conv2d+0x472>
 8007b4c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007b50:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b56:	4608      	mov	r0, r1
 8007b58:	4410      	add	r0, r2
 8007b5a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007b5e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8007b62:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8007b66:	4401      	add	r1, r0
 8007b68:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8007b6c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007b70:	1a8a      	subs	r2, r1, r2
 8007b72:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8007b76:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b80:	f47f af17 	bne.w	80079b2 <forward_conv2d+0x39e>
 8007b84:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8007b88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b8c:	b37b      	cbz	r3, 8007bee <forward_conv2d+0x5da>
 8007b8e:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8007b92:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8007b96:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 8007b9a:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	46a2      	mov	sl, r4
 8007ba2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007ba6:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8007baa:	f8c2 a008 	str.w	sl, [r2, #8]
 8007bae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007bb2:	4633      	mov	r3, r6
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	4416      	add	r6, r2
 8007bb8:	4640      	mov	r0, r8
 8007bba:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007bbe:	47a0      	blx	r4
 8007bc0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007bc4:	4492      	add	sl, r2
 8007bc6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007bca:	eba6 0309 	sub.w	r3, r6, r9
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	bfa8      	it	ge
 8007bd2:	464e      	movge	r6, r9
 8007bd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bd8:	3501      	adds	r5, #1
 8007bda:	42ab      	cmp	r3, r5
 8007bdc:	d1e1      	bne.n	8007ba2 <forward_conv2d+0x58e>
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8007be8:	4413      	add	r3, r2
 8007bea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	609a      	str	r2, [r3, #8]
 8007bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c00:	4610      	mov	r0, r2
 8007c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c06:	4418      	add	r0, r3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c14:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8007c18:	4413      	add	r3, r2
 8007c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c22:	3101      	adds	r1, #1
 8007c24:	428b      	cmp	r3, r1
 8007c26:	67f9      	str	r1, [r7, #124]	; 0x7c
 8007c28:	f47f ae42 	bne.w	80078b0 <forward_conv2d+0x29c>
 8007c2c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8007c30:	46bd      	mov	sp, r7
 8007c32:	ecbd 8b10 	vpop	{d8-d15}
 8007c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	e768      	b.n	8007b10 <forward_conv2d+0x4fc>
 8007c3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c42:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8007c46:	fb90 f3f2 	sdiv	r3, r0, r2
 8007c4a:	fb02 0313 	mls	r3, r2, r3, r0
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	4605      	mov	r5, r0
 8007c52:	fb93 f0f2 	sdiv	r0, r3, r2
 8007c56:	fb02 3010 	mls	r0, r2, r0, r3
 8007c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5c:	462e      	mov	r6, r5
 8007c5e:	18c4      	adds	r4, r0, r3
 8007c60:	eb02 0805 	add.w	r8, r2, r5
 8007c64:	e6b6      	b.n	80079d4 <forward_conv2d+0x3c0>
 8007c66:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007c68:	2901      	cmp	r1, #1
 8007c6a:	f47f ae39 	bne.w	80078e0 <forward_conv2d+0x2cc>
 8007c6e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007c72:	2900      	cmp	r1, #0
 8007c74:	d0bb      	beq.n	8007bee <forward_conv2d+0x5da>
 8007c76:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8007c7a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007c7e:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8007c82:	fbb1 f5f0 	udiv	r5, r1, r0
 8007c86:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007c8a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8007c8e:	633d      	str	r5, [r7, #48]	; 0x30
 8007c90:	1ad2      	subs	r2, r2, r3
 8007c92:	1a8c      	subs	r4, r1, r2
 8007c94:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c98:	00b2      	lsls	r2, r6, #2
 8007c9a:	fb02 f204 	mul.w	r2, r2, r4
 8007c9e:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8007ca2:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8007ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca8:	0082      	lsls	r2, r0, #2
 8007caa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cac:	00ca      	lsls	r2, r1, #3
 8007cae:	603a      	str	r2, [r7, #0]
 8007cb0:	00aa      	lsls	r2, r5, #2
 8007cb2:	60ba      	str	r2, [r7, #8]
 8007cb4:	fb03 f206 	mul.w	r2, r3, r6
 8007cb8:	673a      	str	r2, [r7, #112]	; 0x70
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ce0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f2c0 8110 	blt.w	8007f0a <forward_conv2d+0x8f6>
 8007cea:	2100      	movs	r1, #0
 8007cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cee:	460a      	mov	r2, r1
 8007cf0:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8007cf4:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8007cf8:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8007cfc:	4420      	add	r0, r4
 8007cfe:	4408      	add	r0, r1
 8007d00:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8007d04:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8007d08:	190c      	adds	r4, r1, r4
 8007d0a:	42ac      	cmp	r4, r5
 8007d0c:	bf28      	it	cs
 8007d0e:	462c      	movcs	r4, r5
 8007d10:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8007d14:	0080      	lsls	r0, r0, #2
 8007d16:	1aa4      	subs	r4, r4, r2
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	f000 80e7 	beq.w	8007eec <forward_conv2d+0x8d8>
 8007d1e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007d22:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8007d26:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8007d2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d2e:	42b5      	cmp	r5, r6
 8007d30:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8007d34:	eba3 0204 	sub.w	r2, r3, r4
 8007d38:	eba1 0104 	sub.w	r1, r1, r4
 8007d3c:	bf08      	it	eq
 8007d3e:	eef0 3a48 	vmoveq.f32	s7, s16
 8007d42:	462b      	mov	r3, r5
 8007d44:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8007d46:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8007d4a:	4428      	add	r0, r5
 8007d4c:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8007d50:	fb05 6e00 	mla	lr, r5, r0, r6
 8007d54:	eb0e 000b 	add.w	r0, lr, fp
 8007d58:	4586      	cmp	lr, r0
 8007d5a:	6238      	str	r0, [r7, #32]
 8007d5c:	f080 80a5 	bcs.w	8007eaa <forward_conv2d+0x896>
 8007d60:	0092      	lsls	r2, r2, #2
 8007d62:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d68:	fb0b f101 	mul.w	r1, fp, r1
 8007d6c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007d70:	f024 0803 	bic.w	r8, r4, #3
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f000 8098 	beq.w	8007eaa <forward_conv2d+0x896>
 8007d7a:	f108 32ff 	add.w	r2, r8, #4294967295
 8007d7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007d80:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007d84:	0892      	lsrs	r2, r2, #2
 8007d86:	3201      	adds	r2, #1
 8007d88:	4401      	add	r1, r0
 8007d8a:	fb02 f00a 	mul.w	r0, r2, sl
 8007d8e:	6578      	str	r0, [r7, #84]	; 0x54
 8007d90:	0110      	lsls	r0, r2, #4
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	653a      	str	r2, [r7, #80]	; 0x50
 8007d96:	1aca      	subs	r2, r1, r3
 8007d98:	613a      	str	r2, [r7, #16]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	6678      	str	r0, [r7, #100]	; 0x64
 8007d9e:	4413      	add	r3, r2
 8007da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007da4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007daa:	4413      	add	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4413      	add	r3, r2
 8007db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dbc:	ecf3 6a01 	vldmia	r3!, {s13}
 8007dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007dce:	dd57      	ble.n	8007e80 <forward_conv2d+0x86c>
 8007dd0:	4676      	mov	r6, lr
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	f1b8 0f00 	cmp.w	r8, #0
 8007dda:	f340 8085 	ble.w	8007ee8 <forward_conv2d+0x8d4>
 8007dde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007de2:	f109 0310 	add.w	r3, r9, #16
 8007de6:	18b1      	adds	r1, r6, r2
 8007de8:	2000      	movs	r0, #0
 8007dea:	4632      	mov	r2, r6
 8007dec:	eb02 050b 	add.w	r5, r2, fp
 8007df0:	ed95 7a00 	vldr	s14, [r5]
 8007df4:	ed53 7a03 	vldr	s15, [r3, #-12]
 8007df8:	ed92 4a00 	vldr	s8, [r2]
 8007dfc:	ed53 4a04 	vldr	s9, [r3, #-16]
 8007e00:	ed91 5a00 	vldr	s10, [r1]
 8007e04:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007e08:	ed13 6a01 	vldr	s12, [r3, #-4]
 8007e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e10:	eb01 050b 	add.w	r5, r1, fp
 8007e14:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e18:	3004      	adds	r0, #4
 8007e1a:	4540      	cmp	r0, r8
 8007e1c:	ed95 7a00 	vldr	s14, [r5]
 8007e20:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e24:	4452      	add	r2, sl
 8007e26:	4451      	add	r1, sl
 8007e28:	f103 0310 	add.w	r3, r3, #16
 8007e2c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007e30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007e34:	dbda      	blt.n	8007dec <forward_conv2d+0x7d8>
 8007e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007e3a:	441e      	add	r6, r3
 8007e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e3e:	4499      	add	r9, r3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	da11      	bge.n	8007e68 <forward_conv2d+0x854>
 8007e44:	4602      	mov	r2, r0
 8007e46:	4633      	mov	r3, r6
 8007e48:	4649      	mov	r1, r9
 8007e4a:	edd3 7a00 	vldr	s15, [r3]
 8007e4e:	ecb1 7a01 	vldmia	r1!, {s14}
 8007e52:	3201      	adds	r2, #1
 8007e54:	42a2      	cmp	r2, r4
 8007e56:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e5a:	445b      	add	r3, fp
 8007e5c:	d1f5      	bne.n	8007e4a <forward_conv2d+0x836>
 8007e5e:	1a20      	subs	r0, r4, r0
 8007e60:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8007e64:	fb00 660b 	mla	r6, r0, fp, r6
 8007e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e6c:	441e      	add	r6, r3
 8007e6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e72:	4499      	add	r9, r3
 8007e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e78:	f10c 0c01 	add.w	ip, ip, #1
 8007e7c:	4563      	cmp	r3, ip
 8007e7e:	d1aa      	bne.n	8007dd6 <forward_conv2d+0x7c2>
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	4499      	add	r9, r3
 8007e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e86:	ece3 6a01 	vstmia	r3!, {s13}
 8007e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e8c:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d191      	bne.n	8007db8 <forward_conv2d+0x7a4>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f10e 0e04 	add.w	lr, lr, #4
 8007ea4:	459e      	cmp	lr, r3
 8007ea6:	f4ff af7d 	bcc.w	8007da4 <forward_conv2d+0x790>
 8007eaa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007eae:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007ebc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007ec6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007eca:	4410      	add	r0, r2
 8007ecc:	1a8a      	subs	r2, r1, r2
 8007ece:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007ed2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007ed6:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8007eda:	3301      	adds	r3, #1
 8007edc:	429a      	cmp	r2, r3
 8007ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ee2:	f47f aefd 	bne.w	8007ce0 <forward_conv2d+0x6cc>
 8007ee6:	e64f      	b.n	8007b88 <forward_conv2d+0x574>
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e7a9      	b.n	8007e40 <forward_conv2d+0x82c>
 8007eec:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007ef0:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef8:	1b19      	subs	r1, r3, r4
 8007efa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007efe:	eef0 3a48 	vmov.f32	s7, s16
 8007f02:	1b1a      	subs	r2, r3, r4
 8007f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f08:	e71c      	b.n	8007d44 <forward_conv2d+0x730>
 8007f0a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f10:	460a      	mov	r2, r1
 8007f12:	440b      	add	r3, r1
 8007f14:	e6ec      	b.n	8007cf0 <forward_conv2d+0x6dc>
 8007f16:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007f18:	2801      	cmp	r0, #1
 8007f1a:	f47f ace1 	bne.w	80078e0 <forward_conv2d+0x2cc>
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007f22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8007f26:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f2c:	fb00 4101 	mla	r1, r0, r1, r4
 8007f30:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007f34:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8007f38:	f080 8191 	bcs.w	800825e <forward_conv2d+0xc4a>
 8007f3c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	f43f ae21 	beq.w	8007b88 <forward_conv2d+0x574>
 8007f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f48:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8007f4c:	fb02 f303 	mul.w	r3, r2, r3
 8007f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f52:	667b      	str	r3, [r7, #100]	; 0x64
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f58:	188b      	adds	r3, r1, r2
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f74:	2300      	movs	r3, #0
 8007f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8133 	beq.w	80081ea <forward_conv2d+0xbd6>
 8007f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f88:	ed93 6a00 	vldr	s12, [r3]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 8101 	beq.w	800819e <forward_conv2d+0xb8a>
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fa4:	eb03 0802 	add.w	r8, r3, r2
 8007fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8007fba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fc2:	f04f 0b00 	mov.w	fp, #0
 8007fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f2c0 8104 	blt.w	80081d8 <forward_conv2d+0xbc4>
 8007fd0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007fd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007fdc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007fe0:	eb02 0c04 	add.w	ip, r2, r4
 8007fe4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007fe8:	4540      	cmp	r0, r8
 8007fea:	bf94      	ite	ls
 8007fec:	ebc3 0300 	rsbls	r3, r3, r0
 8007ff0:	ebc3 0308 	rsbhi	r3, r3, r8
 8007ff4:	eba2 0903 	sub.w	r9, r2, r3
 8007ff8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007ffc:	1ac4      	subs	r4, r0, r3
 8007ffe:	fb03 f302 	mul.w	r3, r3, r2
 8008002:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008006:	2a00      	cmp	r2, #0
 8008008:	f340 80e3 	ble.w	80081d2 <forward_conv2d+0xbbe>
 800800c:	f023 050f 	bic.w	r5, r3, #15
 8008010:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8008014:	1e68      	subs	r0, r5, #1
 8008016:	0900      	lsrs	r0, r0, #4
 8008018:	3001      	adds	r0, #1
 800801a:	fb06 f204 	mul.w	r2, r6, r4
 800801e:	657a      	str	r2, [r7, #84]	; 0x54
 8008020:	0102      	lsls	r2, r0, #4
 8008022:	653a      	str	r2, [r7, #80]	; 0x50
 8008024:	fb06 f909 	mul.w	r9, r6, r9
 8008028:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800802c:	eef0 6a46 	vmov.f32	s13, s12
 8008030:	f04f 0e00 	mov.w	lr, #0
 8008034:	4662      	mov	r2, ip
 8008036:	2d00      	cmp	r5, #0
 8008038:	f340 80c9 	ble.w	80081ce <forward_conv2d+0xbba>
 800803c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008040:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008044:	2600      	movs	r6, #0
 8008046:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800804a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800804e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008052:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008056:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800805a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800805e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008062:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008066:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800806a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800806e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008072:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008076:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800807a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800807e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008082:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8008086:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800808a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800808e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008092:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008096:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800809a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800809e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 80080a2:	ed50 3a04 	vldr	s7, [r0, #-16]
 80080a6:	ed14 4a04 	vldr	s8, [r4, #-16]
 80080aa:	ed50 4a03 	vldr	s9, [r0, #-12]
 80080ae:	ed14 5a03 	vldr	s10, [r4, #-12]
 80080b2:	ed50 5a02 	vldr	s11, [r0, #-8]
 80080b6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80080ba:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80080be:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 80080c2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80080c6:	3610      	adds	r6, #16
 80080c8:	42ae      	cmp	r6, r5
 80080ca:	ed14 fa01 	vldr	s30, [r4, #-4]
 80080ce:	ed50 ea01 	vldr	s29, [r0, #-4]
 80080d2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80080d6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80080da:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80080de:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80080e2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80080e6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80080ea:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80080ee:	eee9 7a89 	vfma.f32	s15, s19, s18
 80080f2:	eee8 7a80 	vfma.f32	s15, s17, s0
 80080f6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80080fa:	eee1 7a82 	vfma.f32	s15, s3, s4
 80080fe:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008102:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008106:	eee4 7a85 	vfma.f32	s15, s9, s10
 800810a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800810e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008112:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008116:	db96      	blt.n	8008046 <forward_conv2d+0xa32>
 8008118:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800811a:	4451      	add	r1, sl
 800811c:	4452      	add	r2, sl
 800811e:	4283      	cmp	r3, r0
 8008120:	dd0f      	ble.n	8008142 <forward_conv2d+0xb2e>
 8008122:	4604      	mov	r4, r0
 8008124:	468c      	mov	ip, r1
 8008126:	4616      	mov	r6, r2
 8008128:	ecb6 7a01 	vldmia	r6!, {s14}
 800812c:	ecfc 7a01 	vldmia	ip!, {s15}
 8008130:	3401      	adds	r4, #1
 8008132:	42a3      	cmp	r3, r4
 8008134:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008138:	d1f6      	bne.n	8008128 <forward_conv2d+0xb14>
 800813a:	1a18      	subs	r0, r3, r0
 800813c:	0080      	lsls	r0, r0, #2
 800813e:	4402      	add	r2, r0
 8008140:	4401      	add	r1, r0
 8008142:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008144:	4402      	add	r2, r0
 8008146:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800814a:	f10e 0e01 	add.w	lr, lr, #1
 800814e:	4570      	cmp	r0, lr
 8008150:	4449      	add	r1, r9
 8008152:	f47f af70 	bne.w	8008036 <forward_conv2d+0xa22>
 8008156:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800815a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800815c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008160:	edc3 6a00 	vstr	s13, [r3]
 8008164:	4608      	mov	r0, r1
 8008166:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800816a:	440b      	add	r3, r1
 800816c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008170:	673b      	str	r3, [r7, #112]	; 0x70
 8008172:	4410      	add	r0, r2
 8008174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008176:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800817a:	4608      	mov	r0, r1
 800817c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008180:	4418      	add	r0, r3
 8008182:	1acb      	subs	r3, r1, r3
 8008184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008188:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800818c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8008190:	f10b 0b01 	add.w	fp, fp, #1
 8008194:	455b      	cmp	r3, fp
 8008196:	eba8 0802 	sub.w	r8, r8, r2
 800819a:	f47f af14 	bne.w	8007fc6 <forward_conv2d+0x9b2>
 800819e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80081a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a8:	440a      	add	r2, r1
 80081aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081b2:	3204      	adds	r2, #4
 80081b4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80081b8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80081bc:	3301      	adds	r3, #1
 80081be:	429a      	cmp	r2, r3
 80081c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081c4:	f47f aed9 	bne.w	8007f7a <forward_conv2d+0x966>
 80081c8:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 80081cc:	e4dc      	b.n	8007b88 <forward_conv2d+0x574>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e7a5      	b.n	800811e <forward_conv2d+0xb0a>
 80081d2:	eef0 6a46 	vmov.f32	s13, s12
 80081d6:	e7be      	b.n	8008156 <forward_conv2d+0xb42>
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081e0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80081e4:	eba8 0303 	sub.w	r3, r8, r3
 80081e8:	e6f6      	b.n	8007fd8 <forward_conv2d+0x9c4>
 80081ea:	eeb0 6a48 	vmov.f32	s12, s16
 80081ee:	e6d0      	b.n	8007f92 <forward_conv2d+0x97e>
 80081f0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80081f4:	68ca      	ldr	r2, [r1, #12]
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	f43f aaca 	beq.w	8007790 <forward_conv2d+0x17c>
 80081fc:	69b3      	ldr	r3, [r6, #24]
 80081fe:	8818      	ldrh	r0, [r3, #0]
 8008200:	2803      	cmp	r0, #3
 8008202:	f240 819f 	bls.w	8008544 <forward_conv2d+0xf30>
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	b32b      	cbz	r3, 8008258 <forward_conv2d+0xc44>
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	b31b      	cbz	r3, 8008258 <forward_conv2d+0xc44>
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	6889      	ldr	r1, [r1, #8]
 8008214:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800821e:	9000      	str	r0, [sp, #0]
 8008220:	462b      	mov	r3, r5
 8008222:	4620      	mov	r0, r4
 8008224:	f7ff f9a6 	bl	8007574 <ai_dict_decompress_f32>
 8008228:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800822c:	2c00      	cmp	r4, #0
 800822e:	bf18      	it	ne
 8008230:	4623      	movne	r3, r4
 8008232:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008236:	f7ff baab 	b.w	8007790 <forward_conv2d+0x17c>
 800823a:	2800      	cmp	r0, #0
 800823c:	f000 8185 	beq.w	800854a <forward_conv2d+0xf36>
 8008240:	6883      	ldr	r3, [r0, #8]
 8008242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008246:	2301      	movs	r3, #1
 8008248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800824c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008250:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008254:	f7ff ba6d 	b.w	8007732 <forward_conv2d+0x11e>
 8008258:	2300      	movs	r3, #0
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	deff      	udf	#255	; 0xff
 800825e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008262:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 8008266:	320a      	adds	r2, #10
 8008268:	f022 0207 	bic.w	r2, r2, #7
 800826c:	ebad 0d02 	sub.w	sp, sp, r2
 8008270:	aa02      	add	r2, sp, #8
 8008272:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008276:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800827a:	2a00      	cmp	r2, #0
 800827c:	f000 814d 	beq.w	800851a <forward_conv2d+0xf06>
 8008280:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008282:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800828c:	657b      	str	r3, [r7, #84]	; 0x54
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008292:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008296:	4413      	add	r3, r2
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
 800829a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082a6:	673b      	str	r3, [r7, #112]	; 0x70
 80082a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082b0:	2300      	movs	r3, #0
 80082b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082b8:	b13b      	cbz	r3, 80082ca <forward_conv2d+0xcb6>
 80082ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80082be:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80082c2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80082c6:	f000 fee9 	bl	800909c <memcpy>
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8135 	beq.w	800853e <forward_conv2d+0xf2a>
 80082d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d6:	ed93 6a00 	vldr	s12, [r3]
 80082da:	3304      	adds	r3, #4
 80082dc:	673b      	str	r3, [r7, #112]	; 0x70
 80082de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 8101 	beq.w	80084ea <forward_conv2d+0xed6>
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082f0:	eb03 0802 	add.w	r8, r3, r2
 80082f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800830a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800830e:	f04f 0b00 	mov.w	fp, #0
 8008312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008316:	2b00      	cmp	r3, #0
 8008318:	f2c0 8108 	blt.w	800852c <forward_conv2d+0xf18>
 800831c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008322:	2300      	movs	r3, #0
 8008324:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8008328:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800832c:	eb02 0c04 	add.w	ip, r2, r4
 8008330:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008334:	4540      	cmp	r0, r8
 8008336:	bf94      	ite	ls
 8008338:	ebc3 0300 	rsbls	r3, r3, r0
 800833c:	ebc3 0308 	rsbhi	r3, r3, r8
 8008340:	eba2 0903 	sub.w	r9, r2, r3
 8008344:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008348:	1ac4      	subs	r4, r0, r3
 800834a:	fb03 f302 	mul.w	r3, r3, r2
 800834e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008352:	2a00      	cmp	r2, #0
 8008354:	f340 80e7 	ble.w	8008526 <forward_conv2d+0xf12>
 8008358:	f023 050f 	bic.w	r5, r3, #15
 800835c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8008360:	1e68      	subs	r0, r5, #1
 8008362:	0900      	lsrs	r0, r0, #4
 8008364:	3001      	adds	r0, #1
 8008366:	fb06 f204 	mul.w	r2, r6, r4
 800836a:	653a      	str	r2, [r7, #80]	; 0x50
 800836c:	0102      	lsls	r2, r0, #4
 800836e:	633a      	str	r2, [r7, #48]	; 0x30
 8008370:	fb06 f909 	mul.w	r9, r6, r9
 8008374:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008378:	eef0 6a46 	vmov.f32	s13, s12
 800837c:	f04f 0e00 	mov.w	lr, #0
 8008380:	4662      	mov	r2, ip
 8008382:	2d00      	cmp	r5, #0
 8008384:	f340 80cd 	ble.w	8008522 <forward_conv2d+0xf0e>
 8008388:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800838c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008390:	2600      	movs	r6, #0
 8008392:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 8008396:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800839a:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800839e:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 80083a2:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80083a6:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80083aa:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80083ae:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 80083b2:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 80083b6:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 80083ba:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 80083be:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80083c2:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80083c6:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80083ca:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80083ce:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80083d2:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80083d6:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80083da:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80083de:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80083e2:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80083e6:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80083ea:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80083ee:	ed54 3a04 	vldr	s7, [r4, #-16]
 80083f2:	ed10 4a04 	vldr	s8, [r0, #-16]
 80083f6:	ed50 4a03 	vldr	s9, [r0, #-12]
 80083fa:	ed14 5a03 	vldr	s10, [r4, #-12]
 80083fe:	ed54 5a02 	vldr	s11, [r4, #-8]
 8008402:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008406:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800840a:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800840e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008412:	3610      	adds	r6, #16
 8008414:	42b5      	cmp	r5, r6
 8008416:	ed14 fa01 	vldr	s30, [r4, #-4]
 800841a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800841e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008422:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008426:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800842a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800842e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008432:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008436:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800843a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800843e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008442:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008446:	eee1 7a82 	vfma.f32	s15, s3, s4
 800844a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800844e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008452:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008456:	eee5 7a87 	vfma.f32	s15, s11, s14
 800845a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800845e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008462:	dc96      	bgt.n	8008392 <forward_conv2d+0xd7e>
 8008464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008466:	4451      	add	r1, sl
 8008468:	4452      	add	r2, sl
 800846a:	4283      	cmp	r3, r0
 800846c:	dd0f      	ble.n	800848e <forward_conv2d+0xe7a>
 800846e:	4604      	mov	r4, r0
 8008470:	468c      	mov	ip, r1
 8008472:	4616      	mov	r6, r2
 8008474:	ecb6 7a01 	vldmia	r6!, {s14}
 8008478:	ecfc 7a01 	vldmia	ip!, {s15}
 800847c:	3401      	adds	r4, #1
 800847e:	42a3      	cmp	r3, r4
 8008480:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008484:	d1f6      	bne.n	8008474 <forward_conv2d+0xe60>
 8008486:	1a18      	subs	r0, r3, r0
 8008488:	0080      	lsls	r0, r0, #2
 800848a:	4402      	add	r2, r0
 800848c:	4401      	add	r1, r0
 800848e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008490:	4402      	add	r2, r0
 8008492:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008496:	f10e 0e01 	add.w	lr, lr, #1
 800849a:	4570      	cmp	r0, lr
 800849c:	4449      	add	r1, r9
 800849e:	f47f af70 	bne.w	8008382 <forward_conv2d+0xd6e>
 80084a2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80084a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80084ac:	edc3 6a00 	vstr	s13, [r3]
 80084b0:	4608      	mov	r0, r1
 80084b2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80084b6:	440b      	add	r3, r1
 80084b8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80084bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084be:	4410      	add	r0, r2
 80084c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80084c6:	4608      	mov	r0, r1
 80084c8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80084cc:	4418      	add	r0, r3
 80084ce:	1acb      	subs	r3, r1, r3
 80084d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80084d8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80084dc:	f10b 0b01 	add.w	fp, fp, #1
 80084e0:	455b      	cmp	r3, fp
 80084e2:	eba8 0802 	sub.w	r8, r8, r2
 80084e6:	f47f af14 	bne.w	8008312 <forward_conv2d+0xcfe>
 80084ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80084ee:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80084f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084f6:	440a      	add	r2, r1
 80084f8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084fc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008500:	3204      	adds	r2, #4
 8008502:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008506:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800850a:	3301      	adds	r3, #1
 800850c:	429a      	cmp	r2, r3
 800850e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008512:	f47f aed0 	bne.w	80082b6 <forward_conv2d+0xca2>
 8008516:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800851a:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800851e:	f7ff bb33 	b.w	8007b88 <forward_conv2d+0x574>
 8008522:	2000      	movs	r0, #0
 8008524:	e7a1      	b.n	800846a <forward_conv2d+0xe56>
 8008526:	eef0 6a46 	vmov.f32	s13, s12
 800852a:	e7ba      	b.n	80084a2 <forward_conv2d+0xe8e>
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008530:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008534:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008538:	eba8 0303 	sub.w	r3, r8, r3
 800853c:	e6f2      	b.n	8008324 <forward_conv2d+0xd10>
 800853e:	eeb0 6a48 	vmov.f32	s12, s16
 8008542:	e6cc      	b.n	80082de <forward_conv2d+0xcca>
 8008544:	2300      	movs	r3, #0
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	deff      	udf	#255	; 0xff
 800854a:	4603      	mov	r3, r0
 800854c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008550:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008554:	2301      	movs	r3, #1
 8008556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800855a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800855e:	f7ff b8e8 	b.w	8007732 <forward_conv2d+0x11e>
 8008562:	2800      	cmp	r0, #0
 8008564:	d0f2      	beq.n	800854c <forward_conv2d+0xf38>
 8008566:	6882      	ldr	r2, [r0, #8]
 8008568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800856c:	2301      	movs	r3, #1
 800856e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008572:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800857a:	f7ff b8da 	b.w	8007732 <forward_conv2d+0x11e>
 800857e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008582:	f7ff b8b7 	b.w	80076f4 <forward_conv2d+0xe0>
 8008586:	3318      	adds	r3, #24
 8008588:	d007      	beq.n	800859a <forward_conv2d+0xf86>
 800858a:	462a      	mov	r2, r5
 800858c:	462c      	mov	r4, r5
 800858e:	462b      	mov	r3, r5
 8008590:	f7ff b86a 	b.w	8007668 <forward_conv2d+0x54>
 8008594:	2300      	movs	r3, #0
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	deff      	udf	#255	; 0xff
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	deff      	udf	#255	; 0xff
 800859e:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80085a2:	f7ff b850 	b.w	8007646 <forward_conv2d+0x32>
 80085a6:	2300      	movs	r3, #0
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	deff      	udf	#255	; 0xff
 80085ac:	6853      	ldr	r3, [r2, #4]
 80085ae:	deff      	udf	#255	; 0xff
 80085b0:	2200      	movs	r2, #0
 80085b2:	f7ff b858 	b.w	8007666 <forward_conv2d+0x52>
 80085b6:	bf00      	nop

080085b8 <forward_dense>:
 80085b8:	6983      	ldr	r3, [r0, #24]
 80085ba:	881a      	ldrh	r2, [r3, #0]
 80085bc:	2a00      	cmp	r2, #0
 80085be:	f000 80b5 	beq.w	800872c <forward_dense+0x174>
 80085c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c6:	ed2d 8b10 	vpush	{d8-d15}
 80085ca:	685f      	ldr	r7, [r3, #4]
 80085cc:	687e      	ldr	r6, [r7, #4]
 80085ce:	b091      	sub	sp, #68	; 0x44
 80085d0:	b106      	cbz	r6, 80085d4 <forward_dense+0x1c>
 80085d2:	6836      	ldr	r6, [r6, #0]
 80085d4:	2a01      	cmp	r2, #1
 80085d6:	f240 80a6 	bls.w	8008726 <forward_dense+0x16e>
 80085da:	693d      	ldr	r5, [r7, #16]
 80085dc:	b105      	cbz	r5, 80085e0 <forward_dense+0x28>
 80085de:	682d      	ldr	r5, [r5, #0]
 80085e0:	2a02      	cmp	r2, #2
 80085e2:	f000 80a5 	beq.w	8008730 <forward_dense+0x178>
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 821b 	beq.w	8008a24 <forward_dense+0x46c>
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	9106      	str	r1, [sp, #24]
 80085f2:	f117 0118 	adds.w	r1, r7, #24
 80085f6:	f000 80c9 	beq.w	800878c <forward_dense+0x1d4>
 80085fa:	8b39      	ldrh	r1, [r7, #24]
 80085fc:	2901      	cmp	r1, #1
 80085fe:	f240 820e 	bls.w	8008a1e <forward_dense+0x466>
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80c4 	beq.w	8008790 <forward_dense+0x1d8>
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	9307      	str	r3, [sp, #28]
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	68ec      	ldr	r4, [r5, #12]
 8008610:	6998      	ldr	r0, [r3, #24]
 8008612:	68f1      	ldr	r1, [r6, #12]
 8008614:	6803      	ldr	r3, [r0, #0]
 8008616:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800861a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800861e:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8008622:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8008626:	fa49 f101 	asr.w	r1, r9, r1
 800862a:	910b      	str	r1, [sp, #44]	; 0x2c
 800862c:	2a03      	cmp	r2, #3
 800862e:	fb0e f10c 	mul.w	r1, lr, ip
 8008632:	6864      	ldr	r4, [r4, #4]
 8008634:	9108      	str	r1, [sp, #32]
 8008636:	f000 81de 	beq.w	80089f6 <forward_dense+0x43e>
 800863a:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800863c:	b117      	cbz	r7, 8008644 <forward_dense+0x8c>
 800863e:	683f      	ldr	r7, [r7, #0]
 8008640:	b107      	cbz	r7, 8008644 <forward_dense+0x8c>
 8008642:	69bf      	ldr	r7, [r7, #24]
 8008644:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008648:	2b04      	cmp	r3, #4
 800864a:	f000 81d7 	beq.w	80089fc <forward_dense+0x444>
 800864e:	2b08      	cmp	r3, #8
 8008650:	f000 81d4 	beq.w	80089fc <forward_dense+0x444>
 8008654:	f04f 0a00 	mov.w	sl, #0
 8008658:	69ab      	ldr	r3, [r5, #24]
 800865a:	69b2      	ldr	r2, [r6, #24]
 800865c:	6899      	ldr	r1, [r3, #8]
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	9104      	str	r1, [sp, #16]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	6897      	ldr	r7, [r2, #8]
 8008666:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800866a:	00a3      	lsls	r3, r4, #2
 800866c:	9309      	str	r3, [sp, #36]	; 0x24
 800866e:	18ce      	adds	r6, r1, r3
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d052      	beq.n	800871c <forward_dense+0x164>
 8008676:	f1a8 0310 	sub.w	r3, r8, #16
 800867a:	091b      	lsrs	r3, r3, #4
 800867c:	3301      	adds	r3, #1
 800867e:	019b      	lsls	r3, r3, #6
 8008680:	930c      	str	r3, [sp, #48]	; 0x30
 8008682:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8008686:	930a      	str	r3, [sp, #40]	; 0x28
 8008688:	2300      	movs	r3, #0
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	eddf aace 	vldr	s21, [pc, #824]	; 80089c8 <forward_dense+0x410>
 8008690:	f008 030f 	and.w	r3, r8, #15
 8008694:	930d      	str	r3, [sp, #52]	; 0x34
 8008696:	9b06      	ldr	r3, [sp, #24]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	689d      	ldr	r5, [r3, #8]
 800869c:	9b07      	ldr	r3, [sp, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 818f 	beq.w	80089c2 <forward_dense+0x40a>
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	689c      	ldr	r4, [r3, #8]
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	f1ba 0f00 	cmp.w	sl, #0
 80086ae:	d071      	beq.n	8008794 <forward_dense+0x1dc>
 80086b0:	42b3      	cmp	r3, r6
 80086b2:	d229      	bcs.n	8008708 <forward_dense+0x150>
 80086b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086b6:	469b      	mov	fp, r3
 80086b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	2a04      	cmp	r2, #4
 80086be:	4633      	mov	r3, r6
 80086c0:	4646      	mov	r6, r8
 80086c2:	4698      	mov	r8, r3
 80086c4:	d037      	beq.n	8008736 <forward_dense+0x17e>
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	f000 8180 	beq.w	80089cc <forward_dense+0x414>
 80086cc:	f8d4 c000 	ldr.w	ip, [r4]
 80086d0:	9803      	ldr	r0, [sp, #12]
 80086d2:	9600      	str	r6, [sp, #0]
 80086d4:	463b      	mov	r3, r7
 80086d6:	4629      	mov	r1, r5
 80086d8:	4652      	mov	r2, sl
 80086da:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80086de:	f7fe fdbd 	bl	800725c <ai_dict8_dot_array_f32>
 80086e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086e4:	f84b 3b04 	str.w	r3, [fp], #4
 80086e8:	45c3      	cmp	fp, r8
 80086ea:	f104 0404 	add.w	r4, r4, #4
 80086ee:	444d      	add	r5, r9
 80086f0:	d3e9      	bcc.n	80086c6 <forward_dense+0x10e>
 80086f2:	4643      	mov	r3, r8
 80086f4:	46b0      	mov	r8, r6
 80086f6:	461e      	mov	r6, r3
 80086f8:	9a04      	ldr	r2, [sp, #16]
 80086fa:	43d3      	mvns	r3, r2
 80086fc:	4433      	add	r3, r6
 80086fe:	f023 0303 	bic.w	r3, r3, #3
 8008702:	3304      	adds	r3, #4
 8008704:	18d3      	adds	r3, r2, r3
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800870a:	9b05      	ldr	r3, [sp, #20]
 800870c:	4417      	add	r7, r2
 800870e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008710:	4416      	add	r6, r2
 8008712:	9a08      	ldr	r2, [sp, #32]
 8008714:	3301      	adds	r3, #1
 8008716:	4293      	cmp	r3, r2
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	d1bc      	bne.n	8008696 <forward_dense+0xde>
 800871c:	b011      	add	sp, #68	; 0x44
 800871e:	ecbd 8b10 	vpop	{d8-d15}
 8008722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008726:	2300      	movs	r3, #0
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	deff      	udf	#255	; 0xff
 800872c:	6853      	ldr	r3, [r2, #4]
 800872e:	deff      	udf	#255	; 0xff
 8008730:	2300      	movs	r3, #0
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	deff      	udf	#255	; 0xff
 8008736:	b1a4      	cbz	r4, 8008762 <forward_dense+0x1aa>
 8008738:	f8d4 c000 	ldr.w	ip, [r4]
 800873c:	9803      	ldr	r0, [sp, #12]
 800873e:	9600      	str	r6, [sp, #0]
 8008740:	463b      	mov	r3, r7
 8008742:	4629      	mov	r1, r5
 8008744:	4652      	mov	r2, sl
 8008746:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800874a:	f7fe fe55 	bl	80073f8 <ai_dict4_dot_array_f32>
 800874e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008750:	f84b 3b04 	str.w	r3, [fp], #4
 8008754:	45c3      	cmp	fp, r8
 8008756:	f104 0404 	add.w	r4, r4, #4
 800875a:	444d      	add	r5, r9
 800875c:	d2c9      	bcs.n	80086f2 <forward_dense+0x13a>
 800875e:	2c00      	cmp	r4, #0
 8008760:	d1ea      	bne.n	8008738 <forward_dense+0x180>
 8008762:	4634      	mov	r4, r6
 8008764:	4646      	mov	r6, r8
 8008766:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800876a:	9400      	str	r4, [sp, #0]
 800876c:	463b      	mov	r3, r7
 800876e:	4629      	mov	r1, r5
 8008770:	4652      	mov	r2, sl
 8008772:	4640      	mov	r0, r8
 8008774:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008778:	f7fe fe3e 	bl	80073f8 <ai_dict4_dot_array_f32>
 800877c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800877e:	f84b 3b04 	str.w	r3, [fp], #4
 8008782:	45b3      	cmp	fp, r6
 8008784:	444d      	add	r5, r9
 8008786:	d3f0      	bcc.n	800876a <forward_dense+0x1b2>
 8008788:	46a0      	mov	r8, r4
 800878a:	e7b5      	b.n	80086f8 <forward_dense+0x140>
 800878c:	9107      	str	r1, [sp, #28]
 800878e:	e73d      	b.n	800860c <forward_dense+0x54>
 8008790:	9307      	str	r3, [sp, #28]
 8008792:	e73b      	b.n	800860c <forward_dense+0x54>
 8008794:	42b3      	cmp	r3, r6
 8008796:	d2b7      	bcs.n	8008708 <forward_dense+0x150>
 8008798:	4618      	mov	r0, r3
 800879a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800879c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80087a0:	eb07 0c03 	add.w	ip, r7, r3
 80087a4:	469e      	mov	lr, r3
 80087a6:	2c00      	cmp	r4, #0
 80087a8:	f000 80ff 	beq.w	80089aa <forward_dense+0x3f2>
 80087ac:	f1b8 0f0f 	cmp.w	r8, #15
 80087b0:	edd4 fa00 	vldr	s31, [r4]
 80087b4:	eddf 6a84 	vldr	s13, [pc, #528]	; 80089c8 <forward_dense+0x410>
 80087b8:	f104 0404 	add.w	r4, r4, #4
 80087bc:	f240 80fd 	bls.w	80089ba <forward_dense+0x402>
 80087c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80087c4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80087c8:	4641      	mov	r1, r8
 80087ca:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80087ce:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80087d2:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80087d6:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80087da:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 80087de:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 80087e2:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 80087e6:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 80087ea:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80087ee:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80087f2:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 80087f6:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 80087fa:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 80087fe:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8008802:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8008806:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800880a:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800880e:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8008812:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8008816:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800881a:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800881e:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8008822:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8008826:	ed12 4a04 	vldr	s8, [r2, #-16]
 800882a:	ed53 4a04 	vldr	s9, [r3, #-16]
 800882e:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008832:	ed52 5a03 	vldr	s11, [r2, #-12]
 8008836:	ed13 6a02 	vldr	s12, [r3, #-8]
 800883a:	ed12 7a02 	vldr	s14, [r2, #-8]
 800883e:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8008842:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8008846:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800884a:	3910      	subs	r1, #16
 800884c:	290f      	cmp	r1, #15
 800884e:	ed52 ea01 	vldr	s29, [r2, #-4]
 8008852:	ed13 ea01 	vldr	s28, [r3, #-4]
 8008856:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800885a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800885e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008862:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008866:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800886a:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800886e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008872:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008876:	eee0 7a20 	vfma.f32	s15, s0, s1
 800887a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800887e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008882:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008886:	eee4 7a24 	vfma.f32	s15, s8, s9
 800888a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800888e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008892:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008896:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800889a:	d896      	bhi.n	80087ca <forward_dense+0x212>
 800889c:	eb05 010e 	add.w	r1, r5, lr
 80088a0:	465b      	mov	r3, fp
 80088a2:	4662      	mov	r2, ip
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d075      	beq.n	8008994 <forward_dense+0x3dc>
 80088a8:	ed91 7a00 	vldr	s14, [r1]
 80088ac:	edd2 7a00 	vldr	s15, [r2]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088b6:	d06d      	beq.n	8008994 <forward_dense+0x3dc>
 80088b8:	ed91 7a01 	vldr	s14, [r1, #4]
 80088bc:	edd2 7a01 	vldr	s15, [r2, #4]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088c6:	d065      	beq.n	8008994 <forward_dense+0x3dc>
 80088c8:	ed91 7a02 	vldr	s14, [r1, #8]
 80088cc:	edd2 7a02 	vldr	s15, [r2, #8]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088d6:	d05d      	beq.n	8008994 <forward_dense+0x3dc>
 80088d8:	ed91 7a03 	vldr	s14, [r1, #12]
 80088dc:	edd2 7a03 	vldr	s15, [r2, #12]
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088e6:	d055      	beq.n	8008994 <forward_dense+0x3dc>
 80088e8:	ed91 7a04 	vldr	s14, [r1, #16]
 80088ec:	edd2 7a04 	vldr	s15, [r2, #16]
 80088f0:	2b05      	cmp	r3, #5
 80088f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088f6:	d04d      	beq.n	8008994 <forward_dense+0x3dc>
 80088f8:	ed91 7a05 	vldr	s14, [r1, #20]
 80088fc:	edd2 7a05 	vldr	s15, [r2, #20]
 8008900:	2b06      	cmp	r3, #6
 8008902:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008906:	d045      	beq.n	8008994 <forward_dense+0x3dc>
 8008908:	ed91 7a06 	vldr	s14, [r1, #24]
 800890c:	edd2 7a06 	vldr	s15, [r2, #24]
 8008910:	2b07      	cmp	r3, #7
 8008912:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008916:	d03d      	beq.n	8008994 <forward_dense+0x3dc>
 8008918:	ed91 7a07 	vldr	s14, [r1, #28]
 800891c:	edd2 7a07 	vldr	s15, [r2, #28]
 8008920:	2b08      	cmp	r3, #8
 8008922:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008926:	d035      	beq.n	8008994 <forward_dense+0x3dc>
 8008928:	ed91 7a08 	vldr	s14, [r1, #32]
 800892c:	edd2 7a08 	vldr	s15, [r2, #32]
 8008930:	2b09      	cmp	r3, #9
 8008932:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008936:	d02d      	beq.n	8008994 <forward_dense+0x3dc>
 8008938:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800893c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008940:	2b0a      	cmp	r3, #10
 8008942:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008946:	d025      	beq.n	8008994 <forward_dense+0x3dc>
 8008948:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800894c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008950:	2b0b      	cmp	r3, #11
 8008952:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008956:	d01d      	beq.n	8008994 <forward_dense+0x3dc>
 8008958:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800895c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008960:	2b0c      	cmp	r3, #12
 8008962:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008966:	d015      	beq.n	8008994 <forward_dense+0x3dc>
 8008968:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800896c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008970:	2b0d      	cmp	r3, #13
 8008972:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008976:	d00d      	beq.n	8008994 <forward_dense+0x3dc>
 8008978:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800897c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008980:	2b0e      	cmp	r3, #14
 8008982:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008986:	d005      	beq.n	8008994 <forward_dense+0x3dc>
 8008988:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800898c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008990:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008994:	444d      	add	r5, r9
 8008996:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800899a:	ece0 6a01 	vstmia	r0!, {s13}
 800899e:	42b0      	cmp	r0, r6
 80089a0:	f4bf aeaa 	bcs.w	80086f8 <forward_dense+0x140>
 80089a4:	2c00      	cmp	r4, #0
 80089a6:	f47f af01 	bne.w	80087ac <forward_dense+0x1f4>
 80089aa:	f1b8 0f0f 	cmp.w	r8, #15
 80089ae:	eef0 fa6a 	vmov.f32	s31, s21
 80089b2:	eddf 6a05 	vldr	s13, [pc, #20]	; 80089c8 <forward_dense+0x410>
 80089b6:	f63f af03 	bhi.w	80087c0 <forward_dense+0x208>
 80089ba:	4643      	mov	r3, r8
 80089bc:	4629      	mov	r1, r5
 80089be:	463a      	mov	r2, r7
 80089c0:	e770      	b.n	80088a4 <forward_dense+0x2ec>
 80089c2:	461c      	mov	r4, r3
 80089c4:	e670      	b.n	80086a8 <forward_dense+0xf0>
 80089c6:	bf00      	nop
 80089c8:	00000000 	.word	0x00000000
 80089cc:	4634      	mov	r4, r6
 80089ce:	4646      	mov	r6, r8
 80089d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089d4:	9400      	str	r4, [sp, #0]
 80089d6:	463b      	mov	r3, r7
 80089d8:	4629      	mov	r1, r5
 80089da:	4652      	mov	r2, sl
 80089dc:	4640      	mov	r0, r8
 80089de:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80089e2:	f7fe fc3b 	bl	800725c <ai_dict8_dot_array_f32>
 80089e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089e8:	f84b 3b04 	str.w	r3, [fp], #4
 80089ec:	455e      	cmp	r6, fp
 80089ee:	444d      	add	r5, r9
 80089f0:	d8f0      	bhi.n	80089d4 <forward_dense+0x41c>
 80089f2:	46a0      	mov	r8, r4
 80089f4:	e680      	b.n	80086f8 <forward_dense+0x140>
 80089f6:	2300      	movs	r3, #0
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	deff      	udf	#255	; 0xff
 80089fc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008a00:	2f00      	cmp	r7, #0
 8008a02:	f43f ae29 	beq.w	8008658 <forward_dense+0xa0>
 8008a06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a0a:	f000 faf3 	bl	8008ff4 <ai_array_get_byte_size>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4602      	mov	r2, r0
 8008a12:	4651      	mov	r1, sl
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fb41 	bl	800909c <memcpy>
 8008a1a:	4682      	mov	sl, r0
 8008a1c:	e61c      	b.n	8008658 <forward_dense+0xa0>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9307      	str	r3, [sp, #28]
 8008a22:	e5f3      	b.n	800860c <forward_dense+0x54>
 8008a24:	9306      	str	r3, [sp, #24]
 8008a26:	e5e4      	b.n	80085f2 <forward_dense+0x3a>

08008a28 <nl_func_relu_array_f32>:
 8008a28:	b410      	push	{r4}
 8008a2a:	698c      	ldr	r4, [r1, #24]
 8008a2c:	6981      	ldr	r1, [r0, #24]
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	6889      	ldr	r1, [r1, #8]
 8008a32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008a36:	3a01      	subs	r2, #1
 8008a38:	0092      	lsls	r2, r2, #2
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	d216      	bcs.n	8008a6c <nl_func_relu_array_f32+0x44>
 8008a3e:	3204      	adds	r2, #4
 8008a40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008a74 <nl_func_relu_array_f32+0x4c>
 8008a44:	4411      	add	r1, r2
 8008a46:	3304      	adds	r3, #4
 8008a48:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	bfb8      	it	lt
 8008a56:	eef0 7a47 	vmovlt.f32	s15, s14
 8008a5a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008a5e:	68a0      	ldr	r0, [r4, #8]
 8008a60:	f1a3 0208 	sub.w	r2, r3, #8
 8008a64:	4290      	cmp	r0, r2
 8008a66:	f1a3 0304 	sub.w	r3, r3, #4
 8008a6a:	d9ed      	bls.n	8008a48 <nl_func_relu_array_f32+0x20>
 8008a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	00000000 	.word	0x00000000

08008a78 <nl_func_sm_array_f32>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	ed2d 8b04 	vpush	{d8-d9}
 8008a80:	b089      	sub	sp, #36	; 0x24
 8008a82:	698f      	ldr	r7, [r1, #24]
 8008a84:	6984      	ldr	r4, [r0, #24]
 8008a86:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8008a8a:	68bd      	ldr	r5, [r7, #8]
 8008a8c:	9402      	str	r4, [sp, #8]
 8008a8e:	4626      	mov	r6, r4
 8008a90:	4696      	mov	lr, r2
 8008a92:	eba2 020c 	sub.w	r2, r2, ip
 8008a96:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8008a9a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	68b6      	ldr	r6, [r6, #8]
 8008aa0:	ebae 0e04 	sub.w	lr, lr, r4
 8008aa4:	4295      	cmp	r5, r2
 8008aa6:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8008aaa:	d354      	bcc.n	8008b56 <nl_func_sm_array_f32+0xde>
 8008aac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008ab0:	f1cc 0200 	rsb	r2, ip, #0
 8008ab4:	00a4      	lsls	r4, r4, #2
 8008ab6:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	9204      	str	r2, [sp, #16]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4262      	negs	r2, r4
 8008ac2:	9205      	str	r2, [sp, #20]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	9a07      	ldr	r2, [sp, #28]
 8008ace:	60bd      	str	r5, [r7, #8]
 8008ad0:	609e      	str	r6, [r3, #8]
 8008ad2:	9b06      	ldr	r3, [sp, #24]
 8008ad4:	6992      	ldr	r2, [r2, #24]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	6894      	ldr	r4, [r2, #8]
 8008ada:	9a03      	ldr	r2, [sp, #12]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2a01      	cmp	r2, #1
 8008ae0:	ed93 8a00 	vldr	s16, [r3]
 8008ae4:	d940      	bls.n	8008b68 <nl_func_sm_array_f32+0xf0>
 8008ae6:	9901      	ldr	r1, [sp, #4]
 8008ae8:	1d1a      	adds	r2, r3, #4
 8008aea:	eb03 0b01 	add.w	fp, r3, r1
 8008aee:	ecf2 7a01 	vldmia	r2!, {s15}
 8008af2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afa:	bfb8      	it	lt
 8008afc:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008b00:	4593      	cmp	fp, r2
 8008b02:	d1f4      	bne.n	8008aee <nl_func_sm_array_f32+0x76>
 8008b04:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8008b74 <nl_func_sm_array_f32+0xfc>
 8008b08:	469a      	mov	sl, r3
 8008b0a:	46a1      	mov	r9, r4
 8008b0c:	46a0      	mov	r8, r4
 8008b0e:	ecba 0a01 	vldmia	sl!, {s0}
 8008b12:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008b16:	f003 f807 	bl	800bb28 <expf>
 8008b1a:	45d3      	cmp	fp, sl
 8008b1c:	eca8 0a01 	vstmia	r8!, {s0}
 8008b20:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008b24:	d1f3      	bne.n	8008b0e <nl_func_sm_array_f32+0x96>
 8008b26:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2e:	d00b      	beq.n	8008b48 <nl_func_sm_array_f32+0xd0>
 8008b30:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	441c      	add	r4, r3
 8008b38:	edd9 7a00 	vldr	s15, [r9]
 8008b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b40:	ece9 7a01 	vstmia	r9!, {s15}
 8008b44:	454c      	cmp	r4, r9
 8008b46:	d1f7      	bne.n	8008b38 <nl_func_sm_array_f32+0xc0>
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	441d      	add	r5, r3
 8008b4e:	9b05      	ldr	r3, [sp, #20]
 8008b50:	42aa      	cmp	r2, r5
 8008b52:	441e      	add	r6, r3
 8008b54:	d9b9      	bls.n	8008aca <nl_func_sm_array_f32+0x52>
 8008b56:	60ba      	str	r2, [r7, #8]
 8008b58:	9a02      	ldr	r2, [sp, #8]
 8008b5a:	68d3      	ldr	r3, [r2, #12]
 8008b5c:	6093      	str	r3, [r2, #8]
 8008b5e:	b009      	add	sp, #36	; 0x24
 8008b60:	ecbd 8b04 	vpop	{d8-d9}
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d0ed      	beq.n	8008b48 <nl_func_sm_array_f32+0xd0>
 8008b6c:	9a01      	ldr	r2, [sp, #4]
 8008b6e:	eb03 0b02 	add.w	fp, r3, r2
 8008b72:	e7c7      	b.n	8008b04 <nl_func_sm_array_f32+0x8c>
 8008b74:	00000000 	.word	0x00000000

08008b78 <nl_func_relu_generic_array_f32>:
 8008b78:	b430      	push	{r4, r5}
 8008b7a:	6989      	ldr	r1, [r1, #24]
 8008b7c:	6980      	ldr	r0, [r0, #24]
 8008b7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8008b82:	688c      	ldr	r4, [r1, #8]
 8008b84:	6880      	ldr	r0, [r0, #8]
 8008b86:	ed93 7a00 	vldr	s14, [r3]
 8008b8a:	ed93 6a01 	vldr	s12, [r3, #4]
 8008b8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008b92:	3a01      	subs	r2, #1
 8008b94:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9e:	4410      	add	r0, r2
 8008ba0:	4422      	add	r2, r4
 8008ba2:	d421      	bmi.n	8008be8 <nl_func_relu_generic_array_f32+0x70>
 8008ba4:	4294      	cmp	r4, r2
 8008ba6:	d83d      	bhi.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008ba8:	1d13      	adds	r3, r2, #4
 8008baa:	1d02      	adds	r2, r0, #4
 8008bac:	e010      	b.n	8008bd0 <nl_func_relu_generic_array_f32+0x58>
 8008bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008bba:	d501      	bpl.n	8008bc0 <nl_func_relu_generic_array_f32+0x48>
 8008bbc:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008bc0:	ed62 7a01 	vstmdb	r2!, {s15}
 8008bc4:	6888      	ldr	r0, [r1, #8]
 8008bc6:	f1a3 0408 	sub.w	r4, r3, #8
 8008bca:	4284      	cmp	r4, r0
 8008bcc:	462b      	mov	r3, r5
 8008bce:	d329      	bcc.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008bd0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008bd4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bdc:	f1a3 0504 	sub.w	r5, r3, #4
 8008be0:	d4e5      	bmi.n	8008bae <nl_func_relu_generic_array_f32+0x36>
 8008be2:	eef0 7a66 	vmov.f32	s15, s13
 8008be6:	e7eb      	b.n	8008bc0 <nl_func_relu_generic_array_f32+0x48>
 8008be8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf0:	d01a      	beq.n	8008c28 <nl_func_relu_generic_array_f32+0xb0>
 8008bf2:	4294      	cmp	r4, r2
 8008bf4:	d816      	bhi.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008bf6:	1d13      	adds	r3, r2, #4
 8008bf8:	1d02      	adds	r2, r0, #4
 8008bfa:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008bfe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c06:	f1a3 0408 	sub.w	r4, r3, #8
 8008c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0e:	f1a3 0004 	sub.w	r0, r3, #4
 8008c12:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008c16:	4623      	mov	r3, r4
 8008c18:	d51e      	bpl.n	8008c58 <nl_func_relu_generic_array_f32+0xe0>
 8008c1a:	ed62 6a01 	vstmdb	r2!, {s13}
 8008c1e:	688b      	ldr	r3, [r1, #8]
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	d91e      	bls.n	8008c62 <nl_func_relu_generic_array_f32+0xea>
 8008c24:	bc30      	pop	{r4, r5}
 8008c26:	4770      	bx	lr
 8008c28:	4294      	cmp	r4, r2
 8008c2a:	d8fb      	bhi.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008c2c:	1d13      	adds	r3, r2, #4
 8008c2e:	2500      	movs	r5, #0
 8008c30:	1d02      	adds	r2, r0, #4
 8008c32:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c3a:	f1a3 0408 	sub.w	r4, r3, #8
 8008c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c42:	f1a3 0004 	sub.w	r0, r3, #4
 8008c46:	4623      	mov	r3, r4
 8008c48:	db0d      	blt.n	8008c66 <nl_func_relu_generic_array_f32+0xee>
 8008c4a:	ed62 7a01 	vstmdb	r2!, {s15}
 8008c4e:	688b      	ldr	r3, [r1, #8]
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d8e7      	bhi.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008c54:	4603      	mov	r3, r0
 8008c56:	e7ec      	b.n	8008c32 <nl_func_relu_generic_array_f32+0xba>
 8008c58:	ed62 7a01 	vstmdb	r2!, {s15}
 8008c5c:	688c      	ldr	r4, [r1, #8]
 8008c5e:	429c      	cmp	r4, r3
 8008c60:	d8e0      	bhi.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008c62:	4603      	mov	r3, r0
 8008c64:	e7c9      	b.n	8008bfa <nl_func_relu_generic_array_f32+0x82>
 8008c66:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008c6a:	688c      	ldr	r4, [r1, #8]
 8008c6c:	429c      	cmp	r4, r3
 8008c6e:	d8d9      	bhi.n	8008c24 <nl_func_relu_generic_array_f32+0xac>
 8008c70:	4603      	mov	r3, r0
 8008c72:	e7de      	b.n	8008c32 <nl_func_relu_generic_array_f32+0xba>

08008c74 <forward_relu>:
 8008c74:	6982      	ldr	r2, [r0, #24]
 8008c76:	8813      	ldrh	r3, [r2, #0]
 8008c78:	b333      	cbz	r3, 8008cc8 <forward_relu+0x54>
 8008c7a:	6852      	ldr	r2, [r2, #4]
 8008c7c:	6851      	ldr	r1, [r2, #4]
 8008c7e:	b101      	cbz	r1, 8008c82 <forward_relu+0xe>
 8008c80:	6809      	ldr	r1, [r1, #0]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d91d      	bls.n	8008cc2 <forward_relu+0x4e>
 8008c86:	b4f0      	push	{r4, r5, r6, r7}
 8008c88:	6917      	ldr	r7, [r2, #16]
 8008c8a:	b107      	cbz	r7, 8008c8e <forward_relu+0x1a>
 8008c8c:	683f      	ldr	r7, [r7, #0]
 8008c8e:	688c      	ldr	r4, [r1, #8]
 8008c90:	69c3      	ldr	r3, [r0, #28]
 8008c92:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d044      	beq.n	8008d24 <forward_relu+0xb0>
 8008c9a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8008c9e:	2d01      	cmp	r5, #1
 8008ca0:	d014      	beq.n	8008ccc <forward_relu+0x58>
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	d074      	beq.n	8008d90 <forward_relu+0x11c>
 8008ca6:	68ce      	ldr	r6, [r1, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008cae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008cb2:	42a6      	cmp	r6, r4
 8008cb4:	fb05 f202 	mul.w	r2, r5, r2
 8008cb8:	d1f9      	bne.n	8008cae <forward_relu+0x3a>
 8008cba:	4638      	mov	r0, r7
 8008cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8008cbe:	f7ff bf5b 	b.w	8008b78 <nl_func_relu_generic_array_f32>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	deff      	udf	#255	; 0xff
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	deff      	udf	#255	; 0xff
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	6988      	ldr	r0, [r1, #24]
 8008cd0:	6896      	ldr	r6, [r2, #8]
 8008cd2:	ed93 7a00 	vldr	s14, [r3]
 8008cd6:	6882      	ldr	r2, [r0, #8]
 8008cd8:	b184      	cbz	r4, 8008cfc <forward_relu+0x88>
 8008cda:	68cf      	ldr	r7, [r1, #12]
 8008cdc:	462b      	mov	r3, r5
 8008cde:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8008ce2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008ce6:	42a7      	cmp	r7, r4
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	d1f9      	bne.n	8008ce2 <forward_relu+0x6e>
 8008cee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	18d2      	adds	r2, r2, r3
 8008cf8:	441e      	add	r6, r3
 8008cfa:	d23f      	bcs.n	8008d7c <forward_relu+0x108>
 8008cfc:	1d13      	adds	r3, r2, #4
 8008cfe:	2500      	movs	r5, #0
 8008d00:	1d32      	adds	r2, r6, #4
 8008d02:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0e:	f1a3 0104 	sub.w	r1, r3, #4
 8008d12:	d835      	bhi.n	8008d80 <forward_relu+0x10c>
 8008d14:	ed62 7a01 	vstmdb	r2!, {s15}
 8008d18:	6884      	ldr	r4, [r0, #8]
 8008d1a:	3b08      	subs	r3, #8
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	d82d      	bhi.n	8008d7c <forward_relu+0x108>
 8008d20:	460b      	mov	r3, r1
 8008d22:	e7ee      	b.n	8008d02 <forward_relu+0x8e>
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	698d      	ldr	r5, [r1, #24]
 8008d28:	6898      	ldr	r0, [r3, #8]
 8008d2a:	68ab      	ldr	r3, [r5, #8]
 8008d2c:	b184      	cbz	r4, 8008d50 <forward_relu+0xdc>
 8008d2e:	68ce      	ldr	r6, [r1, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008d36:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008d3a:	42a6      	cmp	r6, r4
 8008d3c:	fb01 f202 	mul.w	r2, r1, r2
 8008d40:	d1f9      	bne.n	8008d36 <forward_relu+0xc2>
 8008d42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008d46:	3a01      	subs	r2, #1
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	189b      	adds	r3, r3, r2
 8008d4c:	4410      	add	r0, r2
 8008d4e:	d215      	bcs.n	8008d7c <forward_relu+0x108>
 8008d50:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008d94 <forward_relu+0x120>
 8008d54:	3304      	adds	r3, #4
 8008d56:	1d01      	adds	r1, r0, #4
 8008d58:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d64:	bfb8      	it	lt
 8008d66:	eef0 7a47 	vmovlt.f32	s15, s14
 8008d6a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008d6e:	68a8      	ldr	r0, [r5, #8]
 8008d70:	f1a3 0208 	sub.w	r2, r3, #8
 8008d74:	4290      	cmp	r0, r2
 8008d76:	f1a3 0304 	sub.w	r3, r3, #4
 8008d7a:	d9ed      	bls.n	8008d58 <forward_relu+0xe4>
 8008d7c:	bcf0      	pop	{r4, r5, r6, r7}
 8008d7e:	4770      	bx	lr
 8008d80:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008d84:	6884      	ldr	r4, [r0, #8]
 8008d86:	3b08      	subs	r3, #8
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	d8f7      	bhi.n	8008d7c <forward_relu+0x108>
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	e7b8      	b.n	8008d02 <forward_relu+0x8e>
 8008d90:	2201      	movs	r2, #1
 8008d92:	e792      	b.n	8008cba <forward_relu+0x46>
 8008d94:	00000000 	.word	0x00000000

08008d98 <forward_sm>:
 8008d98:	6982      	ldr	r2, [r0, #24]
 8008d9a:	8813      	ldrh	r3, [r2, #0]
 8008d9c:	b32b      	cbz	r3, 8008dea <forward_sm+0x52>
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	6851      	ldr	r1, [r2, #4]
 8008da2:	b101      	cbz	r1, 8008da6 <forward_sm+0xe>
 8008da4:	6809      	ldr	r1, [r1, #0]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d91c      	bls.n	8008de4 <forward_sm+0x4c>
 8008daa:	6913      	ldr	r3, [r2, #16]
 8008dac:	b1c3      	cbz	r3, 8008de0 <forward_sm+0x48>
 8008dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	688c      	ldr	r4, [r1, #8]
 8008db4:	68c3      	ldr	r3, [r0, #12]
 8008db6:	68ce      	ldr	r6, [r1, #12]
 8008db8:	685f      	ldr	r7, [r3, #4]
 8008dba:	6873      	ldr	r3, [r6, #4]
 8008dbc:	0a24      	lsrs	r4, r4, #8
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	d015      	beq.n	8008dee <forward_sm+0x56>
 8008dc2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	fb05 f202 	mul.w	r2, r5, r2
 8008dd2:	d1f9      	bne.n	8008dc8 <forward_sm+0x30>
 8008dd4:	e9cd 3700 	strd	r3, r7, [sp]
 8008dd8:	f7ff fe4e 	bl	8008a78 <nl_func_sm_array_f32>
 8008ddc:	b003      	add	sp, #12
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	deff      	udf	#255	; 0xff
 8008de4:	2300      	movs	r3, #0
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	deff      	udf	#255	; 0xff
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	deff      	udf	#255	; 0xff
 8008dee:	2201      	movs	r2, #1
 8008df0:	e9cd 3700 	strd	r3, r7, [sp]
 8008df4:	f7ff fe40 	bl	8008a78 <nl_func_sm_array_f32>
 8008df8:	b003      	add	sp, #12
 8008dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dfc <ai_check_custom_types>:
 8008dfc:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <ai_check_custom_types+0x50>)
 8008dfe:	b082      	sub	sp, #8
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	b118      	cbz	r0, 8008e0e <ai_check_custom_types+0x12>
 8008e06:	7803      	ldrb	r3, [r0, #0]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d002      	beq.n	8008e12 <ai_check_custom_types+0x16>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	b002      	add	sp, #8
 8008e10:	4770      	bx	lr
 8008e12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d004      	beq.n	8008e24 <ai_check_custom_types+0x28>
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	f080 0001 	eor.w	r0, r0, #1
 8008e20:	b002      	add	sp, #8
 8008e22:	4770      	bx	lr
 8008e24:	7842      	ldrb	r2, [r0, #1]
 8008e26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	f100 0001 	add.w	r0, r0, #1
 8008e30:	d1f3      	bne.n	8008e1a <ai_check_custom_types+0x1e>
 8008e32:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008e36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d1ed      	bne.n	8008e1a <ai_check_custom_types+0x1e>
 8008e3e:	7842      	ldrb	r2, [r0, #1]
 8008e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d1e8      	bne.n	8008e1a <ai_check_custom_types+0x1e>
 8008e48:	2000      	movs	r0, #0
 8008e4a:	e7e7      	b.n	8008e1c <ai_check_custom_types+0x20>
 8008e4c:	0800be7c 	.word	0x0800be7c

08008e50 <ai_layers_init_all>:
 8008e50:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008e52:	b17a      	cbz	r2, 8008e74 <ai_layers_init_all+0x24>
 8008e54:	6913      	ldr	r3, [r2, #16]
 8008e56:	60d0      	str	r0, [r2, #12]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	f04f 0201 	mov.w	r2, #1
 8008e5e:	d009      	beq.n	8008e74 <ai_layers_init_all+0x24>
 8008e60:	b143      	cbz	r3, 8008e74 <ai_layers_init_all+0x24>
 8008e62:	6919      	ldr	r1, [r3, #16]
 8008e64:	60d8      	str	r0, [r3, #12]
 8008e66:	4299      	cmp	r1, r3
 8008e68:	f102 0201 	add.w	r2, r2, #1
 8008e6c:	d002      	beq.n	8008e74 <ai_layers_init_all+0x24>
 8008e6e:	460b      	mov	r3, r1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1f6      	bne.n	8008e62 <ai_layers_init_all+0x12>
 8008e74:	4610      	mov	r0, r2
 8008e76:	4770      	bx	lr

08008e78 <ai_layers_post_init_all>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008e7c:	b18c      	cbz	r4, 8008ea2 <ai_layers_post_init_all+0x2a>
 8008e7e:	2500      	movs	r5, #0
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	f013 0f01 	tst.w	r3, #1
 8008e86:	4620      	mov	r0, r4
 8008e88:	d003      	beq.n	8008e92 <ai_layers_post_init_all+0x1a>
 8008e8a:	6a23      	ldr	r3, [r4, #32]
 8008e8c:	b10b      	cbz	r3, 8008e92 <ai_layers_post_init_all+0x1a>
 8008e8e:	4798      	blx	r3
 8008e90:	3501      	adds	r5, #1
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d002      	beq.n	8008e9e <ai_layers_post_init_all+0x26>
 8008e98:	461c      	mov	r4, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1f0      	bne.n	8008e80 <ai_layers_post_init_all+0x8>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	4625      	mov	r5, r4
 8008ea4:	e7fb      	b.n	8008e9e <ai_layers_post_init_all+0x26>
 8008ea6:	bf00      	nop

08008ea8 <ai_layers_forward_all>:
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8008eae:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	2f00      	cmp	r7, #0
 8008eb4:	d02c      	beq.n	8008f10 <ai_layers_forward_all+0x68>
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	d03f      	beq.n	8008f3a <ai_layers_forward_all+0x92>
 8008eba:	6385      	str	r5, [r0, #56]	; 0x38
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	47b8      	blx	r7
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ec8:	46b0      	mov	r8, r6
 8008eca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ecc:	2002      	movs	r0, #2
 8008ece:	47b8      	blx	r7
 8008ed0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008ed2:	696b      	ldr	r3, [r5, #20]
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	4798      	blx	r3
 8008ed8:	692b      	ldr	r3, [r5, #16]
 8008eda:	429d      	cmp	r5, r3
 8008edc:	f04f 0003 	mov.w	r0, #3
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	d009      	beq.n	8008ef8 <ai_layers_forward_all+0x50>
 8008ee4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ee8:	47b8      	blx	r7
 8008eea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008eec:	3601      	adds	r6, #1
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d1eb      	bne.n	8008eca <ai_layers_forward_all+0x22>
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef8:	2100      	movs	r1, #0
 8008efa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8008efe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f00:	47b8      	blx	r7
 8008f02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f04:	3601      	adds	r6, #1
 8008f06:	2900      	cmp	r1, #0
 8008f08:	d1df      	bne.n	8008eca <ai_layers_forward_all+0x22>
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f10:	b19d      	cbz	r5, 8008f3a <ai_layers_forward_all+0x92>
 8008f12:	6385      	str	r5, [r0, #56]	; 0x38
 8008f14:	463e      	mov	r6, r7
 8008f16:	696b      	ldr	r3, [r5, #20]
 8008f18:	4628      	mov	r0, r5
 8008f1a:	4798      	blx	r3
 8008f1c:	692b      	ldr	r3, [r5, #16]
 8008f1e:	42ab      	cmp	r3, r5
 8008f20:	f106 0601 	add.w	r6, r6, #1
 8008f24:	d004      	beq.n	8008f30 <ai_layers_forward_all+0x88>
 8008f26:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f28:	461d      	mov	r5, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f3      	bne.n	8008f16 <ai_layers_forward_all+0x6e>
 8008f2e:	e7e0      	b.n	8008ef2 <ai_layers_forward_all+0x4a>
 8008f30:	2300      	movs	r3, #0
 8008f32:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f34:	4630      	mov	r0, r6
 8008f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3a:	462e      	mov	r6, r5
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f42:	bf00      	nop

08008f44 <ai_array_to_buffer_fmt>:
 8008f44:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d029      	beq.n	8008fa0 <ai_array_to_buffer_fmt+0x5c>
 8008f4c:	4a22      	ldr	r2, [pc, #136]	; (8008fd8 <ai_array_to_buffer_fmt+0x94>)
 8008f4e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d010      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f56:	dd13      	ble.n	8008f80 <ai_array_to_buffer_fmt+0x3c>
 8008f58:	4a20      	ldr	r2, [pc, #128]	; (8008fdc <ai_array_to_buffer_fmt+0x98>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00c      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f5e:	dc27      	bgt.n	8008fb0 <ai_array_to_buffer_fmt+0x6c>
 8008f60:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f68:	3207      	adds	r2, #7
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d004      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f6e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d000      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008f7c:	4318      	orrs	r0, r3
 8008f7e:	4770      	bx	lr
 8008f80:	4a17      	ldr	r2, [pc, #92]	; (8008fe0 <ai_array_to_buffer_fmt+0x9c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d0f8      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f86:	dd1e      	ble.n	8008fc6 <ai_array_to_buffer_fmt+0x82>
 8008f88:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <ai_array_to_buffer_fmt+0xa0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d0f4      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f8e:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d0f0      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008f96:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d1eb      	bne.n	8008f76 <ai_array_to_buffer_fmt+0x32>
 8008f9e:	e7eb      	b.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <ai_array_to_buffer_fmt+0xa4>)
 8008fa2:	4003      	ands	r3, r0
 8008fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fa8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008fac:	4318      	orrs	r0, r3
 8008fae:	4770      	bx	lr
 8008fb0:	4a0e      	ldr	r2, [pc, #56]	; (8008fec <ai_array_to_buffer_fmt+0xa8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d0e0      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008fb6:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d0dc      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008fbe:	4a0c      	ldr	r2, [pc, #48]	; (8008ff0 <ai_array_to_buffer_fmt+0xac>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d1d8      	bne.n	8008f76 <ai_array_to_buffer_fmt+0x32>
 8008fc4:	e7d8      	b.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008fc6:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d0d4      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d0d0      	beq.n	8008f78 <ai_array_to_buffer_fmt+0x34>
 8008fd6:	e7ce      	b.n	8008f76 <ai_array_to_buffer_fmt+0x32>
 8008fd8:	00060440 	.word	0x00060440
 8008fdc:	00840840 	.word	0x00840840
 8008fe0:	00040447 	.word	0x00040447
 8008fe4:	0004084f 	.word	0x0004084f
 8008fe8:	00803fff 	.word	0x00803fff
 8008fec:	00841040 	.word	0x00841040
 8008ff0:	0084084f 	.word	0x0084084f

08008ff4 <ai_array_get_byte_size>:
 8008ff4:	b1c1      	cbz	r1, 8009028 <ai_array_get_byte_size+0x34>
 8008ff6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8008ffa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008ffe:	4413      	add	r3, r2
 8009000:	fb01 f103 	mul.w	r1, r1, r3
 8009004:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009008:	3107      	adds	r1, #7
 800900a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800900e:	f021 0107 	bic.w	r1, r1, #7
 8009012:	2804      	cmp	r0, #4
 8009014:	fa21 f102 	lsr.w	r1, r1, r2
 8009018:	d008      	beq.n	800902c <ai_array_get_byte_size+0x38>
 800901a:	2808      	cmp	r0, #8
 800901c:	d101      	bne.n	8009022 <ai_array_get_byte_size+0x2e>
 800901e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009022:	3107      	adds	r1, #7
 8009024:	08c8      	lsrs	r0, r1, #3
 8009026:	4770      	bx	lr
 8009028:	4608      	mov	r0, r1
 800902a:	4770      	bx	lr
 800902c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009030:	3107      	adds	r1, #7
 8009032:	08c8      	lsrs	r0, r1, #3
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop

08009038 <__errno>:
 8009038:	4b01      	ldr	r3, [pc, #4]	; (8009040 <__errno+0x8>)
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	200007dc 	.word	0x200007dc

08009044 <__libc_init_array>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	4d0d      	ldr	r5, [pc, #52]	; (800907c <__libc_init_array+0x38>)
 8009048:	4c0d      	ldr	r4, [pc, #52]	; (8009080 <__libc_init_array+0x3c>)
 800904a:	1b64      	subs	r4, r4, r5
 800904c:	10a4      	asrs	r4, r4, #2
 800904e:	2600      	movs	r6, #0
 8009050:	42a6      	cmp	r6, r4
 8009052:	d109      	bne.n	8009068 <__libc_init_array+0x24>
 8009054:	4d0b      	ldr	r5, [pc, #44]	; (8009084 <__libc_init_array+0x40>)
 8009056:	4c0c      	ldr	r4, [pc, #48]	; (8009088 <__libc_init_array+0x44>)
 8009058:	f002 fec0 	bl	800bddc <_init>
 800905c:	1b64      	subs	r4, r4, r5
 800905e:	10a4      	asrs	r4, r4, #2
 8009060:	2600      	movs	r6, #0
 8009062:	42a6      	cmp	r6, r4
 8009064:	d105      	bne.n	8009072 <__libc_init_array+0x2e>
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	f855 3b04 	ldr.w	r3, [r5], #4
 800906c:	4798      	blx	r3
 800906e:	3601      	adds	r6, #1
 8009070:	e7ee      	b.n	8009050 <__libc_init_array+0xc>
 8009072:	f855 3b04 	ldr.w	r3, [r5], #4
 8009076:	4798      	blx	r3
 8009078:	3601      	adds	r6, #1
 800907a:	e7f2      	b.n	8009062 <__libc_init_array+0x1e>
 800907c:	08017fbc 	.word	0x08017fbc
 8009080:	08017fbc 	.word	0x08017fbc
 8009084:	08017fbc 	.word	0x08017fbc
 8009088:	08017fc0 	.word	0x08017fc0

0800908c <malloc>:
 800908c:	4b02      	ldr	r3, [pc, #8]	; (8009098 <malloc+0xc>)
 800908e:	4601      	mov	r1, r0
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	f000 b869 	b.w	8009168 <_malloc_r>
 8009096:	bf00      	nop
 8009098:	200007dc 	.word	0x200007dc

0800909c <memcpy>:
 800909c:	440a      	add	r2, r1
 800909e:	4291      	cmp	r1, r2
 80090a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090a4:	d100      	bne.n	80090a8 <memcpy+0xc>
 80090a6:	4770      	bx	lr
 80090a8:	b510      	push	{r4, lr}
 80090aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090b2:	4291      	cmp	r1, r2
 80090b4:	d1f9      	bne.n	80090aa <memcpy+0xe>
 80090b6:	bd10      	pop	{r4, pc}

080090b8 <memset>:
 80090b8:	4402      	add	r2, r0
 80090ba:	4603      	mov	r3, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <_free_r>:
 80090c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d048      	beq.n	8009160 <_free_r+0x98>
 80090ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d2:	9001      	str	r0, [sp, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f1a1 0404 	sub.w	r4, r1, #4
 80090da:	bfb8      	it	lt
 80090dc:	18e4      	addlt	r4, r4, r3
 80090de:	f001 feeb 	bl	800aeb8 <__malloc_lock>
 80090e2:	4a20      	ldr	r2, [pc, #128]	; (8009164 <_free_r+0x9c>)
 80090e4:	9801      	ldr	r0, [sp, #4]
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	4615      	mov	r5, r2
 80090ea:	b933      	cbnz	r3, 80090fa <_free_r+0x32>
 80090ec:	6063      	str	r3, [r4, #4]
 80090ee:	6014      	str	r4, [r2, #0]
 80090f0:	b003      	add	sp, #12
 80090f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090f6:	f001 bee5 	b.w	800aec4 <__malloc_unlock>
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	d90b      	bls.n	8009116 <_free_r+0x4e>
 80090fe:	6821      	ldr	r1, [r4, #0]
 8009100:	1862      	adds	r2, r4, r1
 8009102:	4293      	cmp	r3, r2
 8009104:	bf04      	itt	eq
 8009106:	681a      	ldreq	r2, [r3, #0]
 8009108:	685b      	ldreq	r3, [r3, #4]
 800910a:	6063      	str	r3, [r4, #4]
 800910c:	bf04      	itt	eq
 800910e:	1852      	addeq	r2, r2, r1
 8009110:	6022      	streq	r2, [r4, #0]
 8009112:	602c      	str	r4, [r5, #0]
 8009114:	e7ec      	b.n	80090f0 <_free_r+0x28>
 8009116:	461a      	mov	r2, r3
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	b10b      	cbz	r3, 8009120 <_free_r+0x58>
 800911c:	42a3      	cmp	r3, r4
 800911e:	d9fa      	bls.n	8009116 <_free_r+0x4e>
 8009120:	6811      	ldr	r1, [r2, #0]
 8009122:	1855      	adds	r5, r2, r1
 8009124:	42a5      	cmp	r5, r4
 8009126:	d10b      	bne.n	8009140 <_free_r+0x78>
 8009128:	6824      	ldr	r4, [r4, #0]
 800912a:	4421      	add	r1, r4
 800912c:	1854      	adds	r4, r2, r1
 800912e:	42a3      	cmp	r3, r4
 8009130:	6011      	str	r1, [r2, #0]
 8009132:	d1dd      	bne.n	80090f0 <_free_r+0x28>
 8009134:	681c      	ldr	r4, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	6053      	str	r3, [r2, #4]
 800913a:	4421      	add	r1, r4
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	e7d7      	b.n	80090f0 <_free_r+0x28>
 8009140:	d902      	bls.n	8009148 <_free_r+0x80>
 8009142:	230c      	movs	r3, #12
 8009144:	6003      	str	r3, [r0, #0]
 8009146:	e7d3      	b.n	80090f0 <_free_r+0x28>
 8009148:	6825      	ldr	r5, [r4, #0]
 800914a:	1961      	adds	r1, r4, r5
 800914c:	428b      	cmp	r3, r1
 800914e:	bf04      	itt	eq
 8009150:	6819      	ldreq	r1, [r3, #0]
 8009152:	685b      	ldreq	r3, [r3, #4]
 8009154:	6063      	str	r3, [r4, #4]
 8009156:	bf04      	itt	eq
 8009158:	1949      	addeq	r1, r1, r5
 800915a:	6021      	streq	r1, [r4, #0]
 800915c:	6054      	str	r4, [r2, #4]
 800915e:	e7c7      	b.n	80090f0 <_free_r+0x28>
 8009160:	b003      	add	sp, #12
 8009162:	bd30      	pop	{r4, r5, pc}
 8009164:	20000a74 	.word	0x20000a74

08009168 <_malloc_r>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	1ccd      	adds	r5, r1, #3
 800916c:	f025 0503 	bic.w	r5, r5, #3
 8009170:	3508      	adds	r5, #8
 8009172:	2d0c      	cmp	r5, #12
 8009174:	bf38      	it	cc
 8009176:	250c      	movcc	r5, #12
 8009178:	2d00      	cmp	r5, #0
 800917a:	4606      	mov	r6, r0
 800917c:	db01      	blt.n	8009182 <_malloc_r+0x1a>
 800917e:	42a9      	cmp	r1, r5
 8009180:	d903      	bls.n	800918a <_malloc_r+0x22>
 8009182:	230c      	movs	r3, #12
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	2000      	movs	r0, #0
 8009188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918a:	f001 fe95 	bl	800aeb8 <__malloc_lock>
 800918e:	4921      	ldr	r1, [pc, #132]	; (8009214 <_malloc_r+0xac>)
 8009190:	680a      	ldr	r2, [r1, #0]
 8009192:	4614      	mov	r4, r2
 8009194:	b99c      	cbnz	r4, 80091be <_malloc_r+0x56>
 8009196:	4f20      	ldr	r7, [pc, #128]	; (8009218 <_malloc_r+0xb0>)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	b923      	cbnz	r3, 80091a6 <_malloc_r+0x3e>
 800919c:	4621      	mov	r1, r4
 800919e:	4630      	mov	r0, r6
 80091a0:	f000 fd1c 	bl	8009bdc <_sbrk_r>
 80091a4:	6038      	str	r0, [r7, #0]
 80091a6:	4629      	mov	r1, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f000 fd17 	bl	8009bdc <_sbrk_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d123      	bne.n	80091fa <_malloc_r+0x92>
 80091b2:	230c      	movs	r3, #12
 80091b4:	6033      	str	r3, [r6, #0]
 80091b6:	4630      	mov	r0, r6
 80091b8:	f001 fe84 	bl	800aec4 <__malloc_unlock>
 80091bc:	e7e3      	b.n	8009186 <_malloc_r+0x1e>
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	1b5b      	subs	r3, r3, r5
 80091c2:	d417      	bmi.n	80091f4 <_malloc_r+0x8c>
 80091c4:	2b0b      	cmp	r3, #11
 80091c6:	d903      	bls.n	80091d0 <_malloc_r+0x68>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	441c      	add	r4, r3
 80091cc:	6025      	str	r5, [r4, #0]
 80091ce:	e004      	b.n	80091da <_malloc_r+0x72>
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	42a2      	cmp	r2, r4
 80091d4:	bf0c      	ite	eq
 80091d6:	600b      	streq	r3, [r1, #0]
 80091d8:	6053      	strne	r3, [r2, #4]
 80091da:	4630      	mov	r0, r6
 80091dc:	f001 fe72 	bl	800aec4 <__malloc_unlock>
 80091e0:	f104 000b 	add.w	r0, r4, #11
 80091e4:	1d23      	adds	r3, r4, #4
 80091e6:	f020 0007 	bic.w	r0, r0, #7
 80091ea:	1ac2      	subs	r2, r0, r3
 80091ec:	d0cc      	beq.n	8009188 <_malloc_r+0x20>
 80091ee:	1a1b      	subs	r3, r3, r0
 80091f0:	50a3      	str	r3, [r4, r2]
 80091f2:	e7c9      	b.n	8009188 <_malloc_r+0x20>
 80091f4:	4622      	mov	r2, r4
 80091f6:	6864      	ldr	r4, [r4, #4]
 80091f8:	e7cc      	b.n	8009194 <_malloc_r+0x2c>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d0e3      	beq.n	80091cc <_malloc_r+0x64>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4630      	mov	r0, r6
 8009208:	f000 fce8 	bl	8009bdc <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d1dd      	bne.n	80091cc <_malloc_r+0x64>
 8009210:	e7cf      	b.n	80091b2 <_malloc_r+0x4a>
 8009212:	bf00      	nop
 8009214:	20000a74 	.word	0x20000a74
 8009218:	20000a78 	.word	0x20000a78

0800921c <__cvt>:
 800921c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	ec55 4b10 	vmov	r4, r5, d0
 8009224:	2d00      	cmp	r5, #0
 8009226:	460e      	mov	r6, r1
 8009228:	4619      	mov	r1, r3
 800922a:	462b      	mov	r3, r5
 800922c:	bfbb      	ittet	lt
 800922e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009232:	461d      	movlt	r5, r3
 8009234:	2300      	movge	r3, #0
 8009236:	232d      	movlt	r3, #45	; 0x2d
 8009238:	700b      	strb	r3, [r1, #0]
 800923a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800923c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009240:	4691      	mov	r9, r2
 8009242:	f023 0820 	bic.w	r8, r3, #32
 8009246:	bfbc      	itt	lt
 8009248:	4622      	movlt	r2, r4
 800924a:	4614      	movlt	r4, r2
 800924c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009250:	d005      	beq.n	800925e <__cvt+0x42>
 8009252:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009256:	d100      	bne.n	800925a <__cvt+0x3e>
 8009258:	3601      	adds	r6, #1
 800925a:	2102      	movs	r1, #2
 800925c:	e000      	b.n	8009260 <__cvt+0x44>
 800925e:	2103      	movs	r1, #3
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	ab02      	add	r3, sp, #8
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	ec45 4b10 	vmov	d0, r4, r5
 800926c:	4653      	mov	r3, sl
 800926e:	4632      	mov	r2, r6
 8009270:	f000 fe12 	bl	8009e98 <_dtoa_r>
 8009274:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009278:	4607      	mov	r7, r0
 800927a:	d102      	bne.n	8009282 <__cvt+0x66>
 800927c:	f019 0f01 	tst.w	r9, #1
 8009280:	d022      	beq.n	80092c8 <__cvt+0xac>
 8009282:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009286:	eb07 0906 	add.w	r9, r7, r6
 800928a:	d110      	bne.n	80092ae <__cvt+0x92>
 800928c:	783b      	ldrb	r3, [r7, #0]
 800928e:	2b30      	cmp	r3, #48	; 0x30
 8009290:	d10a      	bne.n	80092a8 <__cvt+0x8c>
 8009292:	2200      	movs	r2, #0
 8009294:	2300      	movs	r3, #0
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	f7f7 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800929e:	b918      	cbnz	r0, 80092a8 <__cvt+0x8c>
 80092a0:	f1c6 0601 	rsb	r6, r6, #1
 80092a4:	f8ca 6000 	str.w	r6, [sl]
 80092a8:	f8da 3000 	ldr.w	r3, [sl]
 80092ac:	4499      	add	r9, r3
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ba:	b108      	cbz	r0, 80092c0 <__cvt+0xa4>
 80092bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80092c0:	2230      	movs	r2, #48	; 0x30
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	454b      	cmp	r3, r9
 80092c6:	d307      	bcc.n	80092d8 <__cvt+0xbc>
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092cc:	1bdb      	subs	r3, r3, r7
 80092ce:	4638      	mov	r0, r7
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	b004      	add	sp, #16
 80092d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d8:	1c59      	adds	r1, r3, #1
 80092da:	9103      	str	r1, [sp, #12]
 80092dc:	701a      	strb	r2, [r3, #0]
 80092de:	e7f0      	b.n	80092c2 <__cvt+0xa6>

080092e0 <__exponent>:
 80092e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092e2:	4603      	mov	r3, r0
 80092e4:	2900      	cmp	r1, #0
 80092e6:	bfb8      	it	lt
 80092e8:	4249      	neglt	r1, r1
 80092ea:	f803 2b02 	strb.w	r2, [r3], #2
 80092ee:	bfb4      	ite	lt
 80092f0:	222d      	movlt	r2, #45	; 0x2d
 80092f2:	222b      	movge	r2, #43	; 0x2b
 80092f4:	2909      	cmp	r1, #9
 80092f6:	7042      	strb	r2, [r0, #1]
 80092f8:	dd2a      	ble.n	8009350 <__exponent+0x70>
 80092fa:	f10d 0407 	add.w	r4, sp, #7
 80092fe:	46a4      	mov	ip, r4
 8009300:	270a      	movs	r7, #10
 8009302:	46a6      	mov	lr, r4
 8009304:	460a      	mov	r2, r1
 8009306:	fb91 f6f7 	sdiv	r6, r1, r7
 800930a:	fb07 1516 	mls	r5, r7, r6, r1
 800930e:	3530      	adds	r5, #48	; 0x30
 8009310:	2a63      	cmp	r2, #99	; 0x63
 8009312:	f104 34ff 	add.w	r4, r4, #4294967295
 8009316:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800931a:	4631      	mov	r1, r6
 800931c:	dcf1      	bgt.n	8009302 <__exponent+0x22>
 800931e:	3130      	adds	r1, #48	; 0x30
 8009320:	f1ae 0502 	sub.w	r5, lr, #2
 8009324:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009328:	1c44      	adds	r4, r0, #1
 800932a:	4629      	mov	r1, r5
 800932c:	4561      	cmp	r1, ip
 800932e:	d30a      	bcc.n	8009346 <__exponent+0x66>
 8009330:	f10d 0209 	add.w	r2, sp, #9
 8009334:	eba2 020e 	sub.w	r2, r2, lr
 8009338:	4565      	cmp	r5, ip
 800933a:	bf88      	it	hi
 800933c:	2200      	movhi	r2, #0
 800933e:	4413      	add	r3, r2
 8009340:	1a18      	subs	r0, r3, r0
 8009342:	b003      	add	sp, #12
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800934a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800934e:	e7ed      	b.n	800932c <__exponent+0x4c>
 8009350:	2330      	movs	r3, #48	; 0x30
 8009352:	3130      	adds	r1, #48	; 0x30
 8009354:	7083      	strb	r3, [r0, #2]
 8009356:	70c1      	strb	r1, [r0, #3]
 8009358:	1d03      	adds	r3, r0, #4
 800935a:	e7f1      	b.n	8009340 <__exponent+0x60>

0800935c <_printf_float>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	ed2d 8b02 	vpush	{d8}
 8009364:	b08d      	sub	sp, #52	; 0x34
 8009366:	460c      	mov	r4, r1
 8009368:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800936c:	4616      	mov	r6, r2
 800936e:	461f      	mov	r7, r3
 8009370:	4605      	mov	r5, r0
 8009372:	f001 fd35 	bl	800ade0 <_localeconv_r>
 8009376:	f8d0 a000 	ldr.w	sl, [r0]
 800937a:	4650      	mov	r0, sl
 800937c:	f7f6 ff28 	bl	80001d0 <strlen>
 8009380:	2300      	movs	r3, #0
 8009382:	930a      	str	r3, [sp, #40]	; 0x28
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	f8d8 3000 	ldr.w	r3, [r8]
 800938c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009390:	3307      	adds	r3, #7
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	f103 0208 	add.w	r2, r3, #8
 800939a:	f8c8 2000 	str.w	r2, [r8]
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093ae:	9307      	str	r3, [sp, #28]
 80093b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80093b4:	ee08 0a10 	vmov	s16, r0
 80093b8:	4b9f      	ldr	r3, [pc, #636]	; (8009638 <_printf_float+0x2dc>)
 80093ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	f7f7 fbb3 	bl	8000b2c <__aeabi_dcmpun>
 80093c6:	bb88      	cbnz	r0, 800942c <_printf_float+0xd0>
 80093c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093cc:	4b9a      	ldr	r3, [pc, #616]	; (8009638 <_printf_float+0x2dc>)
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	f7f7 fb8d 	bl	8000af0 <__aeabi_dcmple>
 80093d6:	bb48      	cbnz	r0, 800942c <_printf_float+0xd0>
 80093d8:	2200      	movs	r2, #0
 80093da:	2300      	movs	r3, #0
 80093dc:	4640      	mov	r0, r8
 80093de:	4649      	mov	r1, r9
 80093e0:	f7f7 fb7c 	bl	8000adc <__aeabi_dcmplt>
 80093e4:	b110      	cbz	r0, 80093ec <_printf_float+0x90>
 80093e6:	232d      	movs	r3, #45	; 0x2d
 80093e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ec:	4b93      	ldr	r3, [pc, #588]	; (800963c <_printf_float+0x2e0>)
 80093ee:	4894      	ldr	r0, [pc, #592]	; (8009640 <_printf_float+0x2e4>)
 80093f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093f4:	bf94      	ite	ls
 80093f6:	4698      	movls	r8, r3
 80093f8:	4680      	movhi	r8, r0
 80093fa:	2303      	movs	r3, #3
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	f023 0204 	bic.w	r2, r3, #4
 8009404:	6022      	str	r2, [r4, #0]
 8009406:	f04f 0900 	mov.w	r9, #0
 800940a:	9700      	str	r7, [sp, #0]
 800940c:	4633      	mov	r3, r6
 800940e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009410:	4621      	mov	r1, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f9d8 	bl	80097c8 <_printf_common>
 8009418:	3001      	adds	r0, #1
 800941a:	f040 8090 	bne.w	800953e <_printf_float+0x1e2>
 800941e:	f04f 30ff 	mov.w	r0, #4294967295
 8009422:	b00d      	add	sp, #52	; 0x34
 8009424:	ecbd 8b02 	vpop	{d8}
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 8009438:	b140      	cbz	r0, 800944c <_printf_float+0xf0>
 800943a:	464b      	mov	r3, r9
 800943c:	2b00      	cmp	r3, #0
 800943e:	bfbc      	itt	lt
 8009440:	232d      	movlt	r3, #45	; 0x2d
 8009442:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009446:	487f      	ldr	r0, [pc, #508]	; (8009644 <_printf_float+0x2e8>)
 8009448:	4b7f      	ldr	r3, [pc, #508]	; (8009648 <_printf_float+0x2ec>)
 800944a:	e7d1      	b.n	80093f0 <_printf_float+0x94>
 800944c:	6863      	ldr	r3, [r4, #4]
 800944e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009452:	9206      	str	r2, [sp, #24]
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	d13f      	bne.n	80094d8 <_printf_float+0x17c>
 8009458:	2306      	movs	r3, #6
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	9b05      	ldr	r3, [sp, #20]
 800945e:	6861      	ldr	r1, [r4, #4]
 8009460:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009464:	2300      	movs	r3, #0
 8009466:	9303      	str	r3, [sp, #12]
 8009468:	ab0a      	add	r3, sp, #40	; 0x28
 800946a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800946e:	ab09      	add	r3, sp, #36	; 0x24
 8009470:	ec49 8b10 	vmov	d0, r8, r9
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	6022      	str	r2, [r4, #0]
 8009478:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800947c:	4628      	mov	r0, r5
 800947e:	f7ff fecd 	bl	800921c <__cvt>
 8009482:	9b06      	ldr	r3, [sp, #24]
 8009484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009486:	2b47      	cmp	r3, #71	; 0x47
 8009488:	4680      	mov	r8, r0
 800948a:	d108      	bne.n	800949e <_printf_float+0x142>
 800948c:	1cc8      	adds	r0, r1, #3
 800948e:	db02      	blt.n	8009496 <_printf_float+0x13a>
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	4299      	cmp	r1, r3
 8009494:	dd41      	ble.n	800951a <_printf_float+0x1be>
 8009496:	f1ab 0b02 	sub.w	fp, fp, #2
 800949a:	fa5f fb8b 	uxtb.w	fp, fp
 800949e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094a2:	d820      	bhi.n	80094e6 <_printf_float+0x18a>
 80094a4:	3901      	subs	r1, #1
 80094a6:	465a      	mov	r2, fp
 80094a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094ac:	9109      	str	r1, [sp, #36]	; 0x24
 80094ae:	f7ff ff17 	bl	80092e0 <__exponent>
 80094b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b4:	1813      	adds	r3, r2, r0
 80094b6:	2a01      	cmp	r2, #1
 80094b8:	4681      	mov	r9, r0
 80094ba:	6123      	str	r3, [r4, #16]
 80094bc:	dc02      	bgt.n	80094c4 <_printf_float+0x168>
 80094be:	6822      	ldr	r2, [r4, #0]
 80094c0:	07d2      	lsls	r2, r2, #31
 80094c2:	d501      	bpl.n	80094c8 <_printf_float+0x16c>
 80094c4:	3301      	adds	r3, #1
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d09c      	beq.n	800940a <_printf_float+0xae>
 80094d0:	232d      	movs	r3, #45	; 0x2d
 80094d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d6:	e798      	b.n	800940a <_printf_float+0xae>
 80094d8:	9a06      	ldr	r2, [sp, #24]
 80094da:	2a47      	cmp	r2, #71	; 0x47
 80094dc:	d1be      	bne.n	800945c <_printf_float+0x100>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1bc      	bne.n	800945c <_printf_float+0x100>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e7b9      	b.n	800945a <_printf_float+0xfe>
 80094e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094ea:	d118      	bne.n	800951e <_printf_float+0x1c2>
 80094ec:	2900      	cmp	r1, #0
 80094ee:	6863      	ldr	r3, [r4, #4]
 80094f0:	dd0b      	ble.n	800950a <_printf_float+0x1ae>
 80094f2:	6121      	str	r1, [r4, #16]
 80094f4:	b913      	cbnz	r3, 80094fc <_printf_float+0x1a0>
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	07d0      	lsls	r0, r2, #31
 80094fa:	d502      	bpl.n	8009502 <_printf_float+0x1a6>
 80094fc:	3301      	adds	r3, #1
 80094fe:	440b      	add	r3, r1
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	65a1      	str	r1, [r4, #88]	; 0x58
 8009504:	f04f 0900 	mov.w	r9, #0
 8009508:	e7de      	b.n	80094c8 <_printf_float+0x16c>
 800950a:	b913      	cbnz	r3, 8009512 <_printf_float+0x1b6>
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	07d2      	lsls	r2, r2, #31
 8009510:	d501      	bpl.n	8009516 <_printf_float+0x1ba>
 8009512:	3302      	adds	r3, #2
 8009514:	e7f4      	b.n	8009500 <_printf_float+0x1a4>
 8009516:	2301      	movs	r3, #1
 8009518:	e7f2      	b.n	8009500 <_printf_float+0x1a4>
 800951a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800951e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009520:	4299      	cmp	r1, r3
 8009522:	db05      	blt.n	8009530 <_printf_float+0x1d4>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	6121      	str	r1, [r4, #16]
 8009528:	07d8      	lsls	r0, r3, #31
 800952a:	d5ea      	bpl.n	8009502 <_printf_float+0x1a6>
 800952c:	1c4b      	adds	r3, r1, #1
 800952e:	e7e7      	b.n	8009500 <_printf_float+0x1a4>
 8009530:	2900      	cmp	r1, #0
 8009532:	bfd4      	ite	le
 8009534:	f1c1 0202 	rsble	r2, r1, #2
 8009538:	2201      	movgt	r2, #1
 800953a:	4413      	add	r3, r2
 800953c:	e7e0      	b.n	8009500 <_printf_float+0x1a4>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	055a      	lsls	r2, r3, #21
 8009542:	d407      	bmi.n	8009554 <_printf_float+0x1f8>
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	4642      	mov	r2, r8
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	d12c      	bne.n	80095ac <_printf_float+0x250>
 8009552:	e764      	b.n	800941e <_printf_float+0xc2>
 8009554:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009558:	f240 80e0 	bls.w	800971c <_printf_float+0x3c0>
 800955c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009560:	2200      	movs	r2, #0
 8009562:	2300      	movs	r3, #0
 8009564:	f7f7 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009568:	2800      	cmp	r0, #0
 800956a:	d034      	beq.n	80095d6 <_printf_float+0x27a>
 800956c:	4a37      	ldr	r2, [pc, #220]	; (800964c <_printf_float+0x2f0>)
 800956e:	2301      	movs	r3, #1
 8009570:	4631      	mov	r1, r6
 8009572:	4628      	mov	r0, r5
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	f43f af51 	beq.w	800941e <_printf_float+0xc2>
 800957c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009580:	429a      	cmp	r2, r3
 8009582:	db02      	blt.n	800958a <_printf_float+0x22e>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07d8      	lsls	r0, r3, #31
 8009588:	d510      	bpl.n	80095ac <_printf_float+0x250>
 800958a:	ee18 3a10 	vmov	r3, s16
 800958e:	4652      	mov	r2, sl
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	f43f af41 	beq.w	800941e <_printf_float+0xc2>
 800959c:	f04f 0800 	mov.w	r8, #0
 80095a0:	f104 091a 	add.w	r9, r4, #26
 80095a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a6:	3b01      	subs	r3, #1
 80095a8:	4543      	cmp	r3, r8
 80095aa:	dc09      	bgt.n	80095c0 <_printf_float+0x264>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	079b      	lsls	r3, r3, #30
 80095b0:	f100 8105 	bmi.w	80097be <_printf_float+0x462>
 80095b4:	68e0      	ldr	r0, [r4, #12]
 80095b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b8:	4298      	cmp	r0, r3
 80095ba:	bfb8      	it	lt
 80095bc:	4618      	movlt	r0, r3
 80095be:	e730      	b.n	8009422 <_printf_float+0xc6>
 80095c0:	2301      	movs	r3, #1
 80095c2:	464a      	mov	r2, r9
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	47b8      	blx	r7
 80095ca:	3001      	adds	r0, #1
 80095cc:	f43f af27 	beq.w	800941e <_printf_float+0xc2>
 80095d0:	f108 0801 	add.w	r8, r8, #1
 80095d4:	e7e6      	b.n	80095a4 <_printf_float+0x248>
 80095d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dc39      	bgt.n	8009650 <_printf_float+0x2f4>
 80095dc:	4a1b      	ldr	r2, [pc, #108]	; (800964c <_printf_float+0x2f0>)
 80095de:	2301      	movs	r3, #1
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b8      	blx	r7
 80095e6:	3001      	adds	r0, #1
 80095e8:	f43f af19 	beq.w	800941e <_printf_float+0xc2>
 80095ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095f0:	4313      	orrs	r3, r2
 80095f2:	d102      	bne.n	80095fa <_printf_float+0x29e>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	07d9      	lsls	r1, r3, #31
 80095f8:	d5d8      	bpl.n	80095ac <_printf_float+0x250>
 80095fa:	ee18 3a10 	vmov	r3, s16
 80095fe:	4652      	mov	r2, sl
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af09 	beq.w	800941e <_printf_float+0xc2>
 800960c:	f04f 0900 	mov.w	r9, #0
 8009610:	f104 0a1a 	add.w	sl, r4, #26
 8009614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009616:	425b      	negs	r3, r3
 8009618:	454b      	cmp	r3, r9
 800961a:	dc01      	bgt.n	8009620 <_printf_float+0x2c4>
 800961c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800961e:	e792      	b.n	8009546 <_printf_float+0x1ea>
 8009620:	2301      	movs	r3, #1
 8009622:	4652      	mov	r2, sl
 8009624:	4631      	mov	r1, r6
 8009626:	4628      	mov	r0, r5
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	f43f aef7 	beq.w	800941e <_printf_float+0xc2>
 8009630:	f109 0901 	add.w	r9, r9, #1
 8009634:	e7ee      	b.n	8009614 <_printf_float+0x2b8>
 8009636:	bf00      	nop
 8009638:	7fefffff 	.word	0x7fefffff
 800963c:	08017bc0 	.word	0x08017bc0
 8009640:	08017bc4 	.word	0x08017bc4
 8009644:	08017bcc 	.word	0x08017bcc
 8009648:	08017bc8 	.word	0x08017bc8
 800964c:	08017bd0 	.word	0x08017bd0
 8009650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009654:	429a      	cmp	r2, r3
 8009656:	bfa8      	it	ge
 8009658:	461a      	movge	r2, r3
 800965a:	2a00      	cmp	r2, #0
 800965c:	4691      	mov	r9, r2
 800965e:	dc37      	bgt.n	80096d0 <_printf_float+0x374>
 8009660:	f04f 0b00 	mov.w	fp, #0
 8009664:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009668:	f104 021a 	add.w	r2, r4, #26
 800966c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	eba3 0309 	sub.w	r3, r3, r9
 8009674:	455b      	cmp	r3, fp
 8009676:	dc33      	bgt.n	80096e0 <_printf_float+0x384>
 8009678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800967c:	429a      	cmp	r2, r3
 800967e:	db3b      	blt.n	80096f8 <_printf_float+0x39c>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	07da      	lsls	r2, r3, #31
 8009684:	d438      	bmi.n	80096f8 <_printf_float+0x39c>
 8009686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	eba2 0901 	sub.w	r9, r2, r1
 8009692:	4599      	cmp	r9, r3
 8009694:	bfa8      	it	ge
 8009696:	4699      	movge	r9, r3
 8009698:	f1b9 0f00 	cmp.w	r9, #0
 800969c:	dc35      	bgt.n	800970a <_printf_float+0x3ae>
 800969e:	f04f 0800 	mov.w	r8, #0
 80096a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096a6:	f104 0a1a 	add.w	sl, r4, #26
 80096aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096ae:	1a9b      	subs	r3, r3, r2
 80096b0:	eba3 0309 	sub.w	r3, r3, r9
 80096b4:	4543      	cmp	r3, r8
 80096b6:	f77f af79 	ble.w	80095ac <_printf_float+0x250>
 80096ba:	2301      	movs	r3, #1
 80096bc:	4652      	mov	r2, sl
 80096be:	4631      	mov	r1, r6
 80096c0:	4628      	mov	r0, r5
 80096c2:	47b8      	blx	r7
 80096c4:	3001      	adds	r0, #1
 80096c6:	f43f aeaa 	beq.w	800941e <_printf_float+0xc2>
 80096ca:	f108 0801 	add.w	r8, r8, #1
 80096ce:	e7ec      	b.n	80096aa <_printf_float+0x34e>
 80096d0:	4613      	mov	r3, r2
 80096d2:	4631      	mov	r1, r6
 80096d4:	4642      	mov	r2, r8
 80096d6:	4628      	mov	r0, r5
 80096d8:	47b8      	blx	r7
 80096da:	3001      	adds	r0, #1
 80096dc:	d1c0      	bne.n	8009660 <_printf_float+0x304>
 80096de:	e69e      	b.n	800941e <_printf_float+0xc2>
 80096e0:	2301      	movs	r3, #1
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	9205      	str	r2, [sp, #20]
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	f43f ae97 	beq.w	800941e <_printf_float+0xc2>
 80096f0:	9a05      	ldr	r2, [sp, #20]
 80096f2:	f10b 0b01 	add.w	fp, fp, #1
 80096f6:	e7b9      	b.n	800966c <_printf_float+0x310>
 80096f8:	ee18 3a10 	vmov	r3, s16
 80096fc:	4652      	mov	r2, sl
 80096fe:	4631      	mov	r1, r6
 8009700:	4628      	mov	r0, r5
 8009702:	47b8      	blx	r7
 8009704:	3001      	adds	r0, #1
 8009706:	d1be      	bne.n	8009686 <_printf_float+0x32a>
 8009708:	e689      	b.n	800941e <_printf_float+0xc2>
 800970a:	9a05      	ldr	r2, [sp, #20]
 800970c:	464b      	mov	r3, r9
 800970e:	4442      	add	r2, r8
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	d1c1      	bne.n	800969e <_printf_float+0x342>
 800971a:	e680      	b.n	800941e <_printf_float+0xc2>
 800971c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800971e:	2a01      	cmp	r2, #1
 8009720:	dc01      	bgt.n	8009726 <_printf_float+0x3ca>
 8009722:	07db      	lsls	r3, r3, #31
 8009724:	d538      	bpl.n	8009798 <_printf_float+0x43c>
 8009726:	2301      	movs	r3, #1
 8009728:	4642      	mov	r2, r8
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f ae74 	beq.w	800941e <_printf_float+0xc2>
 8009736:	ee18 3a10 	vmov	r3, s16
 800973a:	4652      	mov	r2, sl
 800973c:	4631      	mov	r1, r6
 800973e:	4628      	mov	r0, r5
 8009740:	47b8      	blx	r7
 8009742:	3001      	adds	r0, #1
 8009744:	f43f ae6b 	beq.w	800941e <_printf_float+0xc2>
 8009748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800974c:	2200      	movs	r2, #0
 800974e:	2300      	movs	r3, #0
 8009750:	f7f7 f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009754:	b9d8      	cbnz	r0, 800978e <_printf_float+0x432>
 8009756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009758:	f108 0201 	add.w	r2, r8, #1
 800975c:	3b01      	subs	r3, #1
 800975e:	4631      	mov	r1, r6
 8009760:	4628      	mov	r0, r5
 8009762:	47b8      	blx	r7
 8009764:	3001      	adds	r0, #1
 8009766:	d10e      	bne.n	8009786 <_printf_float+0x42a>
 8009768:	e659      	b.n	800941e <_printf_float+0xc2>
 800976a:	2301      	movs	r3, #1
 800976c:	4652      	mov	r2, sl
 800976e:	4631      	mov	r1, r6
 8009770:	4628      	mov	r0, r5
 8009772:	47b8      	blx	r7
 8009774:	3001      	adds	r0, #1
 8009776:	f43f ae52 	beq.w	800941e <_printf_float+0xc2>
 800977a:	f108 0801 	add.w	r8, r8, #1
 800977e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009780:	3b01      	subs	r3, #1
 8009782:	4543      	cmp	r3, r8
 8009784:	dcf1      	bgt.n	800976a <_printf_float+0x40e>
 8009786:	464b      	mov	r3, r9
 8009788:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800978c:	e6dc      	b.n	8009548 <_printf_float+0x1ec>
 800978e:	f04f 0800 	mov.w	r8, #0
 8009792:	f104 0a1a 	add.w	sl, r4, #26
 8009796:	e7f2      	b.n	800977e <_printf_float+0x422>
 8009798:	2301      	movs	r3, #1
 800979a:	4642      	mov	r2, r8
 800979c:	e7df      	b.n	800975e <_printf_float+0x402>
 800979e:	2301      	movs	r3, #1
 80097a0:	464a      	mov	r2, r9
 80097a2:	4631      	mov	r1, r6
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	f43f ae38 	beq.w	800941e <_printf_float+0xc2>
 80097ae:	f108 0801 	add.w	r8, r8, #1
 80097b2:	68e3      	ldr	r3, [r4, #12]
 80097b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b6:	1a5b      	subs	r3, r3, r1
 80097b8:	4543      	cmp	r3, r8
 80097ba:	dcf0      	bgt.n	800979e <_printf_float+0x442>
 80097bc:	e6fa      	b.n	80095b4 <_printf_float+0x258>
 80097be:	f04f 0800 	mov.w	r8, #0
 80097c2:	f104 0919 	add.w	r9, r4, #25
 80097c6:	e7f4      	b.n	80097b2 <_printf_float+0x456>

080097c8 <_printf_common>:
 80097c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	4616      	mov	r6, r2
 80097ce:	4699      	mov	r9, r3
 80097d0:	688a      	ldr	r2, [r1, #8]
 80097d2:	690b      	ldr	r3, [r1, #16]
 80097d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097d8:	4293      	cmp	r3, r2
 80097da:	bfb8      	it	lt
 80097dc:	4613      	movlt	r3, r2
 80097de:	6033      	str	r3, [r6, #0]
 80097e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097e4:	4607      	mov	r7, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	b10a      	cbz	r2, 80097ee <_printf_common+0x26>
 80097ea:	3301      	adds	r3, #1
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	0699      	lsls	r1, r3, #26
 80097f2:	bf42      	ittt	mi
 80097f4:	6833      	ldrmi	r3, [r6, #0]
 80097f6:	3302      	addmi	r3, #2
 80097f8:	6033      	strmi	r3, [r6, #0]
 80097fa:	6825      	ldr	r5, [r4, #0]
 80097fc:	f015 0506 	ands.w	r5, r5, #6
 8009800:	d106      	bne.n	8009810 <_printf_common+0x48>
 8009802:	f104 0a19 	add.w	sl, r4, #25
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	6832      	ldr	r2, [r6, #0]
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	42ab      	cmp	r3, r5
 800980e:	dc26      	bgt.n	800985e <_printf_common+0x96>
 8009810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009814:	1e13      	subs	r3, r2, #0
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	bf18      	it	ne
 800981a:	2301      	movne	r3, #1
 800981c:	0692      	lsls	r2, r2, #26
 800981e:	d42b      	bmi.n	8009878 <_printf_common+0xb0>
 8009820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009824:	4649      	mov	r1, r9
 8009826:	4638      	mov	r0, r7
 8009828:	47c0      	blx	r8
 800982a:	3001      	adds	r0, #1
 800982c:	d01e      	beq.n	800986c <_printf_common+0xa4>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	68e5      	ldr	r5, [r4, #12]
 8009832:	6832      	ldr	r2, [r6, #0]
 8009834:	f003 0306 	and.w	r3, r3, #6
 8009838:	2b04      	cmp	r3, #4
 800983a:	bf08      	it	eq
 800983c:	1aad      	subeq	r5, r5, r2
 800983e:	68a3      	ldr	r3, [r4, #8]
 8009840:	6922      	ldr	r2, [r4, #16]
 8009842:	bf0c      	ite	eq
 8009844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009848:	2500      	movne	r5, #0
 800984a:	4293      	cmp	r3, r2
 800984c:	bfc4      	itt	gt
 800984e:	1a9b      	subgt	r3, r3, r2
 8009850:	18ed      	addgt	r5, r5, r3
 8009852:	2600      	movs	r6, #0
 8009854:	341a      	adds	r4, #26
 8009856:	42b5      	cmp	r5, r6
 8009858:	d11a      	bne.n	8009890 <_printf_common+0xc8>
 800985a:	2000      	movs	r0, #0
 800985c:	e008      	b.n	8009870 <_printf_common+0xa8>
 800985e:	2301      	movs	r3, #1
 8009860:	4652      	mov	r2, sl
 8009862:	4649      	mov	r1, r9
 8009864:	4638      	mov	r0, r7
 8009866:	47c0      	blx	r8
 8009868:	3001      	adds	r0, #1
 800986a:	d103      	bne.n	8009874 <_printf_common+0xac>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009874:	3501      	adds	r5, #1
 8009876:	e7c6      	b.n	8009806 <_printf_common+0x3e>
 8009878:	18e1      	adds	r1, r4, r3
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	2030      	movs	r0, #48	; 0x30
 800987e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009882:	4422      	add	r2, r4
 8009884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800988c:	3302      	adds	r3, #2
 800988e:	e7c7      	b.n	8009820 <_printf_common+0x58>
 8009890:	2301      	movs	r3, #1
 8009892:	4622      	mov	r2, r4
 8009894:	4649      	mov	r1, r9
 8009896:	4638      	mov	r0, r7
 8009898:	47c0      	blx	r8
 800989a:	3001      	adds	r0, #1
 800989c:	d0e6      	beq.n	800986c <_printf_common+0xa4>
 800989e:	3601      	adds	r6, #1
 80098a0:	e7d9      	b.n	8009856 <_printf_common+0x8e>
	...

080098a4 <_printf_i>:
 80098a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	4691      	mov	r9, r2
 80098ac:	7e27      	ldrb	r7, [r4, #24]
 80098ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098b0:	2f78      	cmp	r7, #120	; 0x78
 80098b2:	4680      	mov	r8, r0
 80098b4:	469a      	mov	sl, r3
 80098b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ba:	d807      	bhi.n	80098cc <_printf_i+0x28>
 80098bc:	2f62      	cmp	r7, #98	; 0x62
 80098be:	d80a      	bhi.n	80098d6 <_printf_i+0x32>
 80098c0:	2f00      	cmp	r7, #0
 80098c2:	f000 80d8 	beq.w	8009a76 <_printf_i+0x1d2>
 80098c6:	2f58      	cmp	r7, #88	; 0x58
 80098c8:	f000 80a3 	beq.w	8009a12 <_printf_i+0x16e>
 80098cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098d4:	e03a      	b.n	800994c <_printf_i+0xa8>
 80098d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098da:	2b15      	cmp	r3, #21
 80098dc:	d8f6      	bhi.n	80098cc <_printf_i+0x28>
 80098de:	a001      	add	r0, pc, #4	; (adr r0, 80098e4 <_printf_i+0x40>)
 80098e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098e4:	0800993d 	.word	0x0800993d
 80098e8:	08009951 	.word	0x08009951
 80098ec:	080098cd 	.word	0x080098cd
 80098f0:	080098cd 	.word	0x080098cd
 80098f4:	080098cd 	.word	0x080098cd
 80098f8:	080098cd 	.word	0x080098cd
 80098fc:	08009951 	.word	0x08009951
 8009900:	080098cd 	.word	0x080098cd
 8009904:	080098cd 	.word	0x080098cd
 8009908:	080098cd 	.word	0x080098cd
 800990c:	080098cd 	.word	0x080098cd
 8009910:	08009a5d 	.word	0x08009a5d
 8009914:	08009981 	.word	0x08009981
 8009918:	08009a3f 	.word	0x08009a3f
 800991c:	080098cd 	.word	0x080098cd
 8009920:	080098cd 	.word	0x080098cd
 8009924:	08009a7f 	.word	0x08009a7f
 8009928:	080098cd 	.word	0x080098cd
 800992c:	08009981 	.word	0x08009981
 8009930:	080098cd 	.word	0x080098cd
 8009934:	080098cd 	.word	0x080098cd
 8009938:	08009a47 	.word	0x08009a47
 800993c:	680b      	ldr	r3, [r1, #0]
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	600a      	str	r2, [r1, #0]
 8009944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800994c:	2301      	movs	r3, #1
 800994e:	e0a3      	b.n	8009a98 <_printf_i+0x1f4>
 8009950:	6825      	ldr	r5, [r4, #0]
 8009952:	6808      	ldr	r0, [r1, #0]
 8009954:	062e      	lsls	r6, r5, #24
 8009956:	f100 0304 	add.w	r3, r0, #4
 800995a:	d50a      	bpl.n	8009972 <_printf_i+0xce>
 800995c:	6805      	ldr	r5, [r0, #0]
 800995e:	600b      	str	r3, [r1, #0]
 8009960:	2d00      	cmp	r5, #0
 8009962:	da03      	bge.n	800996c <_printf_i+0xc8>
 8009964:	232d      	movs	r3, #45	; 0x2d
 8009966:	426d      	negs	r5, r5
 8009968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800996c:	485e      	ldr	r0, [pc, #376]	; (8009ae8 <_printf_i+0x244>)
 800996e:	230a      	movs	r3, #10
 8009970:	e019      	b.n	80099a6 <_printf_i+0x102>
 8009972:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009976:	6805      	ldr	r5, [r0, #0]
 8009978:	600b      	str	r3, [r1, #0]
 800997a:	bf18      	it	ne
 800997c:	b22d      	sxthne	r5, r5
 800997e:	e7ef      	b.n	8009960 <_printf_i+0xbc>
 8009980:	680b      	ldr	r3, [r1, #0]
 8009982:	6825      	ldr	r5, [r4, #0]
 8009984:	1d18      	adds	r0, r3, #4
 8009986:	6008      	str	r0, [r1, #0]
 8009988:	0628      	lsls	r0, r5, #24
 800998a:	d501      	bpl.n	8009990 <_printf_i+0xec>
 800998c:	681d      	ldr	r5, [r3, #0]
 800998e:	e002      	b.n	8009996 <_printf_i+0xf2>
 8009990:	0669      	lsls	r1, r5, #25
 8009992:	d5fb      	bpl.n	800998c <_printf_i+0xe8>
 8009994:	881d      	ldrh	r5, [r3, #0]
 8009996:	4854      	ldr	r0, [pc, #336]	; (8009ae8 <_printf_i+0x244>)
 8009998:	2f6f      	cmp	r7, #111	; 0x6f
 800999a:	bf0c      	ite	eq
 800999c:	2308      	moveq	r3, #8
 800999e:	230a      	movne	r3, #10
 80099a0:	2100      	movs	r1, #0
 80099a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099a6:	6866      	ldr	r6, [r4, #4]
 80099a8:	60a6      	str	r6, [r4, #8]
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	bfa2      	ittt	ge
 80099ae:	6821      	ldrge	r1, [r4, #0]
 80099b0:	f021 0104 	bicge.w	r1, r1, #4
 80099b4:	6021      	strge	r1, [r4, #0]
 80099b6:	b90d      	cbnz	r5, 80099bc <_printf_i+0x118>
 80099b8:	2e00      	cmp	r6, #0
 80099ba:	d04d      	beq.n	8009a58 <_printf_i+0x1b4>
 80099bc:	4616      	mov	r6, r2
 80099be:	fbb5 f1f3 	udiv	r1, r5, r3
 80099c2:	fb03 5711 	mls	r7, r3, r1, r5
 80099c6:	5dc7      	ldrb	r7, [r0, r7]
 80099c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099cc:	462f      	mov	r7, r5
 80099ce:	42bb      	cmp	r3, r7
 80099d0:	460d      	mov	r5, r1
 80099d2:	d9f4      	bls.n	80099be <_printf_i+0x11a>
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d10b      	bne.n	80099f0 <_printf_i+0x14c>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	07df      	lsls	r7, r3, #31
 80099dc:	d508      	bpl.n	80099f0 <_printf_i+0x14c>
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	6861      	ldr	r1, [r4, #4]
 80099e2:	4299      	cmp	r1, r3
 80099e4:	bfde      	ittt	le
 80099e6:	2330      	movle	r3, #48	; 0x30
 80099e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099f0:	1b92      	subs	r2, r2, r6
 80099f2:	6122      	str	r2, [r4, #16]
 80099f4:	f8cd a000 	str.w	sl, [sp]
 80099f8:	464b      	mov	r3, r9
 80099fa:	aa03      	add	r2, sp, #12
 80099fc:	4621      	mov	r1, r4
 80099fe:	4640      	mov	r0, r8
 8009a00:	f7ff fee2 	bl	80097c8 <_printf_common>
 8009a04:	3001      	adds	r0, #1
 8009a06:	d14c      	bne.n	8009aa2 <_printf_i+0x1fe>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	b004      	add	sp, #16
 8009a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a12:	4835      	ldr	r0, [pc, #212]	; (8009ae8 <_printf_i+0x244>)
 8009a14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	680e      	ldr	r6, [r1, #0]
 8009a1c:	061f      	lsls	r7, r3, #24
 8009a1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a22:	600e      	str	r6, [r1, #0]
 8009a24:	d514      	bpl.n	8009a50 <_printf_i+0x1ac>
 8009a26:	07d9      	lsls	r1, r3, #31
 8009a28:	bf44      	itt	mi
 8009a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a2e:	6023      	strmi	r3, [r4, #0]
 8009a30:	b91d      	cbnz	r5, 8009a3a <_printf_i+0x196>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	f023 0320 	bic.w	r3, r3, #32
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	2310      	movs	r3, #16
 8009a3c:	e7b0      	b.n	80099a0 <_printf_i+0xfc>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	f043 0320 	orr.w	r3, r3, #32
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	2378      	movs	r3, #120	; 0x78
 8009a48:	4828      	ldr	r0, [pc, #160]	; (8009aec <_printf_i+0x248>)
 8009a4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a4e:	e7e3      	b.n	8009a18 <_printf_i+0x174>
 8009a50:	065e      	lsls	r6, r3, #25
 8009a52:	bf48      	it	mi
 8009a54:	b2ad      	uxthmi	r5, r5
 8009a56:	e7e6      	b.n	8009a26 <_printf_i+0x182>
 8009a58:	4616      	mov	r6, r2
 8009a5a:	e7bb      	b.n	80099d4 <_printf_i+0x130>
 8009a5c:	680b      	ldr	r3, [r1, #0]
 8009a5e:	6826      	ldr	r6, [r4, #0]
 8009a60:	6960      	ldr	r0, [r4, #20]
 8009a62:	1d1d      	adds	r5, r3, #4
 8009a64:	600d      	str	r5, [r1, #0]
 8009a66:	0635      	lsls	r5, r6, #24
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	d501      	bpl.n	8009a70 <_printf_i+0x1cc>
 8009a6c:	6018      	str	r0, [r3, #0]
 8009a6e:	e002      	b.n	8009a76 <_printf_i+0x1d2>
 8009a70:	0671      	lsls	r1, r6, #25
 8009a72:	d5fb      	bpl.n	8009a6c <_printf_i+0x1c8>
 8009a74:	8018      	strh	r0, [r3, #0]
 8009a76:	2300      	movs	r3, #0
 8009a78:	6123      	str	r3, [r4, #16]
 8009a7a:	4616      	mov	r6, r2
 8009a7c:	e7ba      	b.n	80099f4 <_printf_i+0x150>
 8009a7e:	680b      	ldr	r3, [r1, #0]
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	600a      	str	r2, [r1, #0]
 8009a84:	681e      	ldr	r6, [r3, #0]
 8009a86:	6862      	ldr	r2, [r4, #4]
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f7f6 fba8 	bl	80001e0 <memchr>
 8009a90:	b108      	cbz	r0, 8009a96 <_printf_i+0x1f2>
 8009a92:	1b80      	subs	r0, r0, r6
 8009a94:	6060      	str	r0, [r4, #4]
 8009a96:	6863      	ldr	r3, [r4, #4]
 8009a98:	6123      	str	r3, [r4, #16]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa0:	e7a8      	b.n	80099f4 <_printf_i+0x150>
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	47d0      	blx	sl
 8009aac:	3001      	adds	r0, #1
 8009aae:	d0ab      	beq.n	8009a08 <_printf_i+0x164>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	079b      	lsls	r3, r3, #30
 8009ab4:	d413      	bmi.n	8009ade <_printf_i+0x23a>
 8009ab6:	68e0      	ldr	r0, [r4, #12]
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	4298      	cmp	r0, r3
 8009abc:	bfb8      	it	lt
 8009abe:	4618      	movlt	r0, r3
 8009ac0:	e7a4      	b.n	8009a0c <_printf_i+0x168>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	47d0      	blx	sl
 8009acc:	3001      	adds	r0, #1
 8009ace:	d09b      	beq.n	8009a08 <_printf_i+0x164>
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	9903      	ldr	r1, [sp, #12]
 8009ad6:	1a5b      	subs	r3, r3, r1
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dcf2      	bgt.n	8009ac2 <_printf_i+0x21e>
 8009adc:	e7eb      	b.n	8009ab6 <_printf_i+0x212>
 8009ade:	2500      	movs	r5, #0
 8009ae0:	f104 0619 	add.w	r6, r4, #25
 8009ae4:	e7f5      	b.n	8009ad2 <_printf_i+0x22e>
 8009ae6:	bf00      	nop
 8009ae8:	08017bd2 	.word	0x08017bd2
 8009aec:	08017be3 	.word	0x08017be3

08009af0 <_puts_r>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	460e      	mov	r6, r1
 8009af4:	4605      	mov	r5, r0
 8009af6:	b118      	cbz	r0, 8009b00 <_puts_r+0x10>
 8009af8:	6983      	ldr	r3, [r0, #24]
 8009afa:	b90b      	cbnz	r3, 8009b00 <_puts_r+0x10>
 8009afc:	f001 f8d2 	bl	800aca4 <__sinit>
 8009b00:	69ab      	ldr	r3, [r5, #24]
 8009b02:	68ac      	ldr	r4, [r5, #8]
 8009b04:	b913      	cbnz	r3, 8009b0c <_puts_r+0x1c>
 8009b06:	4628      	mov	r0, r5
 8009b08:	f001 f8cc 	bl	800aca4 <__sinit>
 8009b0c:	4b2c      	ldr	r3, [pc, #176]	; (8009bc0 <_puts_r+0xd0>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d120      	bne.n	8009b54 <_puts_r+0x64>
 8009b12:	686c      	ldr	r4, [r5, #4]
 8009b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b16:	07db      	lsls	r3, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_puts_r+0x36>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	0598      	lsls	r0, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_puts_r+0x36>
 8009b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b22:	f001 f962 	bl	800adea <__retarget_lock_acquire_recursive>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	0719      	lsls	r1, r3, #28
 8009b2a:	d51d      	bpl.n	8009b68 <_puts_r+0x78>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	b1db      	cbz	r3, 8009b68 <_puts_r+0x78>
 8009b30:	3e01      	subs	r6, #1
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	60a3      	str	r3, [r4, #8]
 8009b3c:	bb39      	cbnz	r1, 8009b8e <_puts_r+0x9e>
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da38      	bge.n	8009bb4 <_puts_r+0xc4>
 8009b42:	4622      	mov	r2, r4
 8009b44:	210a      	movs	r1, #10
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 f858 	bl	8009bfc <__swbuf_r>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d011      	beq.n	8009b74 <_puts_r+0x84>
 8009b50:	250a      	movs	r5, #10
 8009b52:	e011      	b.n	8009b78 <_puts_r+0x88>
 8009b54:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <_puts_r+0xd4>)
 8009b56:	429c      	cmp	r4, r3
 8009b58:	d101      	bne.n	8009b5e <_puts_r+0x6e>
 8009b5a:	68ac      	ldr	r4, [r5, #8]
 8009b5c:	e7da      	b.n	8009b14 <_puts_r+0x24>
 8009b5e:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <_puts_r+0xd8>)
 8009b60:	429c      	cmp	r4, r3
 8009b62:	bf08      	it	eq
 8009b64:	68ec      	ldreq	r4, [r5, #12]
 8009b66:	e7d5      	b.n	8009b14 <_puts_r+0x24>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 f898 	bl	8009ca0 <__swsetup_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0dd      	beq.n	8009b30 <_puts_r+0x40>
 8009b74:	f04f 35ff 	mov.w	r5, #4294967295
 8009b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b7a:	07da      	lsls	r2, r3, #31
 8009b7c:	d405      	bmi.n	8009b8a <_puts_r+0x9a>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	059b      	lsls	r3, r3, #22
 8009b82:	d402      	bmi.n	8009b8a <_puts_r+0x9a>
 8009b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b86:	f001 f931 	bl	800adec <__retarget_lock_release_recursive>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da04      	bge.n	8009b9c <_puts_r+0xac>
 8009b92:	69a2      	ldr	r2, [r4, #24]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	dc06      	bgt.n	8009ba6 <_puts_r+0xb6>
 8009b98:	290a      	cmp	r1, #10
 8009b9a:	d004      	beq.n	8009ba6 <_puts_r+0xb6>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	7019      	strb	r1, [r3, #0]
 8009ba4:	e7c5      	b.n	8009b32 <_puts_r+0x42>
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f000 f827 	bl	8009bfc <__swbuf_r>
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d1bf      	bne.n	8009b32 <_puts_r+0x42>
 8009bb2:	e7df      	b.n	8009b74 <_puts_r+0x84>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	250a      	movs	r5, #10
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	6022      	str	r2, [r4, #0]
 8009bbc:	701d      	strb	r5, [r3, #0]
 8009bbe:	e7db      	b.n	8009b78 <_puts_r+0x88>
 8009bc0:	08017ca8 	.word	0x08017ca8
 8009bc4:	08017cc8 	.word	0x08017cc8
 8009bc8:	08017c88 	.word	0x08017c88

08009bcc <puts>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <puts+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f7ff bf8d 	b.w	8009af0 <_puts_r>
 8009bd6:	bf00      	nop
 8009bd8:	200007dc 	.word	0x200007dc

08009bdc <_sbrk_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_sbrk_r+0x1c>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f7 fee6 	bl	80019b8 <_sbrk>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_sbrk_r+0x1a>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_sbrk_r+0x1a>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	2000133c 	.word	0x2000133c

08009bfc <__swbuf_r>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	460e      	mov	r6, r1
 8009c00:	4614      	mov	r4, r2
 8009c02:	4605      	mov	r5, r0
 8009c04:	b118      	cbz	r0, 8009c0e <__swbuf_r+0x12>
 8009c06:	6983      	ldr	r3, [r0, #24]
 8009c08:	b90b      	cbnz	r3, 8009c0e <__swbuf_r+0x12>
 8009c0a:	f001 f84b 	bl	800aca4 <__sinit>
 8009c0e:	4b21      	ldr	r3, [pc, #132]	; (8009c94 <__swbuf_r+0x98>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	d12b      	bne.n	8009c6c <__swbuf_r+0x70>
 8009c14:	686c      	ldr	r4, [r5, #4]
 8009c16:	69a3      	ldr	r3, [r4, #24]
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	071a      	lsls	r2, r3, #28
 8009c1e:	d52f      	bpl.n	8009c80 <__swbuf_r+0x84>
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	b36b      	cbz	r3, 8009c80 <__swbuf_r+0x84>
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	6820      	ldr	r0, [r4, #0]
 8009c28:	1ac0      	subs	r0, r0, r3
 8009c2a:	6963      	ldr	r3, [r4, #20]
 8009c2c:	b2f6      	uxtb	r6, r6
 8009c2e:	4283      	cmp	r3, r0
 8009c30:	4637      	mov	r7, r6
 8009c32:	dc04      	bgt.n	8009c3e <__swbuf_r+0x42>
 8009c34:	4621      	mov	r1, r4
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 ffa0 	bl	800ab7c <_fflush_r>
 8009c3c:	bb30      	cbnz	r0, 8009c8c <__swbuf_r+0x90>
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	60a3      	str	r3, [r4, #8]
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	6022      	str	r2, [r4, #0]
 8009c4a:	701e      	strb	r6, [r3, #0]
 8009c4c:	6963      	ldr	r3, [r4, #20]
 8009c4e:	3001      	adds	r0, #1
 8009c50:	4283      	cmp	r3, r0
 8009c52:	d004      	beq.n	8009c5e <__swbuf_r+0x62>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	07db      	lsls	r3, r3, #31
 8009c58:	d506      	bpl.n	8009c68 <__swbuf_r+0x6c>
 8009c5a:	2e0a      	cmp	r6, #10
 8009c5c:	d104      	bne.n	8009c68 <__swbuf_r+0x6c>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	f000 ff8b 	bl	800ab7c <_fflush_r>
 8009c66:	b988      	cbnz	r0, 8009c8c <__swbuf_r+0x90>
 8009c68:	4638      	mov	r0, r7
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <__swbuf_r+0x9c>)
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	d101      	bne.n	8009c76 <__swbuf_r+0x7a>
 8009c72:	68ac      	ldr	r4, [r5, #8]
 8009c74:	e7cf      	b.n	8009c16 <__swbuf_r+0x1a>
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <__swbuf_r+0xa0>)
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	bf08      	it	eq
 8009c7c:	68ec      	ldreq	r4, [r5, #12]
 8009c7e:	e7ca      	b.n	8009c16 <__swbuf_r+0x1a>
 8009c80:	4621      	mov	r1, r4
 8009c82:	4628      	mov	r0, r5
 8009c84:	f000 f80c 	bl	8009ca0 <__swsetup_r>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d0cb      	beq.n	8009c24 <__swbuf_r+0x28>
 8009c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c90:	e7ea      	b.n	8009c68 <__swbuf_r+0x6c>
 8009c92:	bf00      	nop
 8009c94:	08017ca8 	.word	0x08017ca8
 8009c98:	08017cc8 	.word	0x08017cc8
 8009c9c:	08017c88 	.word	0x08017c88

08009ca0 <__swsetup_r>:
 8009ca0:	4b32      	ldr	r3, [pc, #200]	; (8009d6c <__swsetup_r+0xcc>)
 8009ca2:	b570      	push	{r4, r5, r6, lr}
 8009ca4:	681d      	ldr	r5, [r3, #0]
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460c      	mov	r4, r1
 8009caa:	b125      	cbz	r5, 8009cb6 <__swsetup_r+0x16>
 8009cac:	69ab      	ldr	r3, [r5, #24]
 8009cae:	b913      	cbnz	r3, 8009cb6 <__swsetup_r+0x16>
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 fff7 	bl	800aca4 <__sinit>
 8009cb6:	4b2e      	ldr	r3, [pc, #184]	; (8009d70 <__swsetup_r+0xd0>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	d10f      	bne.n	8009cdc <__swsetup_r+0x3c>
 8009cbc:	686c      	ldr	r4, [r5, #4]
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cc4:	0719      	lsls	r1, r3, #28
 8009cc6:	d42c      	bmi.n	8009d22 <__swsetup_r+0x82>
 8009cc8:	06dd      	lsls	r5, r3, #27
 8009cca:	d411      	bmi.n	8009cf0 <__swsetup_r+0x50>
 8009ccc:	2309      	movs	r3, #9
 8009cce:	6033      	str	r3, [r6, #0]
 8009cd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cda:	e03e      	b.n	8009d5a <__swsetup_r+0xba>
 8009cdc:	4b25      	ldr	r3, [pc, #148]	; (8009d74 <__swsetup_r+0xd4>)
 8009cde:	429c      	cmp	r4, r3
 8009ce0:	d101      	bne.n	8009ce6 <__swsetup_r+0x46>
 8009ce2:	68ac      	ldr	r4, [r5, #8]
 8009ce4:	e7eb      	b.n	8009cbe <__swsetup_r+0x1e>
 8009ce6:	4b24      	ldr	r3, [pc, #144]	; (8009d78 <__swsetup_r+0xd8>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	bf08      	it	eq
 8009cec:	68ec      	ldreq	r4, [r5, #12]
 8009cee:	e7e6      	b.n	8009cbe <__swsetup_r+0x1e>
 8009cf0:	0758      	lsls	r0, r3, #29
 8009cf2:	d512      	bpl.n	8009d1a <__swsetup_r+0x7a>
 8009cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cf6:	b141      	cbz	r1, 8009d0a <__swsetup_r+0x6a>
 8009cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cfc:	4299      	cmp	r1, r3
 8009cfe:	d002      	beq.n	8009d06 <__swsetup_r+0x66>
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff f9e1 	bl	80090c8 <_free_r>
 8009d06:	2300      	movs	r3, #0
 8009d08:	6363      	str	r3, [r4, #52]	; 0x34
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	2300      	movs	r3, #0
 8009d14:	6063      	str	r3, [r4, #4]
 8009d16:	6923      	ldr	r3, [r4, #16]
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0308 	orr.w	r3, r3, #8
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	b94b      	cbnz	r3, 8009d3a <__swsetup_r+0x9a>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d30:	d003      	beq.n	8009d3a <__swsetup_r+0x9a>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4630      	mov	r0, r6
 8009d36:	f001 f87f 	bl	800ae38 <__smakebuf_r>
 8009d3a:	89a0      	ldrh	r0, [r4, #12]
 8009d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d40:	f010 0301 	ands.w	r3, r0, #1
 8009d44:	d00a      	beq.n	8009d5c <__swsetup_r+0xbc>
 8009d46:	2300      	movs	r3, #0
 8009d48:	60a3      	str	r3, [r4, #8]
 8009d4a:	6963      	ldr	r3, [r4, #20]
 8009d4c:	425b      	negs	r3, r3
 8009d4e:	61a3      	str	r3, [r4, #24]
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	b943      	cbnz	r3, 8009d66 <__swsetup_r+0xc6>
 8009d54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d58:	d1ba      	bne.n	8009cd0 <__swsetup_r+0x30>
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	0781      	lsls	r1, r0, #30
 8009d5e:	bf58      	it	pl
 8009d60:	6963      	ldrpl	r3, [r4, #20]
 8009d62:	60a3      	str	r3, [r4, #8]
 8009d64:	e7f4      	b.n	8009d50 <__swsetup_r+0xb0>
 8009d66:	2000      	movs	r0, #0
 8009d68:	e7f7      	b.n	8009d5a <__swsetup_r+0xba>
 8009d6a:	bf00      	nop
 8009d6c:	200007dc 	.word	0x200007dc
 8009d70:	08017ca8 	.word	0x08017ca8
 8009d74:	08017cc8 	.word	0x08017cc8
 8009d78:	08017c88 	.word	0x08017c88

08009d7c <quorem>:
 8009d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	6903      	ldr	r3, [r0, #16]
 8009d82:	690c      	ldr	r4, [r1, #16]
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	4607      	mov	r7, r0
 8009d88:	f2c0 8081 	blt.w	8009e8e <quorem+0x112>
 8009d8c:	3c01      	subs	r4, #1
 8009d8e:	f101 0814 	add.w	r8, r1, #20
 8009d92:	f100 0514 	add.w	r5, r0, #20
 8009d96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009da0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009da4:	3301      	adds	r3, #1
 8009da6:	429a      	cmp	r2, r3
 8009da8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009db0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009db4:	d331      	bcc.n	8009e1a <quorem+0x9e>
 8009db6:	f04f 0e00 	mov.w	lr, #0
 8009dba:	4640      	mov	r0, r8
 8009dbc:	46ac      	mov	ip, r5
 8009dbe:	46f2      	mov	sl, lr
 8009dc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009dc4:	b293      	uxth	r3, r2
 8009dc6:	fb06 e303 	mla	r3, r6, r3, lr
 8009dca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ebaa 0303 	sub.w	r3, sl, r3
 8009dd4:	0c12      	lsrs	r2, r2, #16
 8009dd6:	f8dc a000 	ldr.w	sl, [ip]
 8009dda:	fb06 e202 	mla	r2, r6, r2, lr
 8009dde:	fa13 f38a 	uxtah	r3, r3, sl
 8009de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009de6:	fa1f fa82 	uxth.w	sl, r2
 8009dea:	f8dc 2000 	ldr.w	r2, [ip]
 8009dee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009df2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dfc:	4581      	cmp	r9, r0
 8009dfe:	f84c 3b04 	str.w	r3, [ip], #4
 8009e02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e06:	d2db      	bcs.n	8009dc0 <quorem+0x44>
 8009e08:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e0c:	b92b      	cbnz	r3, 8009e1a <quorem+0x9e>
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	3b04      	subs	r3, #4
 8009e12:	429d      	cmp	r5, r3
 8009e14:	461a      	mov	r2, r3
 8009e16:	d32e      	bcc.n	8009e76 <quorem+0xfa>
 8009e18:	613c      	str	r4, [r7, #16]
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f001 fad6 	bl	800b3cc <__mcmp>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	db24      	blt.n	8009e6e <quorem+0xf2>
 8009e24:	3601      	adds	r6, #1
 8009e26:	4628      	mov	r0, r5
 8009e28:	f04f 0c00 	mov.w	ip, #0
 8009e2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e30:	f8d0 e000 	ldr.w	lr, [r0]
 8009e34:	b293      	uxth	r3, r2
 8009e36:	ebac 0303 	sub.w	r3, ip, r3
 8009e3a:	0c12      	lsrs	r2, r2, #16
 8009e3c:	fa13 f38e 	uxtah	r3, r3, lr
 8009e40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e4e:	45c1      	cmp	r9, r8
 8009e50:	f840 3b04 	str.w	r3, [r0], #4
 8009e54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e58:	d2e8      	bcs.n	8009e2c <quorem+0xb0>
 8009e5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e62:	b922      	cbnz	r2, 8009e6e <quorem+0xf2>
 8009e64:	3b04      	subs	r3, #4
 8009e66:	429d      	cmp	r5, r3
 8009e68:	461a      	mov	r2, r3
 8009e6a:	d30a      	bcc.n	8009e82 <quorem+0x106>
 8009e6c:	613c      	str	r4, [r7, #16]
 8009e6e:	4630      	mov	r0, r6
 8009e70:	b003      	add	sp, #12
 8009e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e76:	6812      	ldr	r2, [r2, #0]
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	2a00      	cmp	r2, #0
 8009e7c:	d1cc      	bne.n	8009e18 <quorem+0x9c>
 8009e7e:	3c01      	subs	r4, #1
 8009e80:	e7c7      	b.n	8009e12 <quorem+0x96>
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	3b04      	subs	r3, #4
 8009e86:	2a00      	cmp	r2, #0
 8009e88:	d1f0      	bne.n	8009e6c <quorem+0xf0>
 8009e8a:	3c01      	subs	r4, #1
 8009e8c:	e7eb      	b.n	8009e66 <quorem+0xea>
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e7ee      	b.n	8009e70 <quorem+0xf4>
 8009e92:	0000      	movs	r0, r0
 8009e94:	0000      	movs	r0, r0
	...

08009e98 <_dtoa_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	ed2d 8b02 	vpush	{d8}
 8009ea0:	ec57 6b10 	vmov	r6, r7, d0
 8009ea4:	b095      	sub	sp, #84	; 0x54
 8009ea6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ea8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009eac:	9105      	str	r1, [sp, #20]
 8009eae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8009eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eb8:	b975      	cbnz	r5, 8009ed8 <_dtoa_r+0x40>
 8009eba:	2010      	movs	r0, #16
 8009ebc:	f7ff f8e6 	bl	800908c <malloc>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6260      	str	r0, [r4, #36]	; 0x24
 8009ec4:	b920      	cbnz	r0, 8009ed0 <_dtoa_r+0x38>
 8009ec6:	4bb2      	ldr	r3, [pc, #712]	; (800a190 <_dtoa_r+0x2f8>)
 8009ec8:	21ea      	movs	r1, #234	; 0xea
 8009eca:	48b2      	ldr	r0, [pc, #712]	; (800a194 <_dtoa_r+0x2fc>)
 8009ecc:	f001 fbe2 	bl	800b694 <__assert_func>
 8009ed0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ed4:	6005      	str	r5, [r0, #0]
 8009ed6:	60c5      	str	r5, [r0, #12]
 8009ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eda:	6819      	ldr	r1, [r3, #0]
 8009edc:	b151      	cbz	r1, 8009ef4 <_dtoa_r+0x5c>
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	604a      	str	r2, [r1, #4]
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4093      	lsls	r3, r2
 8009ee6:	608b      	str	r3, [r1, #8]
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f001 f831 	bl	800af50 <_Bfree>
 8009eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	1e3b      	subs	r3, r7, #0
 8009ef6:	bfb9      	ittee	lt
 8009ef8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009efc:	9303      	strlt	r3, [sp, #12]
 8009efe:	2300      	movge	r3, #0
 8009f00:	f8c8 3000 	strge.w	r3, [r8]
 8009f04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009f08:	4ba3      	ldr	r3, [pc, #652]	; (800a198 <_dtoa_r+0x300>)
 8009f0a:	bfbc      	itt	lt
 8009f0c:	2201      	movlt	r2, #1
 8009f0e:	f8c8 2000 	strlt.w	r2, [r8]
 8009f12:	ea33 0309 	bics.w	r3, r3, r9
 8009f16:	d11b      	bne.n	8009f50 <_dtoa_r+0xb8>
 8009f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f24:	4333      	orrs	r3, r6
 8009f26:	f000 857a 	beq.w	800aa1e <_dtoa_r+0xb86>
 8009f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f2c:	b963      	cbnz	r3, 8009f48 <_dtoa_r+0xb0>
 8009f2e:	4b9b      	ldr	r3, [pc, #620]	; (800a19c <_dtoa_r+0x304>)
 8009f30:	e024      	b.n	8009f7c <_dtoa_r+0xe4>
 8009f32:	4b9b      	ldr	r3, [pc, #620]	; (800a1a0 <_dtoa_r+0x308>)
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	3308      	adds	r3, #8
 8009f38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	9800      	ldr	r0, [sp, #0]
 8009f3e:	b015      	add	sp, #84	; 0x54
 8009f40:	ecbd 8b02 	vpop	{d8}
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	4b94      	ldr	r3, [pc, #592]	; (800a19c <_dtoa_r+0x304>)
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	3303      	adds	r3, #3
 8009f4e:	e7f3      	b.n	8009f38 <_dtoa_r+0xa0>
 8009f50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f54:	2200      	movs	r2, #0
 8009f56:	ec51 0b17 	vmov	r0, r1, d7
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009f60:	f7f6 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f64:	4680      	mov	r8, r0
 8009f66:	b158      	cbz	r0, 8009f80 <_dtoa_r+0xe8>
 8009f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 8551 	beq.w	800aa18 <_dtoa_r+0xb80>
 8009f76:	488b      	ldr	r0, [pc, #556]	; (800a1a4 <_dtoa_r+0x30c>)
 8009f78:	6018      	str	r0, [r3, #0]
 8009f7a:	1e43      	subs	r3, r0, #1
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	e7dd      	b.n	8009f3c <_dtoa_r+0xa4>
 8009f80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009f84:	aa12      	add	r2, sp, #72	; 0x48
 8009f86:	a913      	add	r1, sp, #76	; 0x4c
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f001 fac3 	bl	800b514 <__d2b>
 8009f8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f92:	4683      	mov	fp, r0
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	d07c      	beq.n	800a092 <_dtoa_r+0x1fa>
 8009f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fa2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009fa6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009faa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009fae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fb2:	4b7d      	ldr	r3, [pc, #500]	; (800a1a8 <_dtoa_r+0x310>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4639      	mov	r1, r7
 8009fba:	f7f6 f965 	bl	8000288 <__aeabi_dsub>
 8009fbe:	a36e      	add	r3, pc, #440	; (adr r3, 800a178 <_dtoa_r+0x2e0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 fb18 	bl	80005f8 <__aeabi_dmul>
 8009fc8:	a36d      	add	r3, pc, #436	; (adr r3, 800a180 <_dtoa_r+0x2e8>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 f95d 	bl	800028c <__adddf3>
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	f7f6 faa4 	bl	8000524 <__aeabi_i2d>
 8009fdc:	a36a      	add	r3, pc, #424	; (adr r3, 800a188 <_dtoa_r+0x2f0>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	f7f6 fb09 	bl	80005f8 <__aeabi_dmul>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 f94d 	bl	800028c <__adddf3>
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460f      	mov	r7, r1
 8009ff6:	f7f6 fdaf 	bl	8000b58 <__aeabi_d2iz>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	2300      	movs	r3, #0
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd6a 	bl	8000adc <__aeabi_dcmplt>
 800a008:	b148      	cbz	r0, 800a01e <_dtoa_r+0x186>
 800a00a:	4650      	mov	r0, sl
 800a00c:	f7f6 fa8a 	bl	8000524 <__aeabi_i2d>
 800a010:	4632      	mov	r2, r6
 800a012:	463b      	mov	r3, r7
 800a014:	f7f6 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800a018:	b908      	cbnz	r0, 800a01e <_dtoa_r+0x186>
 800a01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a01e:	f1ba 0f16 	cmp.w	sl, #22
 800a022:	d854      	bhi.n	800a0ce <_dtoa_r+0x236>
 800a024:	4b61      	ldr	r3, [pc, #388]	; (800a1ac <_dtoa_r+0x314>)
 800a026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a032:	f7f6 fd53 	bl	8000adc <__aeabi_dcmplt>
 800a036:	2800      	cmp	r0, #0
 800a038:	d04b      	beq.n	800a0d2 <_dtoa_r+0x23a>
 800a03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a03e:	2300      	movs	r3, #0
 800a040:	930e      	str	r3, [sp, #56]	; 0x38
 800a042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a044:	1b5d      	subs	r5, r3, r5
 800a046:	1e6b      	subs	r3, r5, #1
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	bf43      	ittte	mi
 800a04c:	2300      	movmi	r3, #0
 800a04e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a052:	9304      	strmi	r3, [sp, #16]
 800a054:	f04f 0800 	movpl.w	r8, #0
 800a058:	f1ba 0f00 	cmp.w	sl, #0
 800a05c:	db3b      	blt.n	800a0d6 <_dtoa_r+0x23e>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a064:	4453      	add	r3, sl
 800a066:	9304      	str	r3, [sp, #16]
 800a068:	2300      	movs	r3, #0
 800a06a:	9306      	str	r3, [sp, #24]
 800a06c:	9b05      	ldr	r3, [sp, #20]
 800a06e:	2b09      	cmp	r3, #9
 800a070:	d869      	bhi.n	800a146 <_dtoa_r+0x2ae>
 800a072:	2b05      	cmp	r3, #5
 800a074:	bfc4      	itt	gt
 800a076:	3b04      	subgt	r3, #4
 800a078:	9305      	strgt	r3, [sp, #20]
 800a07a:	9b05      	ldr	r3, [sp, #20]
 800a07c:	f1a3 0302 	sub.w	r3, r3, #2
 800a080:	bfcc      	ite	gt
 800a082:	2500      	movgt	r5, #0
 800a084:	2501      	movle	r5, #1
 800a086:	2b03      	cmp	r3, #3
 800a088:	d869      	bhi.n	800a15e <_dtoa_r+0x2c6>
 800a08a:	e8df f003 	tbb	[pc, r3]
 800a08e:	4e2c      	.short	0x4e2c
 800a090:	5a4c      	.short	0x5a4c
 800a092:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a096:	441d      	add	r5, r3
 800a098:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	bfc1      	itttt	gt
 800a0a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a0a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a0ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a0b0:	bfda      	itte	le
 800a0b2:	f1c3 0320 	rsble	r3, r3, #32
 800a0b6:	fa06 f003 	lslle.w	r0, r6, r3
 800a0ba:	4318      	orrgt	r0, r3
 800a0bc:	f7f6 fa22 	bl	8000504 <__aeabi_ui2d>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0c8:	3d01      	subs	r5, #1
 800a0ca:	9310      	str	r3, [sp, #64]	; 0x40
 800a0cc:	e771      	b.n	8009fb2 <_dtoa_r+0x11a>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e7b6      	b.n	800a040 <_dtoa_r+0x1a8>
 800a0d2:	900e      	str	r0, [sp, #56]	; 0x38
 800a0d4:	e7b5      	b.n	800a042 <_dtoa_r+0x1aa>
 800a0d6:	f1ca 0300 	rsb	r3, sl, #0
 800a0da:	9306      	str	r3, [sp, #24]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	eba8 080a 	sub.w	r8, r8, sl
 800a0e2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0e4:	e7c2      	b.n	800a06c <_dtoa_r+0x1d4>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	9308      	str	r3, [sp, #32]
 800a0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dc39      	bgt.n	800a164 <_dtoa_r+0x2cc>
 800a0f0:	f04f 0901 	mov.w	r9, #1
 800a0f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a0fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a100:	2200      	movs	r2, #0
 800a102:	6042      	str	r2, [r0, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	f102 0614 	add.w	r6, r2, #20
 800a10a:	429e      	cmp	r6, r3
 800a10c:	6841      	ldr	r1, [r0, #4]
 800a10e:	d92f      	bls.n	800a170 <_dtoa_r+0x2d8>
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fedd 	bl	800aed0 <_Balloc>
 800a116:	9000      	str	r0, [sp, #0]
 800a118:	2800      	cmp	r0, #0
 800a11a:	d14b      	bne.n	800a1b4 <_dtoa_r+0x31c>
 800a11c:	4b24      	ldr	r3, [pc, #144]	; (800a1b0 <_dtoa_r+0x318>)
 800a11e:	4602      	mov	r2, r0
 800a120:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a124:	e6d1      	b.n	8009eca <_dtoa_r+0x32>
 800a126:	2301      	movs	r3, #1
 800a128:	e7de      	b.n	800a0e8 <_dtoa_r+0x250>
 800a12a:	2300      	movs	r3, #0
 800a12c:	9308      	str	r3, [sp, #32]
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	eb0a 0903 	add.w	r9, sl, r3
 800a134:	f109 0301 	add.w	r3, r9, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	bfb8      	it	lt
 800a13e:	2301      	movlt	r3, #1
 800a140:	e7dd      	b.n	800a0fe <_dtoa_r+0x266>
 800a142:	2301      	movs	r3, #1
 800a144:	e7f2      	b.n	800a12c <_dtoa_r+0x294>
 800a146:	2501      	movs	r5, #1
 800a148:	2300      	movs	r3, #0
 800a14a:	9305      	str	r3, [sp, #20]
 800a14c:	9508      	str	r5, [sp, #32]
 800a14e:	f04f 39ff 	mov.w	r9, #4294967295
 800a152:	2200      	movs	r2, #0
 800a154:	f8cd 9004 	str.w	r9, [sp, #4]
 800a158:	2312      	movs	r3, #18
 800a15a:	9209      	str	r2, [sp, #36]	; 0x24
 800a15c:	e7cf      	b.n	800a0fe <_dtoa_r+0x266>
 800a15e:	2301      	movs	r3, #1
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	e7f4      	b.n	800a14e <_dtoa_r+0x2b6>
 800a164:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a168:	f8cd 9004 	str.w	r9, [sp, #4]
 800a16c:	464b      	mov	r3, r9
 800a16e:	e7c6      	b.n	800a0fe <_dtoa_r+0x266>
 800a170:	3101      	adds	r1, #1
 800a172:	6041      	str	r1, [r0, #4]
 800a174:	0052      	lsls	r2, r2, #1
 800a176:	e7c6      	b.n	800a106 <_dtoa_r+0x26e>
 800a178:	636f4361 	.word	0x636f4361
 800a17c:	3fd287a7 	.word	0x3fd287a7
 800a180:	8b60c8b3 	.word	0x8b60c8b3
 800a184:	3fc68a28 	.word	0x3fc68a28
 800a188:	509f79fb 	.word	0x509f79fb
 800a18c:	3fd34413 	.word	0x3fd34413
 800a190:	08017c01 	.word	0x08017c01
 800a194:	08017c18 	.word	0x08017c18
 800a198:	7ff00000 	.word	0x7ff00000
 800a19c:	08017bfd 	.word	0x08017bfd
 800a1a0:	08017bf4 	.word	0x08017bf4
 800a1a4:	08017bd1 	.word	0x08017bd1
 800a1a8:	3ff80000 	.word	0x3ff80000
 800a1ac:	08017d70 	.word	0x08017d70
 800a1b0:	08017c77 	.word	0x08017c77
 800a1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1b6:	9a00      	ldr	r2, [sp, #0]
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	2b0e      	cmp	r3, #14
 800a1be:	f200 80ad 	bhi.w	800a31c <_dtoa_r+0x484>
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	f000 80aa 	beq.w	800a31c <_dtoa_r+0x484>
 800a1c8:	f1ba 0f00 	cmp.w	sl, #0
 800a1cc:	dd36      	ble.n	800a23c <_dtoa_r+0x3a4>
 800a1ce:	4ac3      	ldr	r2, [pc, #780]	; (800a4dc <_dtoa_r+0x644>)
 800a1d0:	f00a 030f 	and.w	r3, sl, #15
 800a1d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1d8:	ed93 7b00 	vldr	d7, [r3]
 800a1dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a1e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a1e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a1e8:	eef0 8a67 	vmov.f32	s17, s15
 800a1ec:	d016      	beq.n	800a21c <_dtoa_r+0x384>
 800a1ee:	4bbc      	ldr	r3, [pc, #752]	; (800a4e0 <_dtoa_r+0x648>)
 800a1f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1f8:	f7f6 fb28 	bl	800084c <__aeabi_ddiv>
 800a1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a200:	f007 070f 	and.w	r7, r7, #15
 800a204:	2503      	movs	r5, #3
 800a206:	4eb6      	ldr	r6, [pc, #728]	; (800a4e0 <_dtoa_r+0x648>)
 800a208:	b957      	cbnz	r7, 800a220 <_dtoa_r+0x388>
 800a20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20e:	ec53 2b18 	vmov	r2, r3, d8
 800a212:	f7f6 fb1b 	bl	800084c <__aeabi_ddiv>
 800a216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a21a:	e029      	b.n	800a270 <_dtoa_r+0x3d8>
 800a21c:	2502      	movs	r5, #2
 800a21e:	e7f2      	b.n	800a206 <_dtoa_r+0x36e>
 800a220:	07f9      	lsls	r1, r7, #31
 800a222:	d508      	bpl.n	800a236 <_dtoa_r+0x39e>
 800a224:	ec51 0b18 	vmov	r0, r1, d8
 800a228:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a22c:	f7f6 f9e4 	bl	80005f8 <__aeabi_dmul>
 800a230:	ec41 0b18 	vmov	d8, r0, r1
 800a234:	3501      	adds	r5, #1
 800a236:	107f      	asrs	r7, r7, #1
 800a238:	3608      	adds	r6, #8
 800a23a:	e7e5      	b.n	800a208 <_dtoa_r+0x370>
 800a23c:	f000 80a6 	beq.w	800a38c <_dtoa_r+0x4f4>
 800a240:	f1ca 0600 	rsb	r6, sl, #0
 800a244:	4ba5      	ldr	r3, [pc, #660]	; (800a4dc <_dtoa_r+0x644>)
 800a246:	4fa6      	ldr	r7, [pc, #664]	; (800a4e0 <_dtoa_r+0x648>)
 800a248:	f006 020f 	and.w	r2, r6, #15
 800a24c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a258:	f7f6 f9ce 	bl	80005f8 <__aeabi_dmul>
 800a25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a260:	1136      	asrs	r6, r6, #4
 800a262:	2300      	movs	r3, #0
 800a264:	2502      	movs	r5, #2
 800a266:	2e00      	cmp	r6, #0
 800a268:	f040 8085 	bne.w	800a376 <_dtoa_r+0x4de>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1d2      	bne.n	800a216 <_dtoa_r+0x37e>
 800a270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 808c 	beq.w	800a390 <_dtoa_r+0x4f8>
 800a278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a27c:	4b99      	ldr	r3, [pc, #612]	; (800a4e4 <_dtoa_r+0x64c>)
 800a27e:	2200      	movs	r2, #0
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fc2a 	bl	8000adc <__aeabi_dcmplt>
 800a288:	2800      	cmp	r0, #0
 800a28a:	f000 8081 	beq.w	800a390 <_dtoa_r+0x4f8>
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d07d      	beq.n	800a390 <_dtoa_r+0x4f8>
 800a294:	f1b9 0f00 	cmp.w	r9, #0
 800a298:	dd3c      	ble.n	800a314 <_dtoa_r+0x47c>
 800a29a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a29e:	9307      	str	r3, [sp, #28]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4b91      	ldr	r3, [pc, #580]	; (800a4e8 <_dtoa_r+0x650>)
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f7f6 f9a6 	bl	80005f8 <__aeabi_dmul>
 800a2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a2b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f7f6 f932 	bl	8000524 <__aeabi_i2d>
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	f7f6 f998 	bl	80005f8 <__aeabi_dmul>
 800a2c8:	4b88      	ldr	r3, [pc, #544]	; (800a4ec <_dtoa_r+0x654>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f7f5 ffde 	bl	800028c <__adddf3>
 800a2d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d8:	9303      	str	r3, [sp, #12]
 800a2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d15c      	bne.n	800a39a <_dtoa_r+0x502>
 800a2e0:	4b83      	ldr	r3, [pc, #524]	; (800a4f0 <_dtoa_r+0x658>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7f5 ffce 	bl	8000288 <__aeabi_dsub>
 800a2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	f7f6 fc10 	bl	8000b18 <__aeabi_dcmpgt>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f040 8296 	bne.w	800a82a <_dtoa_r+0x992>
 800a2fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a302:	4630      	mov	r0, r6
 800a304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a308:	4639      	mov	r1, r7
 800a30a:	f7f6 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f040 8288 	bne.w	800a824 <_dtoa_r+0x98c>
 800a314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a31c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f2c0 8158 	blt.w	800a5d4 <_dtoa_r+0x73c>
 800a324:	f1ba 0f0e 	cmp.w	sl, #14
 800a328:	f300 8154 	bgt.w	800a5d4 <_dtoa_r+0x73c>
 800a32c:	4b6b      	ldr	r3, [pc, #428]	; (800a4dc <_dtoa_r+0x644>)
 800a32e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a332:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f280 80e3 	bge.w	800a504 <_dtoa_r+0x66c>
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f300 80df 	bgt.w	800a504 <_dtoa_r+0x66c>
 800a346:	f040 826d 	bne.w	800a824 <_dtoa_r+0x98c>
 800a34a:	4b69      	ldr	r3, [pc, #420]	; (800a4f0 <_dtoa_r+0x658>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 f951 	bl	80005f8 <__aeabi_dmul>
 800a356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a35a:	f7f6 fbd3 	bl	8000b04 <__aeabi_dcmpge>
 800a35e:	9e01      	ldr	r6, [sp, #4]
 800a360:	4637      	mov	r7, r6
 800a362:	2800      	cmp	r0, #0
 800a364:	f040 8243 	bne.w	800a7ee <_dtoa_r+0x956>
 800a368:	9d00      	ldr	r5, [sp, #0]
 800a36a:	2331      	movs	r3, #49	; 0x31
 800a36c:	f805 3b01 	strb.w	r3, [r5], #1
 800a370:	f10a 0a01 	add.w	sl, sl, #1
 800a374:	e23f      	b.n	800a7f6 <_dtoa_r+0x95e>
 800a376:	07f2      	lsls	r2, r6, #31
 800a378:	d505      	bpl.n	800a386 <_dtoa_r+0x4ee>
 800a37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a37e:	f7f6 f93b 	bl	80005f8 <__aeabi_dmul>
 800a382:	3501      	adds	r5, #1
 800a384:	2301      	movs	r3, #1
 800a386:	1076      	asrs	r6, r6, #1
 800a388:	3708      	adds	r7, #8
 800a38a:	e76c      	b.n	800a266 <_dtoa_r+0x3ce>
 800a38c:	2502      	movs	r5, #2
 800a38e:	e76f      	b.n	800a270 <_dtoa_r+0x3d8>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	f8cd a01c 	str.w	sl, [sp, #28]
 800a396:	930c      	str	r3, [sp, #48]	; 0x30
 800a398:	e78d      	b.n	800a2b6 <_dtoa_r+0x41e>
 800a39a:	9900      	ldr	r1, [sp, #0]
 800a39c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a0:	4b4e      	ldr	r3, [pc, #312]	; (800a4dc <_dtoa_r+0x644>)
 800a3a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3a6:	4401      	add	r1, r0
 800a3a8:	9102      	str	r1, [sp, #8]
 800a3aa:	9908      	ldr	r1, [sp, #32]
 800a3ac:	eeb0 8a47 	vmov.f32	s16, s14
 800a3b0:	eef0 8a67 	vmov.f32	s17, s15
 800a3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	d045      	beq.n	800a44c <_dtoa_r+0x5b4>
 800a3c0:	494c      	ldr	r1, [pc, #304]	; (800a4f4 <_dtoa_r+0x65c>)
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	f7f6 fa42 	bl	800084c <__aeabi_ddiv>
 800a3c8:	ec53 2b18 	vmov	r2, r3, d8
 800a3cc:	f7f5 ff5c 	bl	8000288 <__aeabi_dsub>
 800a3d0:	9d00      	ldr	r5, [sp, #0]
 800a3d2:	ec41 0b18 	vmov	d8, r0, r1
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7f6 fbbd 	bl	8000b58 <__aeabi_d2iz>
 800a3de:	900c      	str	r0, [sp, #48]	; 0x30
 800a3e0:	f7f6 f8a0 	bl	8000524 <__aeabi_i2d>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f5 ff4c 	bl	8000288 <__aeabi_dsub>
 800a3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f2:	3330      	adds	r3, #48	; 0x30
 800a3f4:	f805 3b01 	strb.w	r3, [r5], #1
 800a3f8:	ec53 2b18 	vmov	r2, r3, d8
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	f7f6 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800a404:	2800      	cmp	r0, #0
 800a406:	d165      	bne.n	800a4d4 <_dtoa_r+0x63c>
 800a408:	4632      	mov	r2, r6
 800a40a:	463b      	mov	r3, r7
 800a40c:	4935      	ldr	r1, [pc, #212]	; (800a4e4 <_dtoa_r+0x64c>)
 800a40e:	2000      	movs	r0, #0
 800a410:	f7f5 ff3a 	bl	8000288 <__aeabi_dsub>
 800a414:	ec53 2b18 	vmov	r2, r3, d8
 800a418:	f7f6 fb60 	bl	8000adc <__aeabi_dcmplt>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	f040 80b9 	bne.w	800a594 <_dtoa_r+0x6fc>
 800a422:	9b02      	ldr	r3, [sp, #8]
 800a424:	429d      	cmp	r5, r3
 800a426:	f43f af75 	beq.w	800a314 <_dtoa_r+0x47c>
 800a42a:	4b2f      	ldr	r3, [pc, #188]	; (800a4e8 <_dtoa_r+0x650>)
 800a42c:	ec51 0b18 	vmov	r0, r1, d8
 800a430:	2200      	movs	r2, #0
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	4b2c      	ldr	r3, [pc, #176]	; (800a4e8 <_dtoa_r+0x650>)
 800a438:	ec41 0b18 	vmov	d8, r0, r1
 800a43c:	2200      	movs	r2, #0
 800a43e:	4630      	mov	r0, r6
 800a440:	4639      	mov	r1, r7
 800a442:	f7f6 f8d9 	bl	80005f8 <__aeabi_dmul>
 800a446:	4606      	mov	r6, r0
 800a448:	460f      	mov	r7, r1
 800a44a:	e7c4      	b.n	800a3d6 <_dtoa_r+0x53e>
 800a44c:	ec51 0b17 	vmov	r0, r1, d7
 800a450:	f7f6 f8d2 	bl	80005f8 <__aeabi_dmul>
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	9d00      	ldr	r5, [sp, #0]
 800a458:	930c      	str	r3, [sp, #48]	; 0x30
 800a45a:	ec41 0b18 	vmov	d8, r0, r1
 800a45e:	4639      	mov	r1, r7
 800a460:	4630      	mov	r0, r6
 800a462:	f7f6 fb79 	bl	8000b58 <__aeabi_d2iz>
 800a466:	9011      	str	r0, [sp, #68]	; 0x44
 800a468:	f7f6 f85c 	bl	8000524 <__aeabi_i2d>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a47a:	3330      	adds	r3, #48	; 0x30
 800a47c:	f805 3b01 	strb.w	r3, [r5], #1
 800a480:	9b02      	ldr	r3, [sp, #8]
 800a482:	429d      	cmp	r5, r3
 800a484:	4606      	mov	r6, r0
 800a486:	460f      	mov	r7, r1
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	d134      	bne.n	800a4f8 <_dtoa_r+0x660>
 800a48e:	4b19      	ldr	r3, [pc, #100]	; (800a4f4 <_dtoa_r+0x65c>)
 800a490:	ec51 0b18 	vmov	r0, r1, d8
 800a494:	f7f5 fefa 	bl	800028c <__adddf3>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f6 fb3a 	bl	8000b18 <__aeabi_dcmpgt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d175      	bne.n	800a594 <_dtoa_r+0x6fc>
 800a4a8:	ec53 2b18 	vmov	r2, r3, d8
 800a4ac:	4911      	ldr	r1, [pc, #68]	; (800a4f4 <_dtoa_r+0x65c>)
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f7f5 feea 	bl	8000288 <__aeabi_dsub>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f6 fb0e 	bl	8000adc <__aeabi_dcmplt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f43f af27 	beq.w	800a314 <_dtoa_r+0x47c>
 800a4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4c8:	1e6b      	subs	r3, r5, #1
 800a4ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a4cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4d0:	2b30      	cmp	r3, #48	; 0x30
 800a4d2:	d0f8      	beq.n	800a4c6 <_dtoa_r+0x62e>
 800a4d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a4d8:	e04a      	b.n	800a570 <_dtoa_r+0x6d8>
 800a4da:	bf00      	nop
 800a4dc:	08017d70 	.word	0x08017d70
 800a4e0:	08017d48 	.word	0x08017d48
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	40240000 	.word	0x40240000
 800a4ec:	401c0000 	.word	0x401c0000
 800a4f0:	40140000 	.word	0x40140000
 800a4f4:	3fe00000 	.word	0x3fe00000
 800a4f8:	4baf      	ldr	r3, [pc, #700]	; (800a7b8 <_dtoa_r+0x920>)
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	e7ac      	b.n	800a45e <_dtoa_r+0x5c6>
 800a504:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a508:	9d00      	ldr	r5, [sp, #0]
 800a50a:	4642      	mov	r2, r8
 800a50c:	464b      	mov	r3, r9
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 f99b 	bl	800084c <__aeabi_ddiv>
 800a516:	f7f6 fb1f 	bl	8000b58 <__aeabi_d2iz>
 800a51a:	9002      	str	r0, [sp, #8]
 800a51c:	f7f6 f802 	bl	8000524 <__aeabi_i2d>
 800a520:	4642      	mov	r2, r8
 800a522:	464b      	mov	r3, r9
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 feaa 	bl	8000288 <__aeabi_dsub>
 800a534:	9e02      	ldr	r6, [sp, #8]
 800a536:	9f01      	ldr	r7, [sp, #4]
 800a538:	3630      	adds	r6, #48	; 0x30
 800a53a:	f805 6b01 	strb.w	r6, [r5], #1
 800a53e:	9e00      	ldr	r6, [sp, #0]
 800a540:	1bae      	subs	r6, r5, r6
 800a542:	42b7      	cmp	r7, r6
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	d137      	bne.n	800a5ba <_dtoa_r+0x722>
 800a54a:	f7f5 fe9f 	bl	800028c <__adddf3>
 800a54e:	4642      	mov	r2, r8
 800a550:	464b      	mov	r3, r9
 800a552:	4606      	mov	r6, r0
 800a554:	460f      	mov	r7, r1
 800a556:	f7f6 fadf 	bl	8000b18 <__aeabi_dcmpgt>
 800a55a:	b9c8      	cbnz	r0, 800a590 <_dtoa_r+0x6f8>
 800a55c:	4642      	mov	r2, r8
 800a55e:	464b      	mov	r3, r9
 800a560:	4630      	mov	r0, r6
 800a562:	4639      	mov	r1, r7
 800a564:	f7f6 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a568:	b110      	cbz	r0, 800a570 <_dtoa_r+0x6d8>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	07d9      	lsls	r1, r3, #31
 800a56e:	d40f      	bmi.n	800a590 <_dtoa_r+0x6f8>
 800a570:	4620      	mov	r0, r4
 800a572:	4659      	mov	r1, fp
 800a574:	f000 fcec 	bl	800af50 <_Bfree>
 800a578:	2300      	movs	r3, #0
 800a57a:	702b      	strb	r3, [r5, #0]
 800a57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a57e:	f10a 0001 	add.w	r0, sl, #1
 800a582:	6018      	str	r0, [r3, #0]
 800a584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a586:	2b00      	cmp	r3, #0
 800a588:	f43f acd8 	beq.w	8009f3c <_dtoa_r+0xa4>
 800a58c:	601d      	str	r5, [r3, #0]
 800a58e:	e4d5      	b.n	8009f3c <_dtoa_r+0xa4>
 800a590:	f8cd a01c 	str.w	sl, [sp, #28]
 800a594:	462b      	mov	r3, r5
 800a596:	461d      	mov	r5, r3
 800a598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a59c:	2a39      	cmp	r2, #57	; 0x39
 800a59e:	d108      	bne.n	800a5b2 <_dtoa_r+0x71a>
 800a5a0:	9a00      	ldr	r2, [sp, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d1f7      	bne.n	800a596 <_dtoa_r+0x6fe>
 800a5a6:	9a07      	ldr	r2, [sp, #28]
 800a5a8:	9900      	ldr	r1, [sp, #0]
 800a5aa:	3201      	adds	r2, #1
 800a5ac:	9207      	str	r2, [sp, #28]
 800a5ae:	2230      	movs	r2, #48	; 0x30
 800a5b0:	700a      	strb	r2, [r1, #0]
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	3201      	adds	r2, #1
 800a5b6:	701a      	strb	r2, [r3, #0]
 800a5b8:	e78c      	b.n	800a4d4 <_dtoa_r+0x63c>
 800a5ba:	4b7f      	ldr	r3, [pc, #508]	; (800a7b8 <_dtoa_r+0x920>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	f7f6 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d09b      	beq.n	800a50a <_dtoa_r+0x672>
 800a5d2:	e7cd      	b.n	800a570 <_dtoa_r+0x6d8>
 800a5d4:	9a08      	ldr	r2, [sp, #32]
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	f000 80c4 	beq.w	800a764 <_dtoa_r+0x8cc>
 800a5dc:	9a05      	ldr	r2, [sp, #20]
 800a5de:	2a01      	cmp	r2, #1
 800a5e0:	f300 80a8 	bgt.w	800a734 <_dtoa_r+0x89c>
 800a5e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	f000 80a0 	beq.w	800a72c <_dtoa_r+0x894>
 800a5ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5f0:	9e06      	ldr	r6, [sp, #24]
 800a5f2:	4645      	mov	r5, r8
 800a5f4:	9a04      	ldr	r2, [sp, #16]
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	441a      	add	r2, r3
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4498      	add	r8, r3
 800a5fe:	9204      	str	r2, [sp, #16]
 800a600:	f000 fd62 	bl	800b0c8 <__i2b>
 800a604:	4607      	mov	r7, r0
 800a606:	2d00      	cmp	r5, #0
 800a608:	dd0b      	ble.n	800a622 <_dtoa_r+0x78a>
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd08      	ble.n	800a622 <_dtoa_r+0x78a>
 800a610:	42ab      	cmp	r3, r5
 800a612:	9a04      	ldr	r2, [sp, #16]
 800a614:	bfa8      	it	ge
 800a616:	462b      	movge	r3, r5
 800a618:	eba8 0803 	sub.w	r8, r8, r3
 800a61c:	1aed      	subs	r5, r5, r3
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	9b06      	ldr	r3, [sp, #24]
 800a624:	b1fb      	cbz	r3, 800a666 <_dtoa_r+0x7ce>
 800a626:	9b08      	ldr	r3, [sp, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 809f 	beq.w	800a76c <_dtoa_r+0x8d4>
 800a62e:	2e00      	cmp	r6, #0
 800a630:	dd11      	ble.n	800a656 <_dtoa_r+0x7be>
 800a632:	4639      	mov	r1, r7
 800a634:	4632      	mov	r2, r6
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fe02 	bl	800b240 <__pow5mult>
 800a63c:	465a      	mov	r2, fp
 800a63e:	4601      	mov	r1, r0
 800a640:	4607      	mov	r7, r0
 800a642:	4620      	mov	r0, r4
 800a644:	f000 fd56 	bl	800b0f4 <__multiply>
 800a648:	4659      	mov	r1, fp
 800a64a:	9007      	str	r0, [sp, #28]
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fc7f 	bl	800af50 <_Bfree>
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	469b      	mov	fp, r3
 800a656:	9b06      	ldr	r3, [sp, #24]
 800a658:	1b9a      	subs	r2, r3, r6
 800a65a:	d004      	beq.n	800a666 <_dtoa_r+0x7ce>
 800a65c:	4659      	mov	r1, fp
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fdee 	bl	800b240 <__pow5mult>
 800a664:	4683      	mov	fp, r0
 800a666:	2101      	movs	r1, #1
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fd2d 	bl	800b0c8 <__i2b>
 800a66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a670:	2b00      	cmp	r3, #0
 800a672:	4606      	mov	r6, r0
 800a674:	dd7c      	ble.n	800a770 <_dtoa_r+0x8d8>
 800a676:	461a      	mov	r2, r3
 800a678:	4601      	mov	r1, r0
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 fde0 	bl	800b240 <__pow5mult>
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	2b01      	cmp	r3, #1
 800a684:	4606      	mov	r6, r0
 800a686:	dd76      	ble.n	800a776 <_dtoa_r+0x8de>
 800a688:	2300      	movs	r3, #0
 800a68a:	9306      	str	r3, [sp, #24]
 800a68c:	6933      	ldr	r3, [r6, #16]
 800a68e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a692:	6918      	ldr	r0, [r3, #16]
 800a694:	f000 fcc8 	bl	800b028 <__hi0bits>
 800a698:	f1c0 0020 	rsb	r0, r0, #32
 800a69c:	9b04      	ldr	r3, [sp, #16]
 800a69e:	4418      	add	r0, r3
 800a6a0:	f010 001f 	ands.w	r0, r0, #31
 800a6a4:	f000 8086 	beq.w	800a7b4 <_dtoa_r+0x91c>
 800a6a8:	f1c0 0320 	rsb	r3, r0, #32
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	dd7f      	ble.n	800a7b0 <_dtoa_r+0x918>
 800a6b0:	f1c0 001c 	rsb	r0, r0, #28
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	4403      	add	r3, r0
 800a6b8:	4480      	add	r8, r0
 800a6ba:	4405      	add	r5, r0
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	f1b8 0f00 	cmp.w	r8, #0
 800a6c2:	dd05      	ble.n	800a6d0 <_dtoa_r+0x838>
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	4642      	mov	r2, r8
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 fe13 	bl	800b2f4 <__lshift>
 800a6ce:	4683      	mov	fp, r0
 800a6d0:	9b04      	ldr	r3, [sp, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dd05      	ble.n	800a6e2 <_dtoa_r+0x84a>
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fe0a 	bl	800b2f4 <__lshift>
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d069      	beq.n	800a7bc <_dtoa_r+0x924>
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4658      	mov	r0, fp
 800a6ec:	f000 fe6e 	bl	800b3cc <__mcmp>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	da63      	bge.n	800a7bc <_dtoa_r+0x924>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	220a      	movs	r2, #10
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fc4a 	bl	800af94 <__multadd>
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a706:	4683      	mov	fp, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 818f 	beq.w	800aa2c <_dtoa_r+0xb94>
 800a70e:	4639      	mov	r1, r7
 800a710:	2300      	movs	r3, #0
 800a712:	220a      	movs	r2, #10
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fc3d 	bl	800af94 <__multadd>
 800a71a:	f1b9 0f00 	cmp.w	r9, #0
 800a71e:	4607      	mov	r7, r0
 800a720:	f300 808e 	bgt.w	800a840 <_dtoa_r+0x9a8>
 800a724:	9b05      	ldr	r3, [sp, #20]
 800a726:	2b02      	cmp	r3, #2
 800a728:	dc50      	bgt.n	800a7cc <_dtoa_r+0x934>
 800a72a:	e089      	b.n	800a840 <_dtoa_r+0x9a8>
 800a72c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a72e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a732:	e75d      	b.n	800a5f0 <_dtoa_r+0x758>
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	1e5e      	subs	r6, r3, #1
 800a738:	9b06      	ldr	r3, [sp, #24]
 800a73a:	42b3      	cmp	r3, r6
 800a73c:	bfbf      	itttt	lt
 800a73e:	9b06      	ldrlt	r3, [sp, #24]
 800a740:	9606      	strlt	r6, [sp, #24]
 800a742:	1af2      	sublt	r2, r6, r3
 800a744:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a746:	bfb6      	itet	lt
 800a748:	189b      	addlt	r3, r3, r2
 800a74a:	1b9e      	subge	r6, r3, r6
 800a74c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	bfb8      	it	lt
 800a752:	2600      	movlt	r6, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	bfb5      	itete	lt
 800a758:	eba8 0503 	sublt.w	r5, r8, r3
 800a75c:	9b01      	ldrge	r3, [sp, #4]
 800a75e:	2300      	movlt	r3, #0
 800a760:	4645      	movge	r5, r8
 800a762:	e747      	b.n	800a5f4 <_dtoa_r+0x75c>
 800a764:	9e06      	ldr	r6, [sp, #24]
 800a766:	9f08      	ldr	r7, [sp, #32]
 800a768:	4645      	mov	r5, r8
 800a76a:	e74c      	b.n	800a606 <_dtoa_r+0x76e>
 800a76c:	9a06      	ldr	r2, [sp, #24]
 800a76e:	e775      	b.n	800a65c <_dtoa_r+0x7c4>
 800a770:	9b05      	ldr	r3, [sp, #20]
 800a772:	2b01      	cmp	r3, #1
 800a774:	dc18      	bgt.n	800a7a8 <_dtoa_r+0x910>
 800a776:	9b02      	ldr	r3, [sp, #8]
 800a778:	b9b3      	cbnz	r3, 800a7a8 <_dtoa_r+0x910>
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a780:	b9a3      	cbnz	r3, 800a7ac <_dtoa_r+0x914>
 800a782:	9b03      	ldr	r3, [sp, #12]
 800a784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a788:	0d1b      	lsrs	r3, r3, #20
 800a78a:	051b      	lsls	r3, r3, #20
 800a78c:	b12b      	cbz	r3, 800a79a <_dtoa_r+0x902>
 800a78e:	9b04      	ldr	r3, [sp, #16]
 800a790:	3301      	adds	r3, #1
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	f108 0801 	add.w	r8, r8, #1
 800a798:	2301      	movs	r3, #1
 800a79a:	9306      	str	r3, [sp, #24]
 800a79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f47f af74 	bne.w	800a68c <_dtoa_r+0x7f4>
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	e779      	b.n	800a69c <_dtoa_r+0x804>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e7f6      	b.n	800a79a <_dtoa_r+0x902>
 800a7ac:	9b02      	ldr	r3, [sp, #8]
 800a7ae:	e7f4      	b.n	800a79a <_dtoa_r+0x902>
 800a7b0:	d085      	beq.n	800a6be <_dtoa_r+0x826>
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	301c      	adds	r0, #28
 800a7b6:	e77d      	b.n	800a6b4 <_dtoa_r+0x81c>
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	9b01      	ldr	r3, [sp, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dc38      	bgt.n	800a834 <_dtoa_r+0x99c>
 800a7c2:	9b05      	ldr	r3, [sp, #20]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	dd35      	ble.n	800a834 <_dtoa_r+0x99c>
 800a7c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a7cc:	f1b9 0f00 	cmp.w	r9, #0
 800a7d0:	d10d      	bne.n	800a7ee <_dtoa_r+0x956>
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	2205      	movs	r2, #5
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fbdb 	bl	800af94 <__multadd>
 800a7de:	4601      	mov	r1, r0
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	4658      	mov	r0, fp
 800a7e4:	f000 fdf2 	bl	800b3cc <__mcmp>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	f73f adbd 	bgt.w	800a368 <_dtoa_r+0x4d0>
 800a7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f0:	9d00      	ldr	r5, [sp, #0]
 800a7f2:	ea6f 0a03 	mvn.w	sl, r3
 800a7f6:	f04f 0800 	mov.w	r8, #0
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fba7 	bl	800af50 <_Bfree>
 800a802:	2f00      	cmp	r7, #0
 800a804:	f43f aeb4 	beq.w	800a570 <_dtoa_r+0x6d8>
 800a808:	f1b8 0f00 	cmp.w	r8, #0
 800a80c:	d005      	beq.n	800a81a <_dtoa_r+0x982>
 800a80e:	45b8      	cmp	r8, r7
 800a810:	d003      	beq.n	800a81a <_dtoa_r+0x982>
 800a812:	4641      	mov	r1, r8
 800a814:	4620      	mov	r0, r4
 800a816:	f000 fb9b 	bl	800af50 <_Bfree>
 800a81a:	4639      	mov	r1, r7
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fb97 	bl	800af50 <_Bfree>
 800a822:	e6a5      	b.n	800a570 <_dtoa_r+0x6d8>
 800a824:	2600      	movs	r6, #0
 800a826:	4637      	mov	r7, r6
 800a828:	e7e1      	b.n	800a7ee <_dtoa_r+0x956>
 800a82a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a82c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a830:	4637      	mov	r7, r6
 800a832:	e599      	b.n	800a368 <_dtoa_r+0x4d0>
 800a834:	9b08      	ldr	r3, [sp, #32]
 800a836:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 80fd 	beq.w	800aa3a <_dtoa_r+0xba2>
 800a840:	2d00      	cmp	r5, #0
 800a842:	dd05      	ble.n	800a850 <_dtoa_r+0x9b8>
 800a844:	4639      	mov	r1, r7
 800a846:	462a      	mov	r2, r5
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fd53 	bl	800b2f4 <__lshift>
 800a84e:	4607      	mov	r7, r0
 800a850:	9b06      	ldr	r3, [sp, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d05c      	beq.n	800a910 <_dtoa_r+0xa78>
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fb39 	bl	800aed0 <_Balloc>
 800a85e:	4605      	mov	r5, r0
 800a860:	b928      	cbnz	r0, 800a86e <_dtoa_r+0x9d6>
 800a862:	4b80      	ldr	r3, [pc, #512]	; (800aa64 <_dtoa_r+0xbcc>)
 800a864:	4602      	mov	r2, r0
 800a866:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a86a:	f7ff bb2e 	b.w	8009eca <_dtoa_r+0x32>
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	3202      	adds	r2, #2
 800a872:	0092      	lsls	r2, r2, #2
 800a874:	f107 010c 	add.w	r1, r7, #12
 800a878:	300c      	adds	r0, #12
 800a87a:	f7fe fc0f 	bl	800909c <memcpy>
 800a87e:	2201      	movs	r2, #1
 800a880:	4629      	mov	r1, r5
 800a882:	4620      	mov	r0, r4
 800a884:	f000 fd36 	bl	800b2f4 <__lshift>
 800a888:	9b00      	ldr	r3, [sp, #0]
 800a88a:	3301      	adds	r3, #1
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	444b      	add	r3, r9
 800a892:	9307      	str	r3, [sp, #28]
 800a894:	9b02      	ldr	r3, [sp, #8]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	46b8      	mov	r8, r7
 800a89c:	9306      	str	r3, [sp, #24]
 800a89e:	4607      	mov	r7, r0
 800a8a0:	9b01      	ldr	r3, [sp, #4]
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	4658      	mov	r0, fp
 800a8a8:	9302      	str	r3, [sp, #8]
 800a8aa:	f7ff fa67 	bl	8009d7c <quorem>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	3330      	adds	r3, #48	; 0x30
 800a8b2:	9004      	str	r0, [sp, #16]
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	4658      	mov	r0, fp
 800a8b8:	9308      	str	r3, [sp, #32]
 800a8ba:	f000 fd87 	bl	800b3cc <__mcmp>
 800a8be:	463a      	mov	r2, r7
 800a8c0:	4681      	mov	r9, r0
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fd9d 	bl	800b404 <__mdiff>
 800a8ca:	68c2      	ldr	r2, [r0, #12]
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	bb02      	cbnz	r2, 800a914 <_dtoa_r+0xa7c>
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	4658      	mov	r0, fp
 800a8d6:	f000 fd79 	bl	800b3cc <__mcmp>
 800a8da:	9b08      	ldr	r3, [sp, #32]
 800a8dc:	4602      	mov	r2, r0
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a8e6:	f000 fb33 	bl	800af50 <_Bfree>
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ee:	9d01      	ldr	r5, [sp, #4]
 800a8f0:	ea43 0102 	orr.w	r1, r3, r2
 800a8f4:	9b06      	ldr	r3, [sp, #24]
 800a8f6:	430b      	orrs	r3, r1
 800a8f8:	9b08      	ldr	r3, [sp, #32]
 800a8fa:	d10d      	bne.n	800a918 <_dtoa_r+0xa80>
 800a8fc:	2b39      	cmp	r3, #57	; 0x39
 800a8fe:	d029      	beq.n	800a954 <_dtoa_r+0xabc>
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	dd01      	ble.n	800a90a <_dtoa_r+0xa72>
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	3331      	adds	r3, #49	; 0x31
 800a90a:	9a02      	ldr	r2, [sp, #8]
 800a90c:	7013      	strb	r3, [r2, #0]
 800a90e:	e774      	b.n	800a7fa <_dtoa_r+0x962>
 800a910:	4638      	mov	r0, r7
 800a912:	e7b9      	b.n	800a888 <_dtoa_r+0x9f0>
 800a914:	2201      	movs	r2, #1
 800a916:	e7e2      	b.n	800a8de <_dtoa_r+0xa46>
 800a918:	f1b9 0f00 	cmp.w	r9, #0
 800a91c:	db06      	blt.n	800a92c <_dtoa_r+0xa94>
 800a91e:	9905      	ldr	r1, [sp, #20]
 800a920:	ea41 0909 	orr.w	r9, r1, r9
 800a924:	9906      	ldr	r1, [sp, #24]
 800a926:	ea59 0101 	orrs.w	r1, r9, r1
 800a92a:	d120      	bne.n	800a96e <_dtoa_r+0xad6>
 800a92c:	2a00      	cmp	r2, #0
 800a92e:	ddec      	ble.n	800a90a <_dtoa_r+0xa72>
 800a930:	4659      	mov	r1, fp
 800a932:	2201      	movs	r2, #1
 800a934:	4620      	mov	r0, r4
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	f000 fcdc 	bl	800b2f4 <__lshift>
 800a93c:	4631      	mov	r1, r6
 800a93e:	4683      	mov	fp, r0
 800a940:	f000 fd44 	bl	800b3cc <__mcmp>
 800a944:	2800      	cmp	r0, #0
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	dc02      	bgt.n	800a950 <_dtoa_r+0xab8>
 800a94a:	d1de      	bne.n	800a90a <_dtoa_r+0xa72>
 800a94c:	07da      	lsls	r2, r3, #31
 800a94e:	d5dc      	bpl.n	800a90a <_dtoa_r+0xa72>
 800a950:	2b39      	cmp	r3, #57	; 0x39
 800a952:	d1d8      	bne.n	800a906 <_dtoa_r+0xa6e>
 800a954:	9a02      	ldr	r2, [sp, #8]
 800a956:	2339      	movs	r3, #57	; 0x39
 800a958:	7013      	strb	r3, [r2, #0]
 800a95a:	462b      	mov	r3, r5
 800a95c:	461d      	mov	r5, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a964:	2a39      	cmp	r2, #57	; 0x39
 800a966:	d050      	beq.n	800aa0a <_dtoa_r+0xb72>
 800a968:	3201      	adds	r2, #1
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e745      	b.n	800a7fa <_dtoa_r+0x962>
 800a96e:	2a00      	cmp	r2, #0
 800a970:	dd03      	ble.n	800a97a <_dtoa_r+0xae2>
 800a972:	2b39      	cmp	r3, #57	; 0x39
 800a974:	d0ee      	beq.n	800a954 <_dtoa_r+0xabc>
 800a976:	3301      	adds	r3, #1
 800a978:	e7c7      	b.n	800a90a <_dtoa_r+0xa72>
 800a97a:	9a01      	ldr	r2, [sp, #4]
 800a97c:	9907      	ldr	r1, [sp, #28]
 800a97e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a982:	428a      	cmp	r2, r1
 800a984:	d02a      	beq.n	800a9dc <_dtoa_r+0xb44>
 800a986:	4659      	mov	r1, fp
 800a988:	2300      	movs	r3, #0
 800a98a:	220a      	movs	r2, #10
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 fb01 	bl	800af94 <__multadd>
 800a992:	45b8      	cmp	r8, r7
 800a994:	4683      	mov	fp, r0
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	f04f 020a 	mov.w	r2, #10
 800a99e:	4641      	mov	r1, r8
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	d107      	bne.n	800a9b4 <_dtoa_r+0xb1c>
 800a9a4:	f000 faf6 	bl	800af94 <__multadd>
 800a9a8:	4680      	mov	r8, r0
 800a9aa:	4607      	mov	r7, r0
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	e775      	b.n	800a8a0 <_dtoa_r+0xa08>
 800a9b4:	f000 faee 	bl	800af94 <__multadd>
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4680      	mov	r8, r0
 800a9bc:	2300      	movs	r3, #0
 800a9be:	220a      	movs	r2, #10
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fae7 	bl	800af94 <__multadd>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	e7f0      	b.n	800a9ac <_dtoa_r+0xb14>
 800a9ca:	f1b9 0f00 	cmp.w	r9, #0
 800a9ce:	9a00      	ldr	r2, [sp, #0]
 800a9d0:	bfcc      	ite	gt
 800a9d2:	464d      	movgt	r5, r9
 800a9d4:	2501      	movle	r5, #1
 800a9d6:	4415      	add	r5, r2
 800a9d8:	f04f 0800 	mov.w	r8, #0
 800a9dc:	4659      	mov	r1, fp
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	f000 fc86 	bl	800b2f4 <__lshift>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4683      	mov	fp, r0
 800a9ec:	f000 fcee 	bl	800b3cc <__mcmp>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	dcb2      	bgt.n	800a95a <_dtoa_r+0xac2>
 800a9f4:	d102      	bne.n	800a9fc <_dtoa_r+0xb64>
 800a9f6:	9b01      	ldr	r3, [sp, #4]
 800a9f8:	07db      	lsls	r3, r3, #31
 800a9fa:	d4ae      	bmi.n	800a95a <_dtoa_r+0xac2>
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	461d      	mov	r5, r3
 800aa00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa04:	2a30      	cmp	r2, #48	; 0x30
 800aa06:	d0fa      	beq.n	800a9fe <_dtoa_r+0xb66>
 800aa08:	e6f7      	b.n	800a7fa <_dtoa_r+0x962>
 800aa0a:	9a00      	ldr	r2, [sp, #0]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d1a5      	bne.n	800a95c <_dtoa_r+0xac4>
 800aa10:	f10a 0a01 	add.w	sl, sl, #1
 800aa14:	2331      	movs	r3, #49	; 0x31
 800aa16:	e779      	b.n	800a90c <_dtoa_r+0xa74>
 800aa18:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <_dtoa_r+0xbd0>)
 800aa1a:	f7ff baaf 	b.w	8009f7c <_dtoa_r+0xe4>
 800aa1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f47f aa86 	bne.w	8009f32 <_dtoa_r+0x9a>
 800aa26:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <_dtoa_r+0xbd4>)
 800aa28:	f7ff baa8 	b.w	8009f7c <_dtoa_r+0xe4>
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	dc03      	bgt.n	800aa3a <_dtoa_r+0xba2>
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	f73f aec9 	bgt.w	800a7cc <_dtoa_r+0x934>
 800aa3a:	9d00      	ldr	r5, [sp, #0]
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4658      	mov	r0, fp
 800aa40:	f7ff f99c 	bl	8009d7c <quorem>
 800aa44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aa48:	f805 3b01 	strb.w	r3, [r5], #1
 800aa4c:	9a00      	ldr	r2, [sp, #0]
 800aa4e:	1aaa      	subs	r2, r5, r2
 800aa50:	4591      	cmp	r9, r2
 800aa52:	ddba      	ble.n	800a9ca <_dtoa_r+0xb32>
 800aa54:	4659      	mov	r1, fp
 800aa56:	2300      	movs	r3, #0
 800aa58:	220a      	movs	r2, #10
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fa9a 	bl	800af94 <__multadd>
 800aa60:	4683      	mov	fp, r0
 800aa62:	e7eb      	b.n	800aa3c <_dtoa_r+0xba4>
 800aa64:	08017c77 	.word	0x08017c77
 800aa68:	08017bd0 	.word	0x08017bd0
 800aa6c:	08017bf4 	.word	0x08017bf4

0800aa70 <__sflush_r>:
 800aa70:	898a      	ldrh	r2, [r1, #12]
 800aa72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	4605      	mov	r5, r0
 800aa78:	0710      	lsls	r0, r2, #28
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	d458      	bmi.n	800ab30 <__sflush_r+0xc0>
 800aa7e:	684b      	ldr	r3, [r1, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dc05      	bgt.n	800aa90 <__sflush_r+0x20>
 800aa84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	dc02      	bgt.n	800aa90 <__sflush_r+0x20>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	d0f9      	beq.n	800aa8a <__sflush_r+0x1a>
 800aa96:	2300      	movs	r3, #0
 800aa98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa9c:	682f      	ldr	r7, [r5, #0]
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	d032      	beq.n	800ab08 <__sflush_r+0x98>
 800aaa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	075a      	lsls	r2, r3, #29
 800aaa8:	d505      	bpl.n	800aab6 <__sflush_r+0x46>
 800aaaa:	6863      	ldr	r3, [r4, #4]
 800aaac:	1ac0      	subs	r0, r0, r3
 800aaae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aab0:	b10b      	cbz	r3, 800aab6 <__sflush_r+0x46>
 800aab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aab4:	1ac0      	subs	r0, r0, r3
 800aab6:	2300      	movs	r3, #0
 800aab8:	4602      	mov	r2, r0
 800aaba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aabc:	6a21      	ldr	r1, [r4, #32]
 800aabe:	4628      	mov	r0, r5
 800aac0:	47b0      	blx	r6
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	d106      	bne.n	800aad6 <__sflush_r+0x66>
 800aac8:	6829      	ldr	r1, [r5, #0]
 800aaca:	291d      	cmp	r1, #29
 800aacc:	d82c      	bhi.n	800ab28 <__sflush_r+0xb8>
 800aace:	4a2a      	ldr	r2, [pc, #168]	; (800ab78 <__sflush_r+0x108>)
 800aad0:	40ca      	lsrs	r2, r1
 800aad2:	07d6      	lsls	r6, r2, #31
 800aad4:	d528      	bpl.n	800ab28 <__sflush_r+0xb8>
 800aad6:	2200      	movs	r2, #0
 800aad8:	6062      	str	r2, [r4, #4]
 800aada:	04d9      	lsls	r1, r3, #19
 800aadc:	6922      	ldr	r2, [r4, #16]
 800aade:	6022      	str	r2, [r4, #0]
 800aae0:	d504      	bpl.n	800aaec <__sflush_r+0x7c>
 800aae2:	1c42      	adds	r2, r0, #1
 800aae4:	d101      	bne.n	800aaea <__sflush_r+0x7a>
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	b903      	cbnz	r3, 800aaec <__sflush_r+0x7c>
 800aaea:	6560      	str	r0, [r4, #84]	; 0x54
 800aaec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaee:	602f      	str	r7, [r5, #0]
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	d0ca      	beq.n	800aa8a <__sflush_r+0x1a>
 800aaf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaf8:	4299      	cmp	r1, r3
 800aafa:	d002      	beq.n	800ab02 <__sflush_r+0x92>
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7fe fae3 	bl	80090c8 <_free_r>
 800ab02:	2000      	movs	r0, #0
 800ab04:	6360      	str	r0, [r4, #52]	; 0x34
 800ab06:	e7c1      	b.n	800aa8c <__sflush_r+0x1c>
 800ab08:	6a21      	ldr	r1, [r4, #32]
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b0      	blx	r6
 800ab10:	1c41      	adds	r1, r0, #1
 800ab12:	d1c7      	bne.n	800aaa4 <__sflush_r+0x34>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0c4      	beq.n	800aaa4 <__sflush_r+0x34>
 800ab1a:	2b1d      	cmp	r3, #29
 800ab1c:	d001      	beq.n	800ab22 <__sflush_r+0xb2>
 800ab1e:	2b16      	cmp	r3, #22
 800ab20:	d101      	bne.n	800ab26 <__sflush_r+0xb6>
 800ab22:	602f      	str	r7, [r5, #0]
 800ab24:	e7b1      	b.n	800aa8a <__sflush_r+0x1a>
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	e7ad      	b.n	800aa8c <__sflush_r+0x1c>
 800ab30:	690f      	ldr	r7, [r1, #16]
 800ab32:	2f00      	cmp	r7, #0
 800ab34:	d0a9      	beq.n	800aa8a <__sflush_r+0x1a>
 800ab36:	0793      	lsls	r3, r2, #30
 800ab38:	680e      	ldr	r6, [r1, #0]
 800ab3a:	bf08      	it	eq
 800ab3c:	694b      	ldreq	r3, [r1, #20]
 800ab3e:	600f      	str	r7, [r1, #0]
 800ab40:	bf18      	it	ne
 800ab42:	2300      	movne	r3, #0
 800ab44:	eba6 0807 	sub.w	r8, r6, r7
 800ab48:	608b      	str	r3, [r1, #8]
 800ab4a:	f1b8 0f00 	cmp.w	r8, #0
 800ab4e:	dd9c      	ble.n	800aa8a <__sflush_r+0x1a>
 800ab50:	6a21      	ldr	r1, [r4, #32]
 800ab52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab54:	4643      	mov	r3, r8
 800ab56:	463a      	mov	r2, r7
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b0      	blx	r6
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	dc06      	bgt.n	800ab6e <__sflush_r+0xfe>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	e78e      	b.n	800aa8c <__sflush_r+0x1c>
 800ab6e:	4407      	add	r7, r0
 800ab70:	eba8 0800 	sub.w	r8, r8, r0
 800ab74:	e7e9      	b.n	800ab4a <__sflush_r+0xda>
 800ab76:	bf00      	nop
 800ab78:	20400001 	.word	0x20400001

0800ab7c <_fflush_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	690b      	ldr	r3, [r1, #16]
 800ab80:	4605      	mov	r5, r0
 800ab82:	460c      	mov	r4, r1
 800ab84:	b913      	cbnz	r3, 800ab8c <_fflush_r+0x10>
 800ab86:	2500      	movs	r5, #0
 800ab88:	4628      	mov	r0, r5
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	b118      	cbz	r0, 800ab96 <_fflush_r+0x1a>
 800ab8e:	6983      	ldr	r3, [r0, #24]
 800ab90:	b90b      	cbnz	r3, 800ab96 <_fflush_r+0x1a>
 800ab92:	f000 f887 	bl	800aca4 <__sinit>
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <_fflush_r+0x6c>)
 800ab98:	429c      	cmp	r4, r3
 800ab9a:	d11b      	bne.n	800abd4 <_fflush_r+0x58>
 800ab9c:	686c      	ldr	r4, [r5, #4]
 800ab9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0ef      	beq.n	800ab86 <_fflush_r+0xa>
 800aba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aba8:	07d0      	lsls	r0, r2, #31
 800abaa:	d404      	bmi.n	800abb6 <_fflush_r+0x3a>
 800abac:	0599      	lsls	r1, r3, #22
 800abae:	d402      	bmi.n	800abb6 <_fflush_r+0x3a>
 800abb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abb2:	f000 f91a 	bl	800adea <__retarget_lock_acquire_recursive>
 800abb6:	4628      	mov	r0, r5
 800abb8:	4621      	mov	r1, r4
 800abba:	f7ff ff59 	bl	800aa70 <__sflush_r>
 800abbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abc0:	07da      	lsls	r2, r3, #31
 800abc2:	4605      	mov	r5, r0
 800abc4:	d4e0      	bmi.n	800ab88 <_fflush_r+0xc>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	059b      	lsls	r3, r3, #22
 800abca:	d4dd      	bmi.n	800ab88 <_fflush_r+0xc>
 800abcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abce:	f000 f90d 	bl	800adec <__retarget_lock_release_recursive>
 800abd2:	e7d9      	b.n	800ab88 <_fflush_r+0xc>
 800abd4:	4b05      	ldr	r3, [pc, #20]	; (800abec <_fflush_r+0x70>)
 800abd6:	429c      	cmp	r4, r3
 800abd8:	d101      	bne.n	800abde <_fflush_r+0x62>
 800abda:	68ac      	ldr	r4, [r5, #8]
 800abdc:	e7df      	b.n	800ab9e <_fflush_r+0x22>
 800abde:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <_fflush_r+0x74>)
 800abe0:	429c      	cmp	r4, r3
 800abe2:	bf08      	it	eq
 800abe4:	68ec      	ldreq	r4, [r5, #12]
 800abe6:	e7da      	b.n	800ab9e <_fflush_r+0x22>
 800abe8:	08017ca8 	.word	0x08017ca8
 800abec:	08017cc8 	.word	0x08017cc8
 800abf0:	08017c88 	.word	0x08017c88

0800abf4 <std>:
 800abf4:	2300      	movs	r3, #0
 800abf6:	b510      	push	{r4, lr}
 800abf8:	4604      	mov	r4, r0
 800abfa:	e9c0 3300 	strd	r3, r3, [r0]
 800abfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac02:	6083      	str	r3, [r0, #8]
 800ac04:	8181      	strh	r1, [r0, #12]
 800ac06:	6643      	str	r3, [r0, #100]	; 0x64
 800ac08:	81c2      	strh	r2, [r0, #14]
 800ac0a:	6183      	str	r3, [r0, #24]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	2208      	movs	r2, #8
 800ac10:	305c      	adds	r0, #92	; 0x5c
 800ac12:	f7fe fa51 	bl	80090b8 <memset>
 800ac16:	4b05      	ldr	r3, [pc, #20]	; (800ac2c <std+0x38>)
 800ac18:	6263      	str	r3, [r4, #36]	; 0x24
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <std+0x3c>)
 800ac1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <std+0x40>)
 800ac20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac22:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <std+0x44>)
 800ac24:	6224      	str	r4, [r4, #32]
 800ac26:	6323      	str	r3, [r4, #48]	; 0x30
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	bf00      	nop
 800ac2c:	0800b5eb 	.word	0x0800b5eb
 800ac30:	0800b60d 	.word	0x0800b60d
 800ac34:	0800b645 	.word	0x0800b645
 800ac38:	0800b669 	.word	0x0800b669

0800ac3c <_cleanup_r>:
 800ac3c:	4901      	ldr	r1, [pc, #4]	; (800ac44 <_cleanup_r+0x8>)
 800ac3e:	f000 b8af 	b.w	800ada0 <_fwalk_reent>
 800ac42:	bf00      	nop
 800ac44:	0800ab7d 	.word	0x0800ab7d

0800ac48 <__sfmoreglue>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	1e4a      	subs	r2, r1, #1
 800ac4c:	2568      	movs	r5, #104	; 0x68
 800ac4e:	4355      	muls	r5, r2
 800ac50:	460e      	mov	r6, r1
 800ac52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac56:	f7fe fa87 	bl	8009168 <_malloc_r>
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	b140      	cbz	r0, 800ac70 <__sfmoreglue+0x28>
 800ac5e:	2100      	movs	r1, #0
 800ac60:	e9c0 1600 	strd	r1, r6, [r0]
 800ac64:	300c      	adds	r0, #12
 800ac66:	60a0      	str	r0, [r4, #8]
 800ac68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac6c:	f7fe fa24 	bl	80090b8 <memset>
 800ac70:	4620      	mov	r0, r4
 800ac72:	bd70      	pop	{r4, r5, r6, pc}

0800ac74 <__sfp_lock_acquire>:
 800ac74:	4801      	ldr	r0, [pc, #4]	; (800ac7c <__sfp_lock_acquire+0x8>)
 800ac76:	f000 b8b8 	b.w	800adea <__retarget_lock_acquire_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20001338 	.word	0x20001338

0800ac80 <__sfp_lock_release>:
 800ac80:	4801      	ldr	r0, [pc, #4]	; (800ac88 <__sfp_lock_release+0x8>)
 800ac82:	f000 b8b3 	b.w	800adec <__retarget_lock_release_recursive>
 800ac86:	bf00      	nop
 800ac88:	20001338 	.word	0x20001338

0800ac8c <__sinit_lock_acquire>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	; (800ac94 <__sinit_lock_acquire+0x8>)
 800ac8e:	f000 b8ac 	b.w	800adea <__retarget_lock_acquire_recursive>
 800ac92:	bf00      	nop
 800ac94:	20001333 	.word	0x20001333

0800ac98 <__sinit_lock_release>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__sinit_lock_release+0x8>)
 800ac9a:	f000 b8a7 	b.w	800adec <__retarget_lock_release_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20001333 	.word	0x20001333

0800aca4 <__sinit>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	f7ff fff0 	bl	800ac8c <__sinit_lock_acquire>
 800acac:	69a3      	ldr	r3, [r4, #24]
 800acae:	b11b      	cbz	r3, 800acb8 <__sinit+0x14>
 800acb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb4:	f7ff bff0 	b.w	800ac98 <__sinit_lock_release>
 800acb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acbc:	6523      	str	r3, [r4, #80]	; 0x50
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <__sinit+0x68>)
 800acc0:	4a13      	ldr	r2, [pc, #76]	; (800ad10 <__sinit+0x6c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800acc6:	42a3      	cmp	r3, r4
 800acc8:	bf04      	itt	eq
 800acca:	2301      	moveq	r3, #1
 800accc:	61a3      	streq	r3, [r4, #24]
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 f820 	bl	800ad14 <__sfp>
 800acd4:	6060      	str	r0, [r4, #4]
 800acd6:	4620      	mov	r0, r4
 800acd8:	f000 f81c 	bl	800ad14 <__sfp>
 800acdc:	60a0      	str	r0, [r4, #8]
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 f818 	bl	800ad14 <__sfp>
 800ace4:	2200      	movs	r2, #0
 800ace6:	60e0      	str	r0, [r4, #12]
 800ace8:	2104      	movs	r1, #4
 800acea:	6860      	ldr	r0, [r4, #4]
 800acec:	f7ff ff82 	bl	800abf4 <std>
 800acf0:	68a0      	ldr	r0, [r4, #8]
 800acf2:	2201      	movs	r2, #1
 800acf4:	2109      	movs	r1, #9
 800acf6:	f7ff ff7d 	bl	800abf4 <std>
 800acfa:	68e0      	ldr	r0, [r4, #12]
 800acfc:	2202      	movs	r2, #2
 800acfe:	2112      	movs	r1, #18
 800ad00:	f7ff ff78 	bl	800abf4 <std>
 800ad04:	2301      	movs	r3, #1
 800ad06:	61a3      	str	r3, [r4, #24]
 800ad08:	e7d2      	b.n	800acb0 <__sinit+0xc>
 800ad0a:	bf00      	nop
 800ad0c:	08017bbc 	.word	0x08017bbc
 800ad10:	0800ac3d 	.word	0x0800ac3d

0800ad14 <__sfp>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	4607      	mov	r7, r0
 800ad18:	f7ff ffac 	bl	800ac74 <__sfp_lock_acquire>
 800ad1c:	4b1e      	ldr	r3, [pc, #120]	; (800ad98 <__sfp+0x84>)
 800ad1e:	681e      	ldr	r6, [r3, #0]
 800ad20:	69b3      	ldr	r3, [r6, #24]
 800ad22:	b913      	cbnz	r3, 800ad2a <__sfp+0x16>
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff ffbd 	bl	800aca4 <__sinit>
 800ad2a:	3648      	adds	r6, #72	; 0x48
 800ad2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	d503      	bpl.n	800ad3c <__sfp+0x28>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	b30b      	cbz	r3, 800ad7c <__sfp+0x68>
 800ad38:	6836      	ldr	r6, [r6, #0]
 800ad3a:	e7f7      	b.n	800ad2c <__sfp+0x18>
 800ad3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad40:	b9d5      	cbnz	r5, 800ad78 <__sfp+0x64>
 800ad42:	4b16      	ldr	r3, [pc, #88]	; (800ad9c <__sfp+0x88>)
 800ad44:	60e3      	str	r3, [r4, #12]
 800ad46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad4c:	f000 f84c 	bl	800ade8 <__retarget_lock_init_recursive>
 800ad50:	f7ff ff96 	bl	800ac80 <__sfp_lock_release>
 800ad54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad5c:	6025      	str	r5, [r4, #0]
 800ad5e:	61a5      	str	r5, [r4, #24]
 800ad60:	2208      	movs	r2, #8
 800ad62:	4629      	mov	r1, r5
 800ad64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad68:	f7fe f9a6 	bl	80090b8 <memset>
 800ad6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad74:	4620      	mov	r0, r4
 800ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad78:	3468      	adds	r4, #104	; 0x68
 800ad7a:	e7d9      	b.n	800ad30 <__sfp+0x1c>
 800ad7c:	2104      	movs	r1, #4
 800ad7e:	4638      	mov	r0, r7
 800ad80:	f7ff ff62 	bl	800ac48 <__sfmoreglue>
 800ad84:	4604      	mov	r4, r0
 800ad86:	6030      	str	r0, [r6, #0]
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d1d5      	bne.n	800ad38 <__sfp+0x24>
 800ad8c:	f7ff ff78 	bl	800ac80 <__sfp_lock_release>
 800ad90:	230c      	movs	r3, #12
 800ad92:	603b      	str	r3, [r7, #0]
 800ad94:	e7ee      	b.n	800ad74 <__sfp+0x60>
 800ad96:	bf00      	nop
 800ad98:	08017bbc 	.word	0x08017bbc
 800ad9c:	ffff0001 	.word	0xffff0001

0800ada0 <_fwalk_reent>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	4606      	mov	r6, r0
 800ada6:	4688      	mov	r8, r1
 800ada8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adac:	2700      	movs	r7, #0
 800adae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adb2:	f1b9 0901 	subs.w	r9, r9, #1
 800adb6:	d505      	bpl.n	800adc4 <_fwalk_reent+0x24>
 800adb8:	6824      	ldr	r4, [r4, #0]
 800adba:	2c00      	cmp	r4, #0
 800adbc:	d1f7      	bne.n	800adae <_fwalk_reent+0xe>
 800adbe:	4638      	mov	r0, r7
 800adc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc4:	89ab      	ldrh	r3, [r5, #12]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d907      	bls.n	800adda <_fwalk_reent+0x3a>
 800adca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adce:	3301      	adds	r3, #1
 800add0:	d003      	beq.n	800adda <_fwalk_reent+0x3a>
 800add2:	4629      	mov	r1, r5
 800add4:	4630      	mov	r0, r6
 800add6:	47c0      	blx	r8
 800add8:	4307      	orrs	r7, r0
 800adda:	3568      	adds	r5, #104	; 0x68
 800addc:	e7e9      	b.n	800adb2 <_fwalk_reent+0x12>
	...

0800ade0 <_localeconv_r>:
 800ade0:	4800      	ldr	r0, [pc, #0]	; (800ade4 <_localeconv_r+0x4>)
 800ade2:	4770      	bx	lr
 800ade4:	20000930 	.word	0x20000930

0800ade8 <__retarget_lock_init_recursive>:
 800ade8:	4770      	bx	lr

0800adea <__retarget_lock_acquire_recursive>:
 800adea:	4770      	bx	lr

0800adec <__retarget_lock_release_recursive>:
 800adec:	4770      	bx	lr

0800adee <__swhatbuf_r>:
 800adee:	b570      	push	{r4, r5, r6, lr}
 800adf0:	460e      	mov	r6, r1
 800adf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf6:	2900      	cmp	r1, #0
 800adf8:	b096      	sub	sp, #88	; 0x58
 800adfa:	4614      	mov	r4, r2
 800adfc:	461d      	mov	r5, r3
 800adfe:	da07      	bge.n	800ae10 <__swhatbuf_r+0x22>
 800ae00:	2300      	movs	r3, #0
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	89b3      	ldrh	r3, [r6, #12]
 800ae06:	061a      	lsls	r2, r3, #24
 800ae08:	d410      	bmi.n	800ae2c <__swhatbuf_r+0x3e>
 800ae0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae0e:	e00e      	b.n	800ae2e <__swhatbuf_r+0x40>
 800ae10:	466a      	mov	r2, sp
 800ae12:	f000 fc7f 	bl	800b714 <_fstat_r>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	dbf2      	blt.n	800ae00 <__swhatbuf_r+0x12>
 800ae1a:	9a01      	ldr	r2, [sp, #4]
 800ae1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae24:	425a      	negs	r2, r3
 800ae26:	415a      	adcs	r2, r3
 800ae28:	602a      	str	r2, [r5, #0]
 800ae2a:	e7ee      	b.n	800ae0a <__swhatbuf_r+0x1c>
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	2000      	movs	r0, #0
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	b016      	add	sp, #88	; 0x58
 800ae34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae38 <__smakebuf_r>:
 800ae38:	898b      	ldrh	r3, [r1, #12]
 800ae3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae3c:	079d      	lsls	r5, r3, #30
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	d507      	bpl.n	800ae54 <__smakebuf_r+0x1c>
 800ae44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	6123      	str	r3, [r4, #16]
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	6163      	str	r3, [r4, #20]
 800ae50:	b002      	add	sp, #8
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	ab01      	add	r3, sp, #4
 800ae56:	466a      	mov	r2, sp
 800ae58:	f7ff ffc9 	bl	800adee <__swhatbuf_r>
 800ae5c:	9900      	ldr	r1, [sp, #0]
 800ae5e:	4605      	mov	r5, r0
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7fe f981 	bl	8009168 <_malloc_r>
 800ae66:	b948      	cbnz	r0, 800ae7c <__smakebuf_r+0x44>
 800ae68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6c:	059a      	lsls	r2, r3, #22
 800ae6e:	d4ef      	bmi.n	800ae50 <__smakebuf_r+0x18>
 800ae70:	f023 0303 	bic.w	r3, r3, #3
 800ae74:	f043 0302 	orr.w	r3, r3, #2
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	e7e3      	b.n	800ae44 <__smakebuf_r+0xc>
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <__smakebuf_r+0x7c>)
 800ae7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	6020      	str	r0, [r4, #0]
 800ae84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae88:	81a3      	strh	r3, [r4, #12]
 800ae8a:	9b00      	ldr	r3, [sp, #0]
 800ae8c:	6163      	str	r3, [r4, #20]
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	6120      	str	r0, [r4, #16]
 800ae92:	b15b      	cbz	r3, 800aeac <__smakebuf_r+0x74>
 800ae94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f000 fc4d 	bl	800b738 <_isatty_r>
 800ae9e:	b128      	cbz	r0, 800aeac <__smakebuf_r+0x74>
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	f043 0301 	orr.w	r3, r3, #1
 800aeaa:	81a3      	strh	r3, [r4, #12]
 800aeac:	89a0      	ldrh	r0, [r4, #12]
 800aeae:	4305      	orrs	r5, r0
 800aeb0:	81a5      	strh	r5, [r4, #12]
 800aeb2:	e7cd      	b.n	800ae50 <__smakebuf_r+0x18>
 800aeb4:	0800ac3d 	.word	0x0800ac3d

0800aeb8 <__malloc_lock>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__malloc_lock+0x8>)
 800aeba:	f7ff bf96 	b.w	800adea <__retarget_lock_acquire_recursive>
 800aebe:	bf00      	nop
 800aec0:	20001334 	.word	0x20001334

0800aec4 <__malloc_unlock>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__malloc_unlock+0x8>)
 800aec6:	f7ff bf91 	b.w	800adec <__retarget_lock_release_recursive>
 800aeca:	bf00      	nop
 800aecc:	20001334 	.word	0x20001334

0800aed0 <_Balloc>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aed4:	4604      	mov	r4, r0
 800aed6:	460d      	mov	r5, r1
 800aed8:	b976      	cbnz	r6, 800aef8 <_Balloc+0x28>
 800aeda:	2010      	movs	r0, #16
 800aedc:	f7fe f8d6 	bl	800908c <malloc>
 800aee0:	4602      	mov	r2, r0
 800aee2:	6260      	str	r0, [r4, #36]	; 0x24
 800aee4:	b920      	cbnz	r0, 800aef0 <_Balloc+0x20>
 800aee6:	4b18      	ldr	r3, [pc, #96]	; (800af48 <_Balloc+0x78>)
 800aee8:	4818      	ldr	r0, [pc, #96]	; (800af4c <_Balloc+0x7c>)
 800aeea:	2166      	movs	r1, #102	; 0x66
 800aeec:	f000 fbd2 	bl	800b694 <__assert_func>
 800aef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aef4:	6006      	str	r6, [r0, #0]
 800aef6:	60c6      	str	r6, [r0, #12]
 800aef8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aefa:	68f3      	ldr	r3, [r6, #12]
 800aefc:	b183      	cbz	r3, 800af20 <_Balloc+0x50>
 800aefe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af06:	b9b8      	cbnz	r0, 800af38 <_Balloc+0x68>
 800af08:	2101      	movs	r1, #1
 800af0a:	fa01 f605 	lsl.w	r6, r1, r5
 800af0e:	1d72      	adds	r2, r6, #5
 800af10:	0092      	lsls	r2, r2, #2
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fb5a 	bl	800b5cc <_calloc_r>
 800af18:	b160      	cbz	r0, 800af34 <_Balloc+0x64>
 800af1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af1e:	e00e      	b.n	800af3e <_Balloc+0x6e>
 800af20:	2221      	movs	r2, #33	; 0x21
 800af22:	2104      	movs	r1, #4
 800af24:	4620      	mov	r0, r4
 800af26:	f000 fb51 	bl	800b5cc <_calloc_r>
 800af2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af2c:	60f0      	str	r0, [r6, #12]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e4      	bne.n	800aefe <_Balloc+0x2e>
 800af34:	2000      	movs	r0, #0
 800af36:	bd70      	pop	{r4, r5, r6, pc}
 800af38:	6802      	ldr	r2, [r0, #0]
 800af3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af3e:	2300      	movs	r3, #0
 800af40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af44:	e7f7      	b.n	800af36 <_Balloc+0x66>
 800af46:	bf00      	nop
 800af48:	08017c01 	.word	0x08017c01
 800af4c:	08017ce8 	.word	0x08017ce8

0800af50 <_Bfree>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af54:	4605      	mov	r5, r0
 800af56:	460c      	mov	r4, r1
 800af58:	b976      	cbnz	r6, 800af78 <_Bfree+0x28>
 800af5a:	2010      	movs	r0, #16
 800af5c:	f7fe f896 	bl	800908c <malloc>
 800af60:	4602      	mov	r2, r0
 800af62:	6268      	str	r0, [r5, #36]	; 0x24
 800af64:	b920      	cbnz	r0, 800af70 <_Bfree+0x20>
 800af66:	4b09      	ldr	r3, [pc, #36]	; (800af8c <_Bfree+0x3c>)
 800af68:	4809      	ldr	r0, [pc, #36]	; (800af90 <_Bfree+0x40>)
 800af6a:	218a      	movs	r1, #138	; 0x8a
 800af6c:	f000 fb92 	bl	800b694 <__assert_func>
 800af70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af74:	6006      	str	r6, [r0, #0]
 800af76:	60c6      	str	r6, [r0, #12]
 800af78:	b13c      	cbz	r4, 800af8a <_Bfree+0x3a>
 800af7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af7c:	6862      	ldr	r2, [r4, #4]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af84:	6021      	str	r1, [r4, #0]
 800af86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	08017c01 	.word	0x08017c01
 800af90:	08017ce8 	.word	0x08017ce8

0800af94 <__multadd>:
 800af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af98:	690e      	ldr	r6, [r1, #16]
 800af9a:	4607      	mov	r7, r0
 800af9c:	4698      	mov	r8, r3
 800af9e:	460c      	mov	r4, r1
 800afa0:	f101 0014 	add.w	r0, r1, #20
 800afa4:	2300      	movs	r3, #0
 800afa6:	6805      	ldr	r5, [r0, #0]
 800afa8:	b2a9      	uxth	r1, r5
 800afaa:	fb02 8101 	mla	r1, r2, r1, r8
 800afae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800afb2:	0c2d      	lsrs	r5, r5, #16
 800afb4:	fb02 c505 	mla	r5, r2, r5, ip
 800afb8:	b289      	uxth	r1, r1
 800afba:	3301      	adds	r3, #1
 800afbc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800afc0:	429e      	cmp	r6, r3
 800afc2:	f840 1b04 	str.w	r1, [r0], #4
 800afc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800afca:	dcec      	bgt.n	800afa6 <__multadd+0x12>
 800afcc:	f1b8 0f00 	cmp.w	r8, #0
 800afd0:	d022      	beq.n	800b018 <__multadd+0x84>
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	42b3      	cmp	r3, r6
 800afd6:	dc19      	bgt.n	800b00c <__multadd+0x78>
 800afd8:	6861      	ldr	r1, [r4, #4]
 800afda:	4638      	mov	r0, r7
 800afdc:	3101      	adds	r1, #1
 800afde:	f7ff ff77 	bl	800aed0 <_Balloc>
 800afe2:	4605      	mov	r5, r0
 800afe4:	b928      	cbnz	r0, 800aff2 <__multadd+0x5e>
 800afe6:	4602      	mov	r2, r0
 800afe8:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <__multadd+0x8c>)
 800afea:	480e      	ldr	r0, [pc, #56]	; (800b024 <__multadd+0x90>)
 800afec:	21b5      	movs	r1, #181	; 0xb5
 800afee:	f000 fb51 	bl	800b694 <__assert_func>
 800aff2:	6922      	ldr	r2, [r4, #16]
 800aff4:	3202      	adds	r2, #2
 800aff6:	f104 010c 	add.w	r1, r4, #12
 800affa:	0092      	lsls	r2, r2, #2
 800affc:	300c      	adds	r0, #12
 800affe:	f7fe f84d 	bl	800909c <memcpy>
 800b002:	4621      	mov	r1, r4
 800b004:	4638      	mov	r0, r7
 800b006:	f7ff ffa3 	bl	800af50 <_Bfree>
 800b00a:	462c      	mov	r4, r5
 800b00c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b010:	3601      	adds	r6, #1
 800b012:	f8c3 8014 	str.w	r8, [r3, #20]
 800b016:	6126      	str	r6, [r4, #16]
 800b018:	4620      	mov	r0, r4
 800b01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b01e:	bf00      	nop
 800b020:	08017c77 	.word	0x08017c77
 800b024:	08017ce8 	.word	0x08017ce8

0800b028 <__hi0bits>:
 800b028:	0c03      	lsrs	r3, r0, #16
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	b9d3      	cbnz	r3, 800b064 <__hi0bits+0x3c>
 800b02e:	0400      	lsls	r0, r0, #16
 800b030:	2310      	movs	r3, #16
 800b032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b036:	bf04      	itt	eq
 800b038:	0200      	lsleq	r0, r0, #8
 800b03a:	3308      	addeq	r3, #8
 800b03c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b040:	bf04      	itt	eq
 800b042:	0100      	lsleq	r0, r0, #4
 800b044:	3304      	addeq	r3, #4
 800b046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b04a:	bf04      	itt	eq
 800b04c:	0080      	lsleq	r0, r0, #2
 800b04e:	3302      	addeq	r3, #2
 800b050:	2800      	cmp	r0, #0
 800b052:	db05      	blt.n	800b060 <__hi0bits+0x38>
 800b054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b058:	f103 0301 	add.w	r3, r3, #1
 800b05c:	bf08      	it	eq
 800b05e:	2320      	moveq	r3, #32
 800b060:	4618      	mov	r0, r3
 800b062:	4770      	bx	lr
 800b064:	2300      	movs	r3, #0
 800b066:	e7e4      	b.n	800b032 <__hi0bits+0xa>

0800b068 <__lo0bits>:
 800b068:	6803      	ldr	r3, [r0, #0]
 800b06a:	f013 0207 	ands.w	r2, r3, #7
 800b06e:	4601      	mov	r1, r0
 800b070:	d00b      	beq.n	800b08a <__lo0bits+0x22>
 800b072:	07da      	lsls	r2, r3, #31
 800b074:	d424      	bmi.n	800b0c0 <__lo0bits+0x58>
 800b076:	0798      	lsls	r0, r3, #30
 800b078:	bf49      	itett	mi
 800b07a:	085b      	lsrmi	r3, r3, #1
 800b07c:	089b      	lsrpl	r3, r3, #2
 800b07e:	2001      	movmi	r0, #1
 800b080:	600b      	strmi	r3, [r1, #0]
 800b082:	bf5c      	itt	pl
 800b084:	600b      	strpl	r3, [r1, #0]
 800b086:	2002      	movpl	r0, #2
 800b088:	4770      	bx	lr
 800b08a:	b298      	uxth	r0, r3
 800b08c:	b9b0      	cbnz	r0, 800b0bc <__lo0bits+0x54>
 800b08e:	0c1b      	lsrs	r3, r3, #16
 800b090:	2010      	movs	r0, #16
 800b092:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b096:	bf04      	itt	eq
 800b098:	0a1b      	lsreq	r3, r3, #8
 800b09a:	3008      	addeq	r0, #8
 800b09c:	071a      	lsls	r2, r3, #28
 800b09e:	bf04      	itt	eq
 800b0a0:	091b      	lsreq	r3, r3, #4
 800b0a2:	3004      	addeq	r0, #4
 800b0a4:	079a      	lsls	r2, r3, #30
 800b0a6:	bf04      	itt	eq
 800b0a8:	089b      	lsreq	r3, r3, #2
 800b0aa:	3002      	addeq	r0, #2
 800b0ac:	07da      	lsls	r2, r3, #31
 800b0ae:	d403      	bmi.n	800b0b8 <__lo0bits+0x50>
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	f100 0001 	add.w	r0, r0, #1
 800b0b6:	d005      	beq.n	800b0c4 <__lo0bits+0x5c>
 800b0b8:	600b      	str	r3, [r1, #0]
 800b0ba:	4770      	bx	lr
 800b0bc:	4610      	mov	r0, r2
 800b0be:	e7e8      	b.n	800b092 <__lo0bits+0x2a>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	4770      	bx	lr
 800b0c4:	2020      	movs	r0, #32
 800b0c6:	4770      	bx	lr

0800b0c8 <__i2b>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	f7ff feff 	bl	800aed0 <_Balloc>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	b928      	cbnz	r0, 800b0e2 <__i2b+0x1a>
 800b0d6:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <__i2b+0x24>)
 800b0d8:	4805      	ldr	r0, [pc, #20]	; (800b0f0 <__i2b+0x28>)
 800b0da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0de:	f000 fad9 	bl	800b694 <__assert_func>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	6144      	str	r4, [r0, #20]
 800b0e6:	6103      	str	r3, [r0, #16]
 800b0e8:	bd10      	pop	{r4, pc}
 800b0ea:	bf00      	nop
 800b0ec:	08017c77 	.word	0x08017c77
 800b0f0:	08017ce8 	.word	0x08017ce8

0800b0f4 <__multiply>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	690a      	ldr	r2, [r1, #16]
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	bfb8      	it	lt
 800b102:	460b      	movlt	r3, r1
 800b104:	460d      	mov	r5, r1
 800b106:	bfbc      	itt	lt
 800b108:	4625      	movlt	r5, r4
 800b10a:	461c      	movlt	r4, r3
 800b10c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b110:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b114:	68ab      	ldr	r3, [r5, #8]
 800b116:	6869      	ldr	r1, [r5, #4]
 800b118:	eb0a 0709 	add.w	r7, sl, r9
 800b11c:	42bb      	cmp	r3, r7
 800b11e:	b085      	sub	sp, #20
 800b120:	bfb8      	it	lt
 800b122:	3101      	addlt	r1, #1
 800b124:	f7ff fed4 	bl	800aed0 <_Balloc>
 800b128:	b930      	cbnz	r0, 800b138 <__multiply+0x44>
 800b12a:	4602      	mov	r2, r0
 800b12c:	4b42      	ldr	r3, [pc, #264]	; (800b238 <__multiply+0x144>)
 800b12e:	4843      	ldr	r0, [pc, #268]	; (800b23c <__multiply+0x148>)
 800b130:	f240 115d 	movw	r1, #349	; 0x15d
 800b134:	f000 faae 	bl	800b694 <__assert_func>
 800b138:	f100 0614 	add.w	r6, r0, #20
 800b13c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b140:	4633      	mov	r3, r6
 800b142:	2200      	movs	r2, #0
 800b144:	4543      	cmp	r3, r8
 800b146:	d31e      	bcc.n	800b186 <__multiply+0x92>
 800b148:	f105 0c14 	add.w	ip, r5, #20
 800b14c:	f104 0314 	add.w	r3, r4, #20
 800b150:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b154:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b158:	9202      	str	r2, [sp, #8]
 800b15a:	ebac 0205 	sub.w	r2, ip, r5
 800b15e:	3a15      	subs	r2, #21
 800b160:	f022 0203 	bic.w	r2, r2, #3
 800b164:	3204      	adds	r2, #4
 800b166:	f105 0115 	add.w	r1, r5, #21
 800b16a:	458c      	cmp	ip, r1
 800b16c:	bf38      	it	cc
 800b16e:	2204      	movcc	r2, #4
 800b170:	9201      	str	r2, [sp, #4]
 800b172:	9a02      	ldr	r2, [sp, #8]
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	429a      	cmp	r2, r3
 800b178:	d808      	bhi.n	800b18c <__multiply+0x98>
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	dc55      	bgt.n	800b22a <__multiply+0x136>
 800b17e:	6107      	str	r7, [r0, #16]
 800b180:	b005      	add	sp, #20
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	f843 2b04 	str.w	r2, [r3], #4
 800b18a:	e7db      	b.n	800b144 <__multiply+0x50>
 800b18c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b190:	f1ba 0f00 	cmp.w	sl, #0
 800b194:	d020      	beq.n	800b1d8 <__multiply+0xe4>
 800b196:	f105 0e14 	add.w	lr, r5, #20
 800b19a:	46b1      	mov	r9, r6
 800b19c:	2200      	movs	r2, #0
 800b19e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b1a2:	f8d9 b000 	ldr.w	fp, [r9]
 800b1a6:	b2a1      	uxth	r1, r4
 800b1a8:	fa1f fb8b 	uxth.w	fp, fp
 800b1ac:	fb0a b101 	mla	r1, sl, r1, fp
 800b1b0:	4411      	add	r1, r2
 800b1b2:	f8d9 2000 	ldr.w	r2, [r9]
 800b1b6:	0c24      	lsrs	r4, r4, #16
 800b1b8:	0c12      	lsrs	r2, r2, #16
 800b1ba:	fb0a 2404 	mla	r4, sl, r4, r2
 800b1be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b1c2:	b289      	uxth	r1, r1
 800b1c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1c8:	45f4      	cmp	ip, lr
 800b1ca:	f849 1b04 	str.w	r1, [r9], #4
 800b1ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b1d2:	d8e4      	bhi.n	800b19e <__multiply+0xaa>
 800b1d4:	9901      	ldr	r1, [sp, #4]
 800b1d6:	5072      	str	r2, [r6, r1]
 800b1d8:	9a03      	ldr	r2, [sp, #12]
 800b1da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	f1b9 0f00 	cmp.w	r9, #0
 800b1e4:	d01f      	beq.n	800b226 <__multiply+0x132>
 800b1e6:	6834      	ldr	r4, [r6, #0]
 800b1e8:	f105 0114 	add.w	r1, r5, #20
 800b1ec:	46b6      	mov	lr, r6
 800b1ee:	f04f 0a00 	mov.w	sl, #0
 800b1f2:	880a      	ldrh	r2, [r1, #0]
 800b1f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b1f8:	fb09 b202 	mla	r2, r9, r2, fp
 800b1fc:	4492      	add	sl, r2
 800b1fe:	b2a4      	uxth	r4, r4
 800b200:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b204:	f84e 4b04 	str.w	r4, [lr], #4
 800b208:	f851 4b04 	ldr.w	r4, [r1], #4
 800b20c:	f8be 2000 	ldrh.w	r2, [lr]
 800b210:	0c24      	lsrs	r4, r4, #16
 800b212:	fb09 2404 	mla	r4, r9, r4, r2
 800b216:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b21a:	458c      	cmp	ip, r1
 800b21c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b220:	d8e7      	bhi.n	800b1f2 <__multiply+0xfe>
 800b222:	9a01      	ldr	r2, [sp, #4]
 800b224:	50b4      	str	r4, [r6, r2]
 800b226:	3604      	adds	r6, #4
 800b228:	e7a3      	b.n	800b172 <__multiply+0x7e>
 800b22a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1a5      	bne.n	800b17e <__multiply+0x8a>
 800b232:	3f01      	subs	r7, #1
 800b234:	e7a1      	b.n	800b17a <__multiply+0x86>
 800b236:	bf00      	nop
 800b238:	08017c77 	.word	0x08017c77
 800b23c:	08017ce8 	.word	0x08017ce8

0800b240 <__pow5mult>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	4615      	mov	r5, r2
 800b246:	f012 0203 	ands.w	r2, r2, #3
 800b24a:	4606      	mov	r6, r0
 800b24c:	460f      	mov	r7, r1
 800b24e:	d007      	beq.n	800b260 <__pow5mult+0x20>
 800b250:	4c25      	ldr	r4, [pc, #148]	; (800b2e8 <__pow5mult+0xa8>)
 800b252:	3a01      	subs	r2, #1
 800b254:	2300      	movs	r3, #0
 800b256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b25a:	f7ff fe9b 	bl	800af94 <__multadd>
 800b25e:	4607      	mov	r7, r0
 800b260:	10ad      	asrs	r5, r5, #2
 800b262:	d03d      	beq.n	800b2e0 <__pow5mult+0xa0>
 800b264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b266:	b97c      	cbnz	r4, 800b288 <__pow5mult+0x48>
 800b268:	2010      	movs	r0, #16
 800b26a:	f7fd ff0f 	bl	800908c <malloc>
 800b26e:	4602      	mov	r2, r0
 800b270:	6270      	str	r0, [r6, #36]	; 0x24
 800b272:	b928      	cbnz	r0, 800b280 <__pow5mult+0x40>
 800b274:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <__pow5mult+0xac>)
 800b276:	481e      	ldr	r0, [pc, #120]	; (800b2f0 <__pow5mult+0xb0>)
 800b278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b27c:	f000 fa0a 	bl	800b694 <__assert_func>
 800b280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b284:	6004      	str	r4, [r0, #0]
 800b286:	60c4      	str	r4, [r0, #12]
 800b288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b290:	b94c      	cbnz	r4, 800b2a6 <__pow5mult+0x66>
 800b292:	f240 2171 	movw	r1, #625	; 0x271
 800b296:	4630      	mov	r0, r6
 800b298:	f7ff ff16 	bl	800b0c8 <__i2b>
 800b29c:	2300      	movs	r3, #0
 800b29e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	6003      	str	r3, [r0, #0]
 800b2a6:	f04f 0900 	mov.w	r9, #0
 800b2aa:	07eb      	lsls	r3, r5, #31
 800b2ac:	d50a      	bpl.n	800b2c4 <__pow5mult+0x84>
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f7ff ff1e 	bl	800b0f4 <__multiply>
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	4680      	mov	r8, r0
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7ff fe47 	bl	800af50 <_Bfree>
 800b2c2:	4647      	mov	r7, r8
 800b2c4:	106d      	asrs	r5, r5, #1
 800b2c6:	d00b      	beq.n	800b2e0 <__pow5mult+0xa0>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	b938      	cbnz	r0, 800b2dc <__pow5mult+0x9c>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7ff ff0f 	bl	800b0f4 <__multiply>
 800b2d6:	6020      	str	r0, [r4, #0]
 800b2d8:	f8c0 9000 	str.w	r9, [r0]
 800b2dc:	4604      	mov	r4, r0
 800b2de:	e7e4      	b.n	800b2aa <__pow5mult+0x6a>
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e6:	bf00      	nop
 800b2e8:	08017e38 	.word	0x08017e38
 800b2ec:	08017c01 	.word	0x08017c01
 800b2f0:	08017ce8 	.word	0x08017ce8

0800b2f4 <__lshift>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	6849      	ldr	r1, [r1, #4]
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	4607      	mov	r7, r0
 800b306:	4691      	mov	r9, r2
 800b308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b30c:	f108 0601 	add.w	r6, r8, #1
 800b310:	42b3      	cmp	r3, r6
 800b312:	db0b      	blt.n	800b32c <__lshift+0x38>
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff fddb 	bl	800aed0 <_Balloc>
 800b31a:	4605      	mov	r5, r0
 800b31c:	b948      	cbnz	r0, 800b332 <__lshift+0x3e>
 800b31e:	4602      	mov	r2, r0
 800b320:	4b28      	ldr	r3, [pc, #160]	; (800b3c4 <__lshift+0xd0>)
 800b322:	4829      	ldr	r0, [pc, #164]	; (800b3c8 <__lshift+0xd4>)
 800b324:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b328:	f000 f9b4 	bl	800b694 <__assert_func>
 800b32c:	3101      	adds	r1, #1
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	e7ee      	b.n	800b310 <__lshift+0x1c>
 800b332:	2300      	movs	r3, #0
 800b334:	f100 0114 	add.w	r1, r0, #20
 800b338:	f100 0210 	add.w	r2, r0, #16
 800b33c:	4618      	mov	r0, r3
 800b33e:	4553      	cmp	r3, sl
 800b340:	db33      	blt.n	800b3aa <__lshift+0xb6>
 800b342:	6920      	ldr	r0, [r4, #16]
 800b344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b348:	f104 0314 	add.w	r3, r4, #20
 800b34c:	f019 091f 	ands.w	r9, r9, #31
 800b350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b358:	d02b      	beq.n	800b3b2 <__lshift+0xbe>
 800b35a:	f1c9 0e20 	rsb	lr, r9, #32
 800b35e:	468a      	mov	sl, r1
 800b360:	2200      	movs	r2, #0
 800b362:	6818      	ldr	r0, [r3, #0]
 800b364:	fa00 f009 	lsl.w	r0, r0, r9
 800b368:	4302      	orrs	r2, r0
 800b36a:	f84a 2b04 	str.w	r2, [sl], #4
 800b36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b372:	459c      	cmp	ip, r3
 800b374:	fa22 f20e 	lsr.w	r2, r2, lr
 800b378:	d8f3      	bhi.n	800b362 <__lshift+0x6e>
 800b37a:	ebac 0304 	sub.w	r3, ip, r4
 800b37e:	3b15      	subs	r3, #21
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	3304      	adds	r3, #4
 800b386:	f104 0015 	add.w	r0, r4, #21
 800b38a:	4584      	cmp	ip, r0
 800b38c:	bf38      	it	cc
 800b38e:	2304      	movcc	r3, #4
 800b390:	50ca      	str	r2, [r1, r3]
 800b392:	b10a      	cbz	r2, 800b398 <__lshift+0xa4>
 800b394:	f108 0602 	add.w	r6, r8, #2
 800b398:	3e01      	subs	r6, #1
 800b39a:	4638      	mov	r0, r7
 800b39c:	612e      	str	r6, [r5, #16]
 800b39e:	4621      	mov	r1, r4
 800b3a0:	f7ff fdd6 	bl	800af50 <_Bfree>
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	e7c5      	b.n	800b33e <__lshift+0x4a>
 800b3b2:	3904      	subs	r1, #4
 800b3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3bc:	459c      	cmp	ip, r3
 800b3be:	d8f9      	bhi.n	800b3b4 <__lshift+0xc0>
 800b3c0:	e7ea      	b.n	800b398 <__lshift+0xa4>
 800b3c2:	bf00      	nop
 800b3c4:	08017c77 	.word	0x08017c77
 800b3c8:	08017ce8 	.word	0x08017ce8

0800b3cc <__mcmp>:
 800b3cc:	b530      	push	{r4, r5, lr}
 800b3ce:	6902      	ldr	r2, [r0, #16]
 800b3d0:	690c      	ldr	r4, [r1, #16]
 800b3d2:	1b12      	subs	r2, r2, r4
 800b3d4:	d10e      	bne.n	800b3f4 <__mcmp+0x28>
 800b3d6:	f100 0314 	add.w	r3, r0, #20
 800b3da:	3114      	adds	r1, #20
 800b3dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3ec:	42a5      	cmp	r5, r4
 800b3ee:	d003      	beq.n	800b3f8 <__mcmp+0x2c>
 800b3f0:	d305      	bcc.n	800b3fe <__mcmp+0x32>
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	bd30      	pop	{r4, r5, pc}
 800b3f8:	4283      	cmp	r3, r0
 800b3fa:	d3f3      	bcc.n	800b3e4 <__mcmp+0x18>
 800b3fc:	e7fa      	b.n	800b3f4 <__mcmp+0x28>
 800b3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b402:	e7f7      	b.n	800b3f4 <__mcmp+0x28>

0800b404 <__mdiff>:
 800b404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	460c      	mov	r4, r1
 800b40a:	4606      	mov	r6, r0
 800b40c:	4611      	mov	r1, r2
 800b40e:	4620      	mov	r0, r4
 800b410:	4617      	mov	r7, r2
 800b412:	f7ff ffdb 	bl	800b3cc <__mcmp>
 800b416:	1e05      	subs	r5, r0, #0
 800b418:	d110      	bne.n	800b43c <__mdiff+0x38>
 800b41a:	4629      	mov	r1, r5
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fd57 	bl	800aed0 <_Balloc>
 800b422:	b930      	cbnz	r0, 800b432 <__mdiff+0x2e>
 800b424:	4b39      	ldr	r3, [pc, #228]	; (800b50c <__mdiff+0x108>)
 800b426:	4602      	mov	r2, r0
 800b428:	f240 2132 	movw	r1, #562	; 0x232
 800b42c:	4838      	ldr	r0, [pc, #224]	; (800b510 <__mdiff+0x10c>)
 800b42e:	f000 f931 	bl	800b694 <__assert_func>
 800b432:	2301      	movs	r3, #1
 800b434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43c:	bfa4      	itt	ge
 800b43e:	463b      	movge	r3, r7
 800b440:	4627      	movge	r7, r4
 800b442:	4630      	mov	r0, r6
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	bfa6      	itte	ge
 800b448:	461c      	movge	r4, r3
 800b44a:	2500      	movge	r5, #0
 800b44c:	2501      	movlt	r5, #1
 800b44e:	f7ff fd3f 	bl	800aed0 <_Balloc>
 800b452:	b920      	cbnz	r0, 800b45e <__mdiff+0x5a>
 800b454:	4b2d      	ldr	r3, [pc, #180]	; (800b50c <__mdiff+0x108>)
 800b456:	4602      	mov	r2, r0
 800b458:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b45c:	e7e6      	b.n	800b42c <__mdiff+0x28>
 800b45e:	693e      	ldr	r6, [r7, #16]
 800b460:	60c5      	str	r5, [r0, #12]
 800b462:	6925      	ldr	r5, [r4, #16]
 800b464:	f107 0114 	add.w	r1, r7, #20
 800b468:	f104 0914 	add.w	r9, r4, #20
 800b46c:	f100 0e14 	add.w	lr, r0, #20
 800b470:	f107 0210 	add.w	r2, r7, #16
 800b474:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b478:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b47c:	46f2      	mov	sl, lr
 800b47e:	2700      	movs	r7, #0
 800b480:	f859 3b04 	ldr.w	r3, [r9], #4
 800b484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b488:	fa1f f883 	uxth.w	r8, r3
 800b48c:	fa17 f78b 	uxtah	r7, r7, fp
 800b490:	0c1b      	lsrs	r3, r3, #16
 800b492:	eba7 0808 	sub.w	r8, r7, r8
 800b496:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b49a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b49e:	fa1f f888 	uxth.w	r8, r8
 800b4a2:	141f      	asrs	r7, r3, #16
 800b4a4:	454d      	cmp	r5, r9
 800b4a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4aa:	f84a 3b04 	str.w	r3, [sl], #4
 800b4ae:	d8e7      	bhi.n	800b480 <__mdiff+0x7c>
 800b4b0:	1b2b      	subs	r3, r5, r4
 800b4b2:	3b15      	subs	r3, #21
 800b4b4:	f023 0303 	bic.w	r3, r3, #3
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	3415      	adds	r4, #21
 800b4bc:	42a5      	cmp	r5, r4
 800b4be:	bf38      	it	cc
 800b4c0:	2304      	movcc	r3, #4
 800b4c2:	4419      	add	r1, r3
 800b4c4:	4473      	add	r3, lr
 800b4c6:	469e      	mov	lr, r3
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	4565      	cmp	r5, ip
 800b4cc:	d30e      	bcc.n	800b4ec <__mdiff+0xe8>
 800b4ce:	f10c 0203 	add.w	r2, ip, #3
 800b4d2:	1a52      	subs	r2, r2, r1
 800b4d4:	f022 0203 	bic.w	r2, r2, #3
 800b4d8:	3903      	subs	r1, #3
 800b4da:	458c      	cmp	ip, r1
 800b4dc:	bf38      	it	cc
 800b4de:	2200      	movcc	r2, #0
 800b4e0:	441a      	add	r2, r3
 800b4e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4e6:	b17b      	cbz	r3, 800b508 <__mdiff+0x104>
 800b4e8:	6106      	str	r6, [r0, #16]
 800b4ea:	e7a5      	b.n	800b438 <__mdiff+0x34>
 800b4ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4f0:	fa17 f488 	uxtah	r4, r7, r8
 800b4f4:	1422      	asrs	r2, r4, #16
 800b4f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b4fa:	b2a4      	uxth	r4, r4
 800b4fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b500:	f84e 4b04 	str.w	r4, [lr], #4
 800b504:	1417      	asrs	r7, r2, #16
 800b506:	e7e0      	b.n	800b4ca <__mdiff+0xc6>
 800b508:	3e01      	subs	r6, #1
 800b50a:	e7ea      	b.n	800b4e2 <__mdiff+0xde>
 800b50c:	08017c77 	.word	0x08017c77
 800b510:	08017ce8 	.word	0x08017ce8

0800b514 <__d2b>:
 800b514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b518:	4689      	mov	r9, r1
 800b51a:	2101      	movs	r1, #1
 800b51c:	ec57 6b10 	vmov	r6, r7, d0
 800b520:	4690      	mov	r8, r2
 800b522:	f7ff fcd5 	bl	800aed0 <_Balloc>
 800b526:	4604      	mov	r4, r0
 800b528:	b930      	cbnz	r0, 800b538 <__d2b+0x24>
 800b52a:	4602      	mov	r2, r0
 800b52c:	4b25      	ldr	r3, [pc, #148]	; (800b5c4 <__d2b+0xb0>)
 800b52e:	4826      	ldr	r0, [pc, #152]	; (800b5c8 <__d2b+0xb4>)
 800b530:	f240 310a 	movw	r1, #778	; 0x30a
 800b534:	f000 f8ae 	bl	800b694 <__assert_func>
 800b538:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b53c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b540:	bb35      	cbnz	r5, 800b590 <__d2b+0x7c>
 800b542:	2e00      	cmp	r6, #0
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	d028      	beq.n	800b59a <__d2b+0x86>
 800b548:	4668      	mov	r0, sp
 800b54a:	9600      	str	r6, [sp, #0]
 800b54c:	f7ff fd8c 	bl	800b068 <__lo0bits>
 800b550:	9900      	ldr	r1, [sp, #0]
 800b552:	b300      	cbz	r0, 800b596 <__d2b+0x82>
 800b554:	9a01      	ldr	r2, [sp, #4]
 800b556:	f1c0 0320 	rsb	r3, r0, #32
 800b55a:	fa02 f303 	lsl.w	r3, r2, r3
 800b55e:	430b      	orrs	r3, r1
 800b560:	40c2      	lsrs	r2, r0
 800b562:	6163      	str	r3, [r4, #20]
 800b564:	9201      	str	r2, [sp, #4]
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	61a3      	str	r3, [r4, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	bf14      	ite	ne
 800b56e:	2202      	movne	r2, #2
 800b570:	2201      	moveq	r2, #1
 800b572:	6122      	str	r2, [r4, #16]
 800b574:	b1d5      	cbz	r5, 800b5ac <__d2b+0x98>
 800b576:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b57a:	4405      	add	r5, r0
 800b57c:	f8c9 5000 	str.w	r5, [r9]
 800b580:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b584:	f8c8 0000 	str.w	r0, [r8]
 800b588:	4620      	mov	r0, r4
 800b58a:	b003      	add	sp, #12
 800b58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b594:	e7d5      	b.n	800b542 <__d2b+0x2e>
 800b596:	6161      	str	r1, [r4, #20]
 800b598:	e7e5      	b.n	800b566 <__d2b+0x52>
 800b59a:	a801      	add	r0, sp, #4
 800b59c:	f7ff fd64 	bl	800b068 <__lo0bits>
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	6163      	str	r3, [r4, #20]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	6122      	str	r2, [r4, #16]
 800b5a8:	3020      	adds	r0, #32
 800b5aa:	e7e3      	b.n	800b574 <__d2b+0x60>
 800b5ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5b4:	f8c9 0000 	str.w	r0, [r9]
 800b5b8:	6918      	ldr	r0, [r3, #16]
 800b5ba:	f7ff fd35 	bl	800b028 <__hi0bits>
 800b5be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5c2:	e7df      	b.n	800b584 <__d2b+0x70>
 800b5c4:	08017c77 	.word	0x08017c77
 800b5c8:	08017ce8 	.word	0x08017ce8

0800b5cc <_calloc_r>:
 800b5cc:	b513      	push	{r0, r1, r4, lr}
 800b5ce:	434a      	muls	r2, r1
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	9201      	str	r2, [sp, #4]
 800b5d4:	f7fd fdc8 	bl	8009168 <_malloc_r>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	b118      	cbz	r0, 800b5e4 <_calloc_r+0x18>
 800b5dc:	9a01      	ldr	r2, [sp, #4]
 800b5de:	2100      	movs	r1, #0
 800b5e0:	f7fd fd6a 	bl	80090b8 <memset>
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	b002      	add	sp, #8
 800b5e8:	bd10      	pop	{r4, pc}

0800b5ea <__sread>:
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f2:	f000 fa2f 	bl	800ba54 <_read_r>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	bfab      	itete	ge
 800b5fa:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5fc:	89a3      	ldrhlt	r3, [r4, #12]
 800b5fe:	181b      	addge	r3, r3, r0
 800b600:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b604:	bfac      	ite	ge
 800b606:	6563      	strge	r3, [r4, #84]	; 0x54
 800b608:	81a3      	strhlt	r3, [r4, #12]
 800b60a:	bd10      	pop	{r4, pc}

0800b60c <__swrite>:
 800b60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b610:	461f      	mov	r7, r3
 800b612:	898b      	ldrh	r3, [r1, #12]
 800b614:	05db      	lsls	r3, r3, #23
 800b616:	4605      	mov	r5, r0
 800b618:	460c      	mov	r4, r1
 800b61a:	4616      	mov	r6, r2
 800b61c:	d505      	bpl.n	800b62a <__swrite+0x1e>
 800b61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b622:	2302      	movs	r3, #2
 800b624:	2200      	movs	r2, #0
 800b626:	f000 f897 	bl	800b758 <_lseek_r>
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	4632      	mov	r2, r6
 800b638:	463b      	mov	r3, r7
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	f000 b816 	b.w	800b670 <_write_r>

0800b644 <__sseek>:
 800b644:	b510      	push	{r4, lr}
 800b646:	460c      	mov	r4, r1
 800b648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64c:	f000 f884 	bl	800b758 <_lseek_r>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	bf15      	itete	ne
 800b656:	6560      	strne	r0, [r4, #84]	; 0x54
 800b658:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b65c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b660:	81a3      	strheq	r3, [r4, #12]
 800b662:	bf18      	it	ne
 800b664:	81a3      	strhne	r3, [r4, #12]
 800b666:	bd10      	pop	{r4, pc}

0800b668 <__sclose>:
 800b668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66c:	f000 b830 	b.w	800b6d0 <_close_r>

0800b670 <_write_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_write_r+0x20>)
 800b674:	4604      	mov	r4, r0
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	2200      	movs	r2, #0
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f7f5 ff1e 	bl	80014c0 <_write>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_write_r+0x1e>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_write_r+0x1e>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	2000133c 	.word	0x2000133c

0800b694 <__assert_func>:
 800b694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b696:	4614      	mov	r4, r2
 800b698:	461a      	mov	r2, r3
 800b69a:	4b09      	ldr	r3, [pc, #36]	; (800b6c0 <__assert_func+0x2c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4605      	mov	r5, r0
 800b6a0:	68d8      	ldr	r0, [r3, #12]
 800b6a2:	b14c      	cbz	r4, 800b6b8 <__assert_func+0x24>
 800b6a4:	4b07      	ldr	r3, [pc, #28]	; (800b6c4 <__assert_func+0x30>)
 800b6a6:	9100      	str	r1, [sp, #0]
 800b6a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6ac:	4906      	ldr	r1, [pc, #24]	; (800b6c8 <__assert_func+0x34>)
 800b6ae:	462b      	mov	r3, r5
 800b6b0:	f000 f81e 	bl	800b6f0 <fiprintf>
 800b6b4:	f000 f9ed 	bl	800ba92 <abort>
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <__assert_func+0x38>)
 800b6ba:	461c      	mov	r4, r3
 800b6bc:	e7f3      	b.n	800b6a6 <__assert_func+0x12>
 800b6be:	bf00      	nop
 800b6c0:	200007dc 	.word	0x200007dc
 800b6c4:	08017e44 	.word	0x08017e44
 800b6c8:	08017e51 	.word	0x08017e51
 800b6cc:	08017e7f 	.word	0x08017e7f

0800b6d0 <_close_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d06      	ldr	r5, [pc, #24]	; (800b6ec <_close_r+0x1c>)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4608      	mov	r0, r1
 800b6da:	602b      	str	r3, [r5, #0]
 800b6dc:	f000 fb44 	bl	800bd68 <_close>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_close_r+0x1a>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_close_r+0x1a>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	2000133c 	.word	0x2000133c

0800b6f0 <fiprintf>:
 800b6f0:	b40e      	push	{r1, r2, r3}
 800b6f2:	b503      	push	{r0, r1, lr}
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <fiprintf+0x20>)
 800b6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fe:	6800      	ldr	r0, [r0, #0]
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	f000 f877 	bl	800b7f4 <_vfiprintf_r>
 800b706:	b002      	add	sp, #8
 800b708:	f85d eb04 	ldr.w	lr, [sp], #4
 800b70c:	b003      	add	sp, #12
 800b70e:	4770      	bx	lr
 800b710:	200007dc 	.word	0x200007dc

0800b714 <_fstat_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4d07      	ldr	r5, [pc, #28]	; (800b734 <_fstat_r+0x20>)
 800b718:	2300      	movs	r3, #0
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	f000 fb29 	bl	800bd78 <_fstat>
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	d102      	bne.n	800b730 <_fstat_r+0x1c>
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	b103      	cbz	r3, 800b730 <_fstat_r+0x1c>
 800b72e:	6023      	str	r3, [r4, #0]
 800b730:	bd38      	pop	{r3, r4, r5, pc}
 800b732:	bf00      	nop
 800b734:	2000133c 	.word	0x2000133c

0800b738 <_isatty_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d06      	ldr	r5, [pc, #24]	; (800b754 <_isatty_r+0x1c>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f000 fb28 	bl	800bd98 <_isatty>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_isatty_r+0x1a>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_isatty_r+0x1a>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	2000133c 	.word	0x2000133c

0800b758 <_lseek_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_lseek_r+0x20>)
 800b75c:	4604      	mov	r4, r0
 800b75e:	4608      	mov	r0, r1
 800b760:	4611      	mov	r1, r2
 800b762:	2200      	movs	r2, #0
 800b764:	602a      	str	r2, [r5, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	f000 fb26 	bl	800bdb8 <_lseek>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_lseek_r+0x1e>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_lseek_r+0x1e>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	2000133c 	.word	0x2000133c

0800b77c <__ascii_mbtowc>:
 800b77c:	b082      	sub	sp, #8
 800b77e:	b901      	cbnz	r1, 800b782 <__ascii_mbtowc+0x6>
 800b780:	a901      	add	r1, sp, #4
 800b782:	b142      	cbz	r2, 800b796 <__ascii_mbtowc+0x1a>
 800b784:	b14b      	cbz	r3, 800b79a <__ascii_mbtowc+0x1e>
 800b786:	7813      	ldrb	r3, [r2, #0]
 800b788:	600b      	str	r3, [r1, #0]
 800b78a:	7812      	ldrb	r2, [r2, #0]
 800b78c:	1e10      	subs	r0, r2, #0
 800b78e:	bf18      	it	ne
 800b790:	2001      	movne	r0, #1
 800b792:	b002      	add	sp, #8
 800b794:	4770      	bx	lr
 800b796:	4610      	mov	r0, r2
 800b798:	e7fb      	b.n	800b792 <__ascii_mbtowc+0x16>
 800b79a:	f06f 0001 	mvn.w	r0, #1
 800b79e:	e7f8      	b.n	800b792 <__ascii_mbtowc+0x16>

0800b7a0 <__sfputc_r>:
 800b7a0:	6893      	ldr	r3, [r2, #8]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	b410      	push	{r4}
 800b7a8:	6093      	str	r3, [r2, #8]
 800b7aa:	da08      	bge.n	800b7be <__sfputc_r+0x1e>
 800b7ac:	6994      	ldr	r4, [r2, #24]
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	db01      	blt.n	800b7b6 <__sfputc_r+0x16>
 800b7b2:	290a      	cmp	r1, #10
 800b7b4:	d103      	bne.n	800b7be <__sfputc_r+0x1e>
 800b7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ba:	f7fe ba1f 	b.w	8009bfc <__swbuf_r>
 800b7be:	6813      	ldr	r3, [r2, #0]
 800b7c0:	1c58      	adds	r0, r3, #1
 800b7c2:	6010      	str	r0, [r2, #0]
 800b7c4:	7019      	strb	r1, [r3, #0]
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <__sfputs_r>:
 800b7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	18d5      	adds	r5, r2, r3
 800b7d8:	42ac      	cmp	r4, r5
 800b7da:	d101      	bne.n	800b7e0 <__sfputs_r+0x12>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e007      	b.n	800b7f0 <__sfputs_r+0x22>
 800b7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e4:	463a      	mov	r2, r7
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7ff ffda 	bl	800b7a0 <__sfputc_r>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d1f3      	bne.n	800b7d8 <__sfputs_r+0xa>
 800b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7f4 <_vfiprintf_r>:
 800b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	b09d      	sub	sp, #116	; 0x74
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	4698      	mov	r8, r3
 800b800:	4606      	mov	r6, r0
 800b802:	b118      	cbz	r0, 800b80c <_vfiprintf_r+0x18>
 800b804:	6983      	ldr	r3, [r0, #24]
 800b806:	b90b      	cbnz	r3, 800b80c <_vfiprintf_r+0x18>
 800b808:	f7ff fa4c 	bl	800aca4 <__sinit>
 800b80c:	4b89      	ldr	r3, [pc, #548]	; (800ba34 <_vfiprintf_r+0x240>)
 800b80e:	429d      	cmp	r5, r3
 800b810:	d11b      	bne.n	800b84a <_vfiprintf_r+0x56>
 800b812:	6875      	ldr	r5, [r6, #4]
 800b814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b816:	07d9      	lsls	r1, r3, #31
 800b818:	d405      	bmi.n	800b826 <_vfiprintf_r+0x32>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	059a      	lsls	r2, r3, #22
 800b81e:	d402      	bmi.n	800b826 <_vfiprintf_r+0x32>
 800b820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b822:	f7ff fae2 	bl	800adea <__retarget_lock_acquire_recursive>
 800b826:	89ab      	ldrh	r3, [r5, #12]
 800b828:	071b      	lsls	r3, r3, #28
 800b82a:	d501      	bpl.n	800b830 <_vfiprintf_r+0x3c>
 800b82c:	692b      	ldr	r3, [r5, #16]
 800b82e:	b9eb      	cbnz	r3, 800b86c <_vfiprintf_r+0x78>
 800b830:	4629      	mov	r1, r5
 800b832:	4630      	mov	r0, r6
 800b834:	f7fe fa34 	bl	8009ca0 <__swsetup_r>
 800b838:	b1c0      	cbz	r0, 800b86c <_vfiprintf_r+0x78>
 800b83a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b83c:	07dc      	lsls	r4, r3, #31
 800b83e:	d50e      	bpl.n	800b85e <_vfiprintf_r+0x6a>
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	b01d      	add	sp, #116	; 0x74
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84a:	4b7b      	ldr	r3, [pc, #492]	; (800ba38 <_vfiprintf_r+0x244>)
 800b84c:	429d      	cmp	r5, r3
 800b84e:	d101      	bne.n	800b854 <_vfiprintf_r+0x60>
 800b850:	68b5      	ldr	r5, [r6, #8]
 800b852:	e7df      	b.n	800b814 <_vfiprintf_r+0x20>
 800b854:	4b79      	ldr	r3, [pc, #484]	; (800ba3c <_vfiprintf_r+0x248>)
 800b856:	429d      	cmp	r5, r3
 800b858:	bf08      	it	eq
 800b85a:	68f5      	ldreq	r5, [r6, #12]
 800b85c:	e7da      	b.n	800b814 <_vfiprintf_r+0x20>
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	0598      	lsls	r0, r3, #22
 800b862:	d4ed      	bmi.n	800b840 <_vfiprintf_r+0x4c>
 800b864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b866:	f7ff fac1 	bl	800adec <__retarget_lock_release_recursive>
 800b86a:	e7e9      	b.n	800b840 <_vfiprintf_r+0x4c>
 800b86c:	2300      	movs	r3, #0
 800b86e:	9309      	str	r3, [sp, #36]	; 0x24
 800b870:	2320      	movs	r3, #32
 800b872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b876:	f8cd 800c 	str.w	r8, [sp, #12]
 800b87a:	2330      	movs	r3, #48	; 0x30
 800b87c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba40 <_vfiprintf_r+0x24c>
 800b880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b884:	f04f 0901 	mov.w	r9, #1
 800b888:	4623      	mov	r3, r4
 800b88a:	469a      	mov	sl, r3
 800b88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b890:	b10a      	cbz	r2, 800b896 <_vfiprintf_r+0xa2>
 800b892:	2a25      	cmp	r2, #37	; 0x25
 800b894:	d1f9      	bne.n	800b88a <_vfiprintf_r+0x96>
 800b896:	ebba 0b04 	subs.w	fp, sl, r4
 800b89a:	d00b      	beq.n	800b8b4 <_vfiprintf_r+0xc0>
 800b89c:	465b      	mov	r3, fp
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7ff ff93 	bl	800b7ce <__sfputs_r>
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	f000 80aa 	beq.w	800ba02 <_vfiprintf_r+0x20e>
 800b8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8b0:	445a      	add	r2, fp
 800b8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 80a2 	beq.w	800ba02 <_vfiprintf_r+0x20e>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8c8:	f10a 0a01 	add.w	sl, sl, #1
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	9307      	str	r3, [sp, #28]
 800b8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8d6:	4654      	mov	r4, sl
 800b8d8:	2205      	movs	r2, #5
 800b8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8de:	4858      	ldr	r0, [pc, #352]	; (800ba40 <_vfiprintf_r+0x24c>)
 800b8e0:	f7f4 fc7e 	bl	80001e0 <memchr>
 800b8e4:	9a04      	ldr	r2, [sp, #16]
 800b8e6:	b9d8      	cbnz	r0, 800b920 <_vfiprintf_r+0x12c>
 800b8e8:	06d1      	lsls	r1, r2, #27
 800b8ea:	bf44      	itt	mi
 800b8ec:	2320      	movmi	r3, #32
 800b8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8f2:	0713      	lsls	r3, r2, #28
 800b8f4:	bf44      	itt	mi
 800b8f6:	232b      	movmi	r3, #43	; 0x2b
 800b8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b900:	2b2a      	cmp	r3, #42	; 0x2a
 800b902:	d015      	beq.n	800b930 <_vfiprintf_r+0x13c>
 800b904:	9a07      	ldr	r2, [sp, #28]
 800b906:	4654      	mov	r4, sl
 800b908:	2000      	movs	r0, #0
 800b90a:	f04f 0c0a 	mov.w	ip, #10
 800b90e:	4621      	mov	r1, r4
 800b910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b914:	3b30      	subs	r3, #48	; 0x30
 800b916:	2b09      	cmp	r3, #9
 800b918:	d94e      	bls.n	800b9b8 <_vfiprintf_r+0x1c4>
 800b91a:	b1b0      	cbz	r0, 800b94a <_vfiprintf_r+0x156>
 800b91c:	9207      	str	r2, [sp, #28]
 800b91e:	e014      	b.n	800b94a <_vfiprintf_r+0x156>
 800b920:	eba0 0308 	sub.w	r3, r0, r8
 800b924:	fa09 f303 	lsl.w	r3, r9, r3
 800b928:	4313      	orrs	r3, r2
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	46a2      	mov	sl, r4
 800b92e:	e7d2      	b.n	800b8d6 <_vfiprintf_r+0xe2>
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	1d19      	adds	r1, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	9103      	str	r1, [sp, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfbb      	ittet	lt
 800b93c:	425b      	neglt	r3, r3
 800b93e:	f042 0202 	orrlt.w	r2, r2, #2
 800b942:	9307      	strge	r3, [sp, #28]
 800b944:	9307      	strlt	r3, [sp, #28]
 800b946:	bfb8      	it	lt
 800b948:	9204      	strlt	r2, [sp, #16]
 800b94a:	7823      	ldrb	r3, [r4, #0]
 800b94c:	2b2e      	cmp	r3, #46	; 0x2e
 800b94e:	d10c      	bne.n	800b96a <_vfiprintf_r+0x176>
 800b950:	7863      	ldrb	r3, [r4, #1]
 800b952:	2b2a      	cmp	r3, #42	; 0x2a
 800b954:	d135      	bne.n	800b9c2 <_vfiprintf_r+0x1ce>
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	1d1a      	adds	r2, r3, #4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	9203      	str	r2, [sp, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bfb8      	it	lt
 800b962:	f04f 33ff 	movlt.w	r3, #4294967295
 800b966:	3402      	adds	r4, #2
 800b968:	9305      	str	r3, [sp, #20]
 800b96a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba50 <_vfiprintf_r+0x25c>
 800b96e:	7821      	ldrb	r1, [r4, #0]
 800b970:	2203      	movs	r2, #3
 800b972:	4650      	mov	r0, sl
 800b974:	f7f4 fc34 	bl	80001e0 <memchr>
 800b978:	b140      	cbz	r0, 800b98c <_vfiprintf_r+0x198>
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	eba0 000a 	sub.w	r0, r0, sl
 800b980:	fa03 f000 	lsl.w	r0, r3, r0
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	4303      	orrs	r3, r0
 800b988:	3401      	adds	r4, #1
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b990:	482c      	ldr	r0, [pc, #176]	; (800ba44 <_vfiprintf_r+0x250>)
 800b992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b996:	2206      	movs	r2, #6
 800b998:	f7f4 fc22 	bl	80001e0 <memchr>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d03f      	beq.n	800ba20 <_vfiprintf_r+0x22c>
 800b9a0:	4b29      	ldr	r3, [pc, #164]	; (800ba48 <_vfiprintf_r+0x254>)
 800b9a2:	bb1b      	cbnz	r3, 800b9ec <_vfiprintf_r+0x1f8>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	3307      	adds	r3, #7
 800b9a8:	f023 0307 	bic.w	r3, r3, #7
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	9303      	str	r3, [sp, #12]
 800b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b2:	443b      	add	r3, r7
 800b9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b6:	e767      	b.n	800b888 <_vfiprintf_r+0x94>
 800b9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9bc:	460c      	mov	r4, r1
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7a5      	b.n	800b90e <_vfiprintf_r+0x11a>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	3401      	adds	r4, #1
 800b9c6:	9305      	str	r3, [sp, #20]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f04f 0c0a 	mov.w	ip, #10
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9d4:	3a30      	subs	r2, #48	; 0x30
 800b9d6:	2a09      	cmp	r2, #9
 800b9d8:	d903      	bls.n	800b9e2 <_vfiprintf_r+0x1ee>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0c5      	beq.n	800b96a <_vfiprintf_r+0x176>
 800b9de:	9105      	str	r1, [sp, #20]
 800b9e0:	e7c3      	b.n	800b96a <_vfiprintf_r+0x176>
 800b9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e7f0      	b.n	800b9ce <_vfiprintf_r+0x1da>
 800b9ec:	ab03      	add	r3, sp, #12
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4b16      	ldr	r3, [pc, #88]	; (800ba4c <_vfiprintf_r+0x258>)
 800b9f4:	a904      	add	r1, sp, #16
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7fd fcb0 	bl	800935c <_printf_float>
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	1c78      	adds	r0, r7, #1
 800ba00:	d1d6      	bne.n	800b9b0 <_vfiprintf_r+0x1bc>
 800ba02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba04:	07d9      	lsls	r1, r3, #31
 800ba06:	d405      	bmi.n	800ba14 <_vfiprintf_r+0x220>
 800ba08:	89ab      	ldrh	r3, [r5, #12]
 800ba0a:	059a      	lsls	r2, r3, #22
 800ba0c:	d402      	bmi.n	800ba14 <_vfiprintf_r+0x220>
 800ba0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba10:	f7ff f9ec 	bl	800adec <__retarget_lock_release_recursive>
 800ba14:	89ab      	ldrh	r3, [r5, #12]
 800ba16:	065b      	lsls	r3, r3, #25
 800ba18:	f53f af12 	bmi.w	800b840 <_vfiprintf_r+0x4c>
 800ba1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba1e:	e711      	b.n	800b844 <_vfiprintf_r+0x50>
 800ba20:	ab03      	add	r3, sp, #12
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	462a      	mov	r2, r5
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <_vfiprintf_r+0x258>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7fd ff3a 	bl	80098a4 <_printf_i>
 800ba30:	e7e4      	b.n	800b9fc <_vfiprintf_r+0x208>
 800ba32:	bf00      	nop
 800ba34:	08017ca8 	.word	0x08017ca8
 800ba38:	08017cc8 	.word	0x08017cc8
 800ba3c:	08017c88 	.word	0x08017c88
 800ba40:	08017e8a 	.word	0x08017e8a
 800ba44:	08017e94 	.word	0x08017e94
 800ba48:	0800935d 	.word	0x0800935d
 800ba4c:	0800b7cf 	.word	0x0800b7cf
 800ba50:	08017e90 	.word	0x08017e90

0800ba54 <_read_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4d07      	ldr	r5, [pc, #28]	; (800ba74 <_read_r+0x20>)
 800ba58:	4604      	mov	r4, r0
 800ba5a:	4608      	mov	r0, r1
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	602a      	str	r2, [r5, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	f000 f9b0 	bl	800bdc8 <_read>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_read_r+0x1e>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_read_r+0x1e>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	2000133c 	.word	0x2000133c

0800ba78 <__ascii_wctomb>:
 800ba78:	b149      	cbz	r1, 800ba8e <__ascii_wctomb+0x16>
 800ba7a:	2aff      	cmp	r2, #255	; 0xff
 800ba7c:	bf85      	ittet	hi
 800ba7e:	238a      	movhi	r3, #138	; 0x8a
 800ba80:	6003      	strhi	r3, [r0, #0]
 800ba82:	700a      	strbls	r2, [r1, #0]
 800ba84:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba88:	bf98      	it	ls
 800ba8a:	2001      	movls	r0, #1
 800ba8c:	4770      	bx	lr
 800ba8e:	4608      	mov	r0, r1
 800ba90:	4770      	bx	lr

0800ba92 <abort>:
 800ba92:	b508      	push	{r3, lr}
 800ba94:	2006      	movs	r0, #6
 800ba96:	f000 f82b 	bl	800baf0 <raise>
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	f000 f99c 	bl	800bdd8 <_exit>

0800baa0 <_raise_r>:
 800baa0:	291f      	cmp	r1, #31
 800baa2:	b538      	push	{r3, r4, r5, lr}
 800baa4:	4604      	mov	r4, r0
 800baa6:	460d      	mov	r5, r1
 800baa8:	d904      	bls.n	800bab4 <_raise_r+0x14>
 800baaa:	2316      	movs	r3, #22
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bab6:	b112      	cbz	r2, 800babe <_raise_r+0x1e>
 800bab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800babc:	b94b      	cbnz	r3, 800bad2 <_raise_r+0x32>
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 f830 	bl	800bb24 <_getpid_r>
 800bac4:	462a      	mov	r2, r5
 800bac6:	4601      	mov	r1, r0
 800bac8:	4620      	mov	r0, r4
 800baca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bace:	f000 b817 	b.w	800bb00 <_kill_r>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d00a      	beq.n	800baec <_raise_r+0x4c>
 800bad6:	1c59      	adds	r1, r3, #1
 800bad8:	d103      	bne.n	800bae2 <_raise_r+0x42>
 800bada:	2316      	movs	r3, #22
 800badc:	6003      	str	r3, [r0, #0]
 800bade:	2001      	movs	r0, #1
 800bae0:	e7e7      	b.n	800bab2 <_raise_r+0x12>
 800bae2:	2400      	movs	r4, #0
 800bae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bae8:	4628      	mov	r0, r5
 800baea:	4798      	blx	r3
 800baec:	2000      	movs	r0, #0
 800baee:	e7e0      	b.n	800bab2 <_raise_r+0x12>

0800baf0 <raise>:
 800baf0:	4b02      	ldr	r3, [pc, #8]	; (800bafc <raise+0xc>)
 800baf2:	4601      	mov	r1, r0
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	f7ff bfd3 	b.w	800baa0 <_raise_r>
 800bafa:	bf00      	nop
 800bafc:	200007dc 	.word	0x200007dc

0800bb00 <_kill_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	; (800bb20 <_kill_r+0x20>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	f000 f94b 	bl	800bda8 <_kill>
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d102      	bne.n	800bb1c <_kill_r+0x1c>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	b103      	cbz	r3, 800bb1c <_kill_r+0x1c>
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	2000133c 	.word	0x2000133c

0800bb24 <_getpid_r>:
 800bb24:	f000 b930 	b.w	800bd88 <_getpid>

0800bb28 <expf>:
 800bb28:	b508      	push	{r3, lr}
 800bb2a:	ed2d 8b02 	vpush	{d8}
 800bb2e:	eef0 8a40 	vmov.f32	s17, s0
 800bb32:	f000 f837 	bl	800bba4 <__ieee754_expf>
 800bb36:	4b16      	ldr	r3, [pc, #88]	; (800bb90 <expf+0x68>)
 800bb38:	f993 3000 	ldrsb.w	r3, [r3]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb42:	d011      	beq.n	800bb68 <expf+0x40>
 800bb44:	eeb0 0a68 	vmov.f32	s0, s17
 800bb48:	f000 f900 	bl	800bd4c <finitef>
 800bb4c:	b160      	cbz	r0, 800bb68 <expf+0x40>
 800bb4e:	eddf 7a11 	vldr	s15, [pc, #68]	; 800bb94 <expf+0x6c>
 800bb52:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	dd0a      	ble.n	800bb72 <expf+0x4a>
 800bb5c:	f7fd fa6c 	bl	8009038 <__errno>
 800bb60:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800bb98 <expf+0x70>
 800bb64:	2322      	movs	r3, #34	; 0x22
 800bb66:	6003      	str	r3, [r0, #0]
 800bb68:	eeb0 0a48 	vmov.f32	s0, s16
 800bb6c:	ecbd 8b02 	vpop	{d8}
 800bb70:	bd08      	pop	{r3, pc}
 800bb72:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800bb9c <expf+0x74>
 800bb76:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	d5f3      	bpl.n	800bb68 <expf+0x40>
 800bb80:	f7fd fa5a 	bl	8009038 <__errno>
 800bb84:	2322      	movs	r3, #34	; 0x22
 800bb86:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800bba0 <expf+0x78>
 800bb8a:	6003      	str	r3, [r0, #0]
 800bb8c:	e7ec      	b.n	800bb68 <expf+0x40>
 800bb8e:	bf00      	nop
 800bb90:	200009ac 	.word	0x200009ac
 800bb94:	42b17180 	.word	0x42b17180
 800bb98:	7f800000 	.word	0x7f800000
 800bb9c:	c2cff1b5 	.word	0xc2cff1b5
 800bba0:	00000000 	.word	0x00000000

0800bba4 <__ieee754_expf>:
 800bba4:	ee10 2a10 	vmov	r2, s0
 800bba8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bbac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bbb0:	d902      	bls.n	800bbb8 <__ieee754_expf+0x14>
 800bbb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbb6:	4770      	bx	lr
 800bbb8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800bbbc:	d106      	bne.n	800bbcc <__ieee754_expf+0x28>
 800bbbe:	eddf 7a51 	vldr	s15, [pc, #324]	; 800bd04 <__ieee754_expf+0x160>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bf18      	it	ne
 800bbc6:	eeb0 0a67 	vmovne.f32	s0, s15
 800bbca:	4770      	bx	lr
 800bbcc:	484e      	ldr	r0, [pc, #312]	; (800bd08 <__ieee754_expf+0x164>)
 800bbce:	4282      	cmp	r2, r0
 800bbd0:	dd04      	ble.n	800bbdc <__ieee754_expf+0x38>
 800bbd2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800bd0c <__ieee754_expf+0x168>
 800bbd6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bbda:	4770      	bx	lr
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	da03      	bge.n	800bbe8 <__ieee754_expf+0x44>
 800bbe0:	4a4b      	ldr	r2, [pc, #300]	; (800bd10 <__ieee754_expf+0x16c>)
 800bbe2:	4291      	cmp	r1, r2
 800bbe4:	f200 808a 	bhi.w	800bcfc <__ieee754_expf+0x158>
 800bbe8:	4a4a      	ldr	r2, [pc, #296]	; (800bd14 <__ieee754_expf+0x170>)
 800bbea:	4291      	cmp	r1, r2
 800bbec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bbf0:	d954      	bls.n	800bc9c <__ieee754_expf+0xf8>
 800bbf2:	4a49      	ldr	r2, [pc, #292]	; (800bd18 <__ieee754_expf+0x174>)
 800bbf4:	4291      	cmp	r1, r2
 800bbf6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800bbfa:	d836      	bhi.n	800bc6a <__ieee754_expf+0xc6>
 800bbfc:	4947      	ldr	r1, [pc, #284]	; (800bd1c <__ieee754_expf+0x178>)
 800bbfe:	4411      	add	r1, r2
 800bc00:	ed91 7a00 	vldr	s14, [r1]
 800bc04:	4946      	ldr	r1, [pc, #280]	; (800bd20 <__ieee754_expf+0x17c>)
 800bc06:	440a      	add	r2, r1
 800bc08:	edd2 7a00 	vldr	s15, [r2]
 800bc0c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bc10:	f1c3 0201 	rsb	r2, r3, #1
 800bc14:	1ad2      	subs	r2, r2, r3
 800bc16:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bc1a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800bc1e:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bd24 <__ieee754_expf+0x180>
 800bc22:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800bd28 <__ieee754_expf+0x184>
 800bc26:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800bc2a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800bd2c <__ieee754_expf+0x188>
 800bc2e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800bc32:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800bd30 <__ieee754_expf+0x18c>
 800bc36:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800bc3a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bd34 <__ieee754_expf+0x190>
 800bc3e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800bc42:	eeb0 5a40 	vmov.f32	s10, s0
 800bc46:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800bc4a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc4e:	eef0 6a45 	vmov.f32	s13, s10
 800bc52:	ee20 5a05 	vmul.f32	s10, s0, s10
 800bc56:	bb92      	cbnz	r2, 800bcbe <__ieee754_expf+0x11a>
 800bc58:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800bc5c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bc60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bc64:	ee36 0a40 	vsub.f32	s0, s12, s0
 800bc68:	4770      	bx	lr
 800bc6a:	4b33      	ldr	r3, [pc, #204]	; (800bd38 <__ieee754_expf+0x194>)
 800bc6c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800bd3c <__ieee754_expf+0x198>
 800bc70:	4413      	add	r3, r2
 800bc72:	edd3 7a00 	vldr	s15, [r3]
 800bc76:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bc7a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800bd40 <__ieee754_expf+0x19c>
 800bc7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc82:	ee17 2a90 	vmov	r2, s15
 800bc86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc8a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bc8e:	eeb0 7a40 	vmov.f32	s14, s0
 800bc92:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bd44 <__ieee754_expf+0x1a0>
 800bc96:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bc9a:	e7bc      	b.n	800bc16 <__ieee754_expf+0x72>
 800bc9c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800bca0:	d20b      	bcs.n	800bcba <__ieee754_expf+0x116>
 800bca2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800bd0c <__ieee754_expf+0x168>
 800bca6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bcaa:	eef4 6ac6 	vcmpe.f32	s13, s12
 800bcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb2:	dd02      	ble.n	800bcba <__ieee754_expf+0x116>
 800bcb4:	ee30 0a06 	vadd.f32	s0, s0, s12
 800bcb8:	4770      	bx	lr
 800bcba:	2200      	movs	r2, #0
 800bcbc:	e7ad      	b.n	800bc1a <__ieee754_expf+0x76>
 800bcbe:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800bcc2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800bcc6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800bcca:	bfb8      	it	lt
 800bccc:	3264      	addlt	r2, #100	; 0x64
 800bcce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bcd2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800bcd6:	ee76 7a40 	vsub.f32	s15, s12, s0
 800bcda:	ee17 3a90 	vmov	r3, s15
 800bcde:	bfab      	itete	ge
 800bce0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bce4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bce8:	ee00 3a10 	vmovge	s0, r3
 800bcec:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800bd48 <__ieee754_expf+0x1a4>
 800bcf0:	bfbc      	itt	lt
 800bcf2:	ee00 3a10 	vmovlt	s0, r3
 800bcf6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bcfa:	4770      	bx	lr
 800bcfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd04 <__ieee754_expf+0x160>
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	00000000 	.word	0x00000000
 800bd08:	42b17217 	.word	0x42b17217
 800bd0c:	7149f2ca 	.word	0x7149f2ca
 800bd10:	42cff1b5 	.word	0x42cff1b5
 800bd14:	3eb17218 	.word	0x3eb17218
 800bd18:	3f851591 	.word	0x3f851591
 800bd1c:	08017fa4 	.word	0x08017fa4
 800bd20:	08017fac 	.word	0x08017fac
 800bd24:	3331bb4c 	.word	0x3331bb4c
 800bd28:	b5ddea0e 	.word	0xb5ddea0e
 800bd2c:	388ab355 	.word	0x388ab355
 800bd30:	bb360b61 	.word	0xbb360b61
 800bd34:	3e2aaaab 	.word	0x3e2aaaab
 800bd38:	08017f9c 	.word	0x08017f9c
 800bd3c:	3fb8aa3b 	.word	0x3fb8aa3b
 800bd40:	3f317180 	.word	0x3f317180
 800bd44:	3717f7d1 	.word	0x3717f7d1
 800bd48:	0d800000 	.word	0x0d800000

0800bd4c <finitef>:
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bd52:	9801      	ldr	r0, [sp, #4]
 800bd54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bd58:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bd5c:	bfac      	ite	ge
 800bd5e:	2000      	movge	r0, #0
 800bd60:	2001      	movlt	r0, #1
 800bd62:	b002      	add	sp, #8
 800bd64:	4770      	bx	lr
	...

0800bd68 <_close>:
 800bd68:	4b02      	ldr	r3, [pc, #8]	; (800bd74 <_close+0xc>)
 800bd6a:	2258      	movs	r2, #88	; 0x58
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd72:	4770      	bx	lr
 800bd74:	2000133c 	.word	0x2000133c

0800bd78 <_fstat>:
 800bd78:	4b02      	ldr	r3, [pc, #8]	; (800bd84 <_fstat+0xc>)
 800bd7a:	2258      	movs	r2, #88	; 0x58
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	4770      	bx	lr
 800bd84:	2000133c 	.word	0x2000133c

0800bd88 <_getpid>:
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <_getpid+0xc>)
 800bd8a:	2258      	movs	r2, #88	; 0x58
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd92:	4770      	bx	lr
 800bd94:	2000133c 	.word	0x2000133c

0800bd98 <_isatty>:
 800bd98:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <_isatty+0xc>)
 800bd9a:	2258      	movs	r2, #88	; 0x58
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	2000      	movs	r0, #0
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	2000133c 	.word	0x2000133c

0800bda8 <_kill>:
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <_kill+0xc>)
 800bdaa:	2258      	movs	r2, #88	; 0x58
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb2:	4770      	bx	lr
 800bdb4:	2000133c 	.word	0x2000133c

0800bdb8 <_lseek>:
 800bdb8:	4b02      	ldr	r3, [pc, #8]	; (800bdc4 <_lseek+0xc>)
 800bdba:	2258      	movs	r2, #88	; 0x58
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc2:	4770      	bx	lr
 800bdc4:	2000133c 	.word	0x2000133c

0800bdc8 <_read>:
 800bdc8:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <_read+0xc>)
 800bdca:	2258      	movs	r2, #88	; 0x58
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd2:	4770      	bx	lr
 800bdd4:	2000133c 	.word	0x2000133c

0800bdd8 <_exit>:
 800bdd8:	e7fe      	b.n	800bdd8 <_exit>
	...

0800bddc <_init>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr

0800bde8 <_fini>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	bf00      	nop
 800bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdee:	bc08      	pop	{r3}
 800bdf0:	469e      	mov	lr, r3
 800bdf2:	4770      	bx	lr
