
StmAiExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c234  0800bea0  0800bea0  0001bea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080180d4  080180d4  000309bc  2**0
                  CONTENTS
  4 .ARM          00000008  080180d4  080180d4  000280d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080180dc  080180dc  000309bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080180dc  080180dc  000280dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080180e0  080180e0  000280e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  080180e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  200009bc  08018aa0  000309bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000134c  08018aa0  0003134c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224cb  00000000  00000000  000309ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003014  00000000  00000000  00052eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00055ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  000576f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029139  00000000  00000000  00058df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ecf  00000000  00000000  00081f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcff6  00000000  00000000  00098e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  00195df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007858  00000000  00000000  00195ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  0019d71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  0019d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009bc 	.word	0x200009bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be6c 	.word	0x0800be6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c0 	.word	0x200009c0
 80001cc:	0800be6c 	.word	0x0800be6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f001 ff6c 	bl	8002d82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f897 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f939 	bl	8001124 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000eb2:	f000 f907 	bl	80010c4 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000eb6:	f000 f8e3 	bl	8001080 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 8000eba:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <main+0x114>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000ec0:	f000 fb4a 	bl	8001558 <MEMS_Init>
  AI_Init(ai_network_data_weights_get(), activations);
 8000ec4:	f005 fbfc 	bl	80066c0 <ai_network_data_weights_get>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	493b      	ldr	r1, [pc, #236]	; (8000fb8 <main+0x118>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fbb9 	bl	8001644 <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  while (1)
  {
    if (dataRdyIntReceived != 0) {
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <main+0x114>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0fb      	beq.n	8000ed6 <main+0x36>
      dataRdyIntReceived = 0;
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <main+0x114>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
      LSM6DSL_Axes_t acc_axes;
      LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4834      	ldr	r0, [pc, #208]	; (8000fbc <main+0x11c>)
 8000eea:	f001 f959 	bl	80021a0 <LSM6DSL_ACC_GetAxes>
      // printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);

      /* Normalize data to [-1; 1] and accumulate into input buffer */
      /* Note: window overlapping can be managed here */
      aiInData[write_index + 0] = (float) acc_axes.x / 4000.0f;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000fc0 <main+0x120>
 8000efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f00:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <main+0x124>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	edc3 7a00 	vstr	s15, [r3]
      aiInData[write_index + 1] = (float) acc_axes.y / 4000.0f;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000fc0 <main+0x120>
 8000f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f22:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <main+0x124>)
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	edc3 7a00 	vstr	s15, [r3]
      aiInData[write_index + 2] = (float) acc_axes.z / 4000.0f;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000fc0 <main+0x120>
 8000f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <main+0x124>)
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	edc3 7a00 	vstr	s15, [r3]
      write_index += 3;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3303      	adds	r3, #3
 8000f50:	617b      	str	r3, [r7, #20]

      if (write_index == AI_NETWORK_IN_1_SIZE) {
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b4e      	cmp	r3, #78	; 0x4e
 8000f56:	d1be      	bne.n	8000ed6 <main+0x36>
        write_index = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

        printf("Running inference\r\n");
 8000f5c:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <main+0x128>)
 8000f5e:	f008 fe7f 	bl	8009c60 <puts>
        AI_Run(aiInData, aiOutData);
 8000f62:	491a      	ldr	r1, [pc, #104]	; (8000fcc <main+0x12c>)
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <main+0x124>)
 8000f66:	f000 fbd5 	bl	8001714 <AI_Run>

        /* Output results */
        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	e00f      	b.n	8000f90 <main+0xf0>
          printf("%8.6f ", aiOutData[i]);
 8000f70:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <main+0x12c>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fae4 	bl	8000548 <__aeabi_f2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <main+0x130>)
 8000f86:	f008 fde5 	bl	8009b54 <iprintf>
        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d9ec      	bls.n	8000f70 <main+0xd0>
        }
        uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8000f96:	2103      	movs	r1, #3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <main+0x12c>)
 8000f9a:	f000 fc09 	bl	80017b0 <argmax>
 8000f9e:	60f8      	str	r0, [r7, #12]
        printf(": %d - %s\r\n", (int) class, activities[class]);
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <main+0x134>)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	461a      	mov	r2, r3
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <main+0x138>)
 8000fae:	f008 fdd1 	bl	8009b54 <iprintf>
    if (dataRdyIntReceived != 0) {
 8000fb2:	e790      	b.n	8000ed6 <main+0x36>
 8000fb4:	20000ab8 	.word	0x20000ab8
 8000fb8:	20000abc 	.word	0x20000abc
 8000fbc:	200010fc 	.word	0x200010fc
 8000fc0:	457a0000 	.word	0x457a0000
 8000fc4:	200011b0 	.word	0x200011b0
 8000fc8:	0800bebc 	.word	0x0800bebc
 8000fcc:	20000aac 	.word	0x20000aac
 8000fd0:	0800bed0 	.word	0x0800bed0
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	0800bed8 	.word	0x0800bed8

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f008 f896 	bl	800911c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001002:	f003 fa17 	bl	8004434 <HAL_PWREx_ControlVoltageScaling>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100c:	f000 fc00 	bl	8001810 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001010:	2310      	movs	r3, #16
 8001012:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001024:	2301      	movs	r3, #1
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800102c:	2328      	movs	r3, #40	; 0x28
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001030:	2307      	movs	r3, #7
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fa4d 	bl	80044e0 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800104c:	f000 fbe0 	bl	8001810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2303      	movs	r3, #3
 8001056:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	2104      	movs	r1, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fe1f 	bl	8004cac <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001074:	f000 fbcc 	bl	8001810 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3758      	adds	r7, #88	; 0x58
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <MX_CRC_Init+0x3c>)
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <MX_CRC_Init+0x40>)
 8001088:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_CRC_Init+0x3c>)
 800108c:	2200      	movs	r2, #0
 800108e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_CRC_Init+0x3c>)
 8001092:	2200      	movs	r2, #0
 8001094:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_CRC_Init+0x3c>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_CRC_Init+0x3c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_CRC_Init+0x3c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_CRC_Init+0x3c>)
 80010aa:	f002 f815 	bl	80030d8 <HAL_CRC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80010b4:	f000 fbac 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000a88 	.word	0x20000a88
 80010c0:	40023000 	.word	0x40023000

080010c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <MX_USART1_UART_Init+0x5c>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART1_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART1_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART1_UART_Init+0x58>)
 8001108:	f004 fc92 	bl	8005a30 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001112:	f000 fb7d 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000112c 	.word	0x2000112c
 8001120:	40013800 	.word	0x40013800

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	4bba      	ldr	r3, [pc, #744]	; (8001424 <MX_GPIO_Init+0x300>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4ab9      	ldr	r2, [pc, #740]	; (8001424 <MX_GPIO_Init+0x300>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4bb7      	ldr	r3, [pc, #732]	; (8001424 <MX_GPIO_Init+0x300>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4bb4      	ldr	r3, [pc, #720]	; (8001424 <MX_GPIO_Init+0x300>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4ab3      	ldr	r2, [pc, #716]	; (8001424 <MX_GPIO_Init+0x300>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4bb1      	ldr	r3, [pc, #708]	; (8001424 <MX_GPIO_Init+0x300>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4bae      	ldr	r3, [pc, #696]	; (8001424 <MX_GPIO_Init+0x300>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4aad      	ldr	r2, [pc, #692]	; (8001424 <MX_GPIO_Init+0x300>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4bab      	ldr	r3, [pc, #684]	; (8001424 <MX_GPIO_Init+0x300>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4ba8      	ldr	r3, [pc, #672]	; (8001424 <MX_GPIO_Init+0x300>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4aa7      	ldr	r2, [pc, #668]	; (8001424 <MX_GPIO_Init+0x300>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4ba5      	ldr	r3, [pc, #660]	; (8001424 <MX_GPIO_Init+0x300>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4ba2      	ldr	r3, [pc, #648]	; (8001424 <MX_GPIO_Init+0x300>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4aa1      	ldr	r2, [pc, #644]	; (8001424 <MX_GPIO_Init+0x300>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b9f      	ldr	r3, [pc, #636]	; (8001424 <MX_GPIO_Init+0x300>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80011b8:	489b      	ldr	r0, [pc, #620]	; (8001428 <MX_GPIO_Init+0x304>)
 80011ba:	f002 fb15 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f248 1104 	movw	r1, #33028	; 0x8104
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f002 fb0e 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011cc:	2200      	movs	r2, #0
 80011ce:	f24f 0114 	movw	r1, #61460	; 0xf014
 80011d2:	4896      	ldr	r0, [pc, #600]	; (800142c <MX_GPIO_Init+0x308>)
 80011d4:	f002 fb08 	bl	80037e8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f241 0181 	movw	r1, #4225	; 0x1081
 80011de:	4894      	ldr	r0, [pc, #592]	; (8001430 <MX_GPIO_Init+0x30c>)
 80011e0:	f002 fb02 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	4891      	ldr	r0, [pc, #580]	; (8001430 <MX_GPIO_Init+0x30c>)
 80011ec:	f002 fafc 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80011f6:	488f      	ldr	r0, [pc, #572]	; (8001434 <MX_GPIO_Init+0x310>)
 80011f8:	f002 faf6 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2120      	movs	r1, #32
 8001200:	488a      	ldr	r0, [pc, #552]	; (800142c <MX_GPIO_Init+0x308>)
 8001202:	f002 faf1 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2101      	movs	r1, #1
 800120a:	4887      	ldr	r0, [pc, #540]	; (8001428 <MX_GPIO_Init+0x304>)
 800120c:	f002 faec 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001210:	f240 1315 	movw	r3, #277	; 0x115
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	487f      	ldr	r0, [pc, #508]	; (8001428 <MX_GPIO_Init+0x304>)
 800122a:	f002 f83f 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800122e:	236a      	movs	r3, #106	; 0x6a
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	4b81      	ldr	r3, [pc, #516]	; (8001438 <MX_GPIO_Init+0x314>)
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4879      	ldr	r0, [pc, #484]	; (8001428 <MX_GPIO_Init+0x304>)
 8001242:	f002 f833 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124c:	4b7b      	ldr	r3, [pc, #492]	; (800143c <MX_GPIO_Init+0x318>)
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4876      	ldr	r0, [pc, #472]	; (8001434 <MX_GPIO_Init+0x310>)
 800125c:	f002 f826 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001260:	233f      	movs	r3, #63	; 0x3f
 8001262:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001264:	230b      	movs	r3, #11
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4870      	ldr	r0, [pc, #448]	; (8001434 <MX_GPIO_Init+0x310>)
 8001274:	f002 f81a 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001278:	2303      	movs	r3, #3
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001288:	2308      	movs	r3, #8
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f002 f809 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800129a:	f248 1304 	movw	r3, #33028	; 0x8104
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f001 fff9 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80012ba:	2308      	movs	r3, #8
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ca:	2301      	movs	r3, #1
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f001 ffe8 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80012dc:	2310      	movs	r3, #16
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012e0:	230b      	movs	r3, #11
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f001 ffdb 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80012f6:	23e0      	movs	r3, #224	; 0xe0
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001306:	2305      	movs	r3, #5
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f001 ffca 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <MX_GPIO_Init+0x314>)
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4840      	ldr	r0, [pc, #256]	; (800142c <MX_GPIO_Init+0x308>)
 800132c:	f001 ffbe 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001334:	230b      	movs	r3, #11
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	483a      	ldr	r0, [pc, #232]	; (800142c <MX_GPIO_Init+0x308>)
 8001344:	f001 ffb2 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001348:	f24f 0334 	movw	r3, #61492	; 0xf034
 800134c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4832      	ldr	r0, [pc, #200]	; (800142c <MX_GPIO_Init+0x308>)
 8001362:	f001 ffa3 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001366:	f44f 7320 	mov.w	r3, #640	; 0x280
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001378:	2306      	movs	r3, #6
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <MX_GPIO_Init+0x304>)
 8001384:	f001 ff92 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001388:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800138c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800139a:	230a      	movs	r3, #10
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_GPIO_Init+0x304>)
 80013a6:	f001 ff81 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80013aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013bc:	2307      	movs	r3, #7
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	481a      	ldr	r0, [pc, #104]	; (8001430 <MX_GPIO_Init+0x30c>)
 80013c8:	f001 ff70 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80013cc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80013d0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_GPIO_Init+0x314>)
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <MX_GPIO_Init+0x30c>)
 80013e2:	f001 ff63 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80013e6:	f243 0381 	movw	r3, #12417	; 0x3081
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_GPIO_Init+0x30c>)
 8001400:	f001 ff54 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001404:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_GPIO_Init+0x310>)
 800141e:	f001 ff45 	bl	80032ac <HAL_GPIO_Init>
 8001422:	e00d      	b.n	8001440 <MX_GPIO_Init+0x31c>
 8001424:	40021000 	.word	0x40021000
 8001428:	48001000 	.word	0x48001000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000c00 	.word	0x48000c00
 8001434:	48000800 	.word	0x48000800
 8001438:	10110000 	.word	0x10110000
 800143c:	10210000 	.word	0x10210000

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001440:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	4b40      	ldr	r3, [pc, #256]	; (8001548 <MX_GPIO_Init+0x424>)
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	483d      	ldr	r0, [pc, #244]	; (800154c <MX_GPIO_Init+0x428>)
 8001456:	f001 ff29 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800145a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f001 ff1b 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001476:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001488:	230a      	movs	r3, #10
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f001 ff09 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800149a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ac:	2306      	movs	r3, #6
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4825      	ldr	r0, [pc, #148]	; (800154c <MX_GPIO_Init+0x428>)
 80014b8:	f001 fef8 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80014bc:	2302      	movs	r3, #2
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014cc:	2305      	movs	r3, #5
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	481e      	ldr	r0, [pc, #120]	; (8001550 <MX_GPIO_Init+0x42c>)
 80014d8:	f001 fee8 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80014dc:	2378      	movs	r3, #120	; 0x78
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4816      	ldr	r0, [pc, #88]	; (8001550 <MX_GPIO_Init+0x42c>)
 80014f8:	f001 fed8 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	2312      	movs	r3, #18
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150e:	2304      	movs	r3, #4
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	480e      	ldr	r0, [pc, #56]	; (8001554 <MX_GPIO_Init+0x430>)
 800151a:	f001 fec7 	bl	80032ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2017      	movs	r0, #23
 8001524:	f001 fda1 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001528:	2017      	movs	r0, #23
 800152a:	f001 fdba 	bl	80030a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2028      	movs	r0, #40	; 0x28
 8001534:	f001 fd99 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001538:	2028      	movs	r0, #40	; 0x28
 800153a:	f001 fdb2 	bl	80030a2 <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	10110000 	.word	0x10110000
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48000400 	.word	0x48000400

08001558 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 8001562:	23d5      	movs	r3, #213	; 0xd5
 8001564:	763b      	strb	r3, [r7, #24]
  io_ctx.Init        = BSP_I2C2_Init;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MEMS_Init+0x7c>)
 8001568:	60fb      	str	r3, [r7, #12]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MEMS_Init+0x80>)
 800156c:	613b      	str	r3, [r7, #16]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MEMS_Init+0x84>)
 8001570:	623b      	str	r3, [r7, #32]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MEMS_Init+0x88>)
 8001574:	61fb      	str	r3, [r7, #28]
  io_ctx.GetTick     = BSP_GetTick;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MEMS_Init+0x8c>)
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4819      	ldr	r0, [pc, #100]	; (80015e8 <MEMS_Init+0x90>)
 8001582:	f000 fc55 	bl	8001e30 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8001586:	f107 030b 	add.w	r3, r7, #11
 800158a:	4619      	mov	r1, r3
 800158c:	4816      	ldr	r0, [pc, #88]	; (80015e8 <MEMS_Init+0x90>)
 800158e:	f000 fd1e 	bl	8001fce <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	2b6a      	cmp	r3, #106	; 0x6a
 8001596:	d001      	beq.n	800159c <MEMS_Init+0x44>
    Error_Handler();
 8001598:	f000 f93a 	bl	8001810 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 800159c:	4812      	ldr	r0, [pc, #72]	; (80015e8 <MEMS_Init+0x90>)
 800159e:	f000 fcad 	bl	8001efc <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 80015a2:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 80015a6:	4810      	ldr	r0, [pc, #64]	; (80015e8 <MEMS_Init+0x90>)
 80015a8:	f000 fd92 	bl	80020d0 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 80015ac:	2104      	movs	r1, #4
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <MEMS_Init+0x90>)
 80015b0:	f000 fdaa 	bl	8002108 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 80015b4:	2101      	movs	r1, #1
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MEMS_Init+0x90>)
 80015b8:	f000 fe64 	bl	8002284 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <MEMS_Init+0x90>)
 80015c2:	f000 fdc9 	bl	8002158 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <MEMS_Init+0x90>)
 80015c8:	f000 fd17 	bl	8001ffa <LSM6DSL_ACC_Enable>
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	08001b41 	.word	0x08001b41
 80015d8:	08001bbd 	.word	0x08001bbd
 80015dc:	08001c71 	.word	0x08001c71
 80015e0:	08001c0d 	.word	0x08001c0d
 80015e4:	08001cd5 	.word	0x08001cd5
 80015e8:	200010fc 	.word	0x200010fc

080015ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fc:	d104      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 8001606:	6013      	str	r3, [r2, #0]
  }
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000ab8 	.word	0x20000ab8

08001618 <_write>:

int _write(int fd, char * ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	b29a      	uxth	r2, r3
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <_write+0x28>)
 8001630:	f004 fa4c 	bl	8005acc <HAL_UART_Transmit>
  return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000112c 	.word	0x2000112c

08001644 <AI_Init>:

static void AI_Init(ai_handle w_addr, ai_handle act_addr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b090      	sub	sp, #64	; 0x40
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800164e:	2100      	movs	r1, #0
 8001650:	482b      	ldr	r0, [pc, #172]	; (8001700 <AI_Init+0xbc>)
 8001652:	f004 ffd3 	bl	80065fc <ai_network_create>
 8001656:	4603      	mov	r3, r0
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 800165a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001662:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001666:	4619      	mov	r1, r3
 8001668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800166e:	461a      	mov	r2, r3
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <AI_Init+0xc0>)
 8001672:	f008 fa6f 	bl	8009b54 <iprintf>
    Error_Handler();
 8001676:	f000 f8cb 	bl	8001810 <Error_Handler>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <AI_Init+0xc4>)
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	2301      	movs	r3, #1
 8001680:	823b      	strh	r3, [r7, #16]
 8001682:	2301      	movs	r3, #1
 8001684:	827b      	strh	r3, [r7, #18]
 8001686:	2301      	movs	r3, #1
 8001688:	82bb      	strh	r3, [r7, #20]
 800168a:	f64b 43ac 	movw	r3, #48300	; 0xbcac
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <AI_Init+0xc8>)
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	2301      	movs	r3, #1
 800169e:	853b      	strh	r3, [r7, #40]	; 0x28
 80016a0:	2301      	movs	r3, #1
 80016a2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80016a4:	2301      	movs	r3, #1
 80016a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80016a8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
    AI_NETWORK_DATA_WEIGHTS(w_addr),
    AI_NETWORK_DATA_ACTIVATIONS(act_addr)
  );

  if (!ai_network_init(network, &params)) {
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <AI_Init+0xbc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f107 020c 	add.w	r2, r7, #12
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 ffb1 	bl	8006628 <ai_network_init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d012      	beq.n	80016f8 <AI_Init+0xb4>
    err = ai_network_get_error(network);
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <AI_Init+0xbc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 ff84 	bl	80065e4 <ai_network_get_error>
 80016dc:	4603      	mov	r3, r0
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
    printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 80016e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80016e4:	4619      	mov	r1, r3
 80016e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80016ec:	461a      	mov	r2, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <AI_Init+0xcc>)
 80016f0:	f008 fa30 	bl	8009b54 <iprintf>
    Error_Handler();
 80016f4:	f000 f88c 	bl	8001810 <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3740      	adds	r7, #64	; 0x40
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200012e8 	.word	0x200012e8
 8001704:	0800bee4 	.word	0x0800bee4
 8001708:	40040440 	.word	0x40040440
 800170c:	00040440 	.word	0x00040440
 8001710:	0800bf10 	.word	0x0800bf10

08001714 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* 1 - Create the AI buffer IO handlers with the default definition */
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <AI_Run+0x8c>)
 8001720:	f107 0420 	add.w	r4, r7, #32
 8001724:	461d      	mov	r5, r3
 8001726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172e:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <AI_Run+0x90>)
 8001734:	f107 0408 	add.w	r4, r7, #8
 8001738:	461d      	mov	r5, r3
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001742:	e884 0003 	stmia.w	r4, {r0, r1}

  /* 2 - Update IO handlers with the data payload */
  ai_input[0].n_batches = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	84bb      	strh	r3, [r7, #36]	; 0x24
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  ai_output[0].n_batches = 1;
 800174e:	2301      	movs	r3, #1
 8001750:	81bb      	strh	r3, [r7, #12]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	61bb      	str	r3, [r7, #24]

  batch = ai_network_run(network, ai_input, ai_output);
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <AI_Run+0x94>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f107 0208 	add.w	r2, r7, #8
 800175e:	f107 0120 	add.w	r1, r7, #32
 8001762:	4618      	mov	r0, r3
 8001764:	f004 ff9c 	bl	80066a0 <ai_network_run>
 8001768:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (batch != 1) {
 800176a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800176c:	2b01      	cmp	r3, #1
 800176e:	d012      	beq.n	8001796 <AI_Run+0x82>
    err = ai_network_get_error(network);
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <AI_Run+0x94>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f004 ff35 	bl	80065e4 <ai_network_get_error>
 800177a:	4603      	mov	r3, r0
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 800177e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001782:	4619      	mov	r1, r3
 8001784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001786:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800178a:	461a      	mov	r2, r3
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <AI_Run+0x98>)
 800178e:	f008 f9e1 	bl	8009b54 <iprintf>
    Error_Handler();
 8001792:	f000 f83d 	bl	8001810 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3740      	adds	r7, #64	; 0x40
 800179a:	46bd      	mov	sp, r7
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	bf00      	nop
 80017a0:	0800bf68 	.word	0x0800bf68
 80017a4:	0800bf80 	.word	0x0800bf80
 80017a8:	200012e8 	.word	0x200012e8
 80017ac:	0800bf3c 	.word	0x0800bf3c

080017b0 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80017c4:	2301      	movs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e017      	b.n	80017fa <argmax+0x4a>
    if (values[i] > max_value) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d507      	bpl.n	80017f4 <argmax+0x44>
      max_value = values[i];
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]
      max_index = i;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3e3      	bcc.n	80017ca <argmax+0x1a>
    }
  }
  return max_index;
 8001802:	693b      	ldr	r3, [r7, #16]
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <Error_Handler+0x1c>)
 800181e:	f001 fffb 	bl	8003818 <HAL_GPIO_TogglePin>
    HAL_Delay(50); /* wait 50 ms */
 8001822:	2032      	movs	r0, #50	; 0x32
 8001824:	f001 fb22 	bl	8002e6c <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001828:	e7f6      	b.n	8001818 <Error_Handler+0x8>
 800182a:	bf00      	nop
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	; 0x60
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_MspInit+0x44>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	; 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_CRC_MspInit+0x38>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_CRC_MspInit+0x3c>)
 800188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_CRC_MspInit+0x3c>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001894:	6493      	str	r3, [r2, #72]	; 0x48
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_CRC_MspInit+0x3c>)
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023000 	.word	0x40023000
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0ac      	sub	sp, #176	; 0xb0
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2288      	movs	r2, #136	; 0x88
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 fc1f 	bl	800911c <memset>
  if(huart->Instance==USART1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a21      	ldr	r2, [pc, #132]	; (8001968 <HAL_UART_MspInit+0xb0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d13a      	bne.n	800195e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ec:	2300      	movs	r3, #0
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fbdf 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001900:	f7ff ff86 	bl	8001810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_UART_MspInit+0xb4>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_UART_MspInit+0xb4>)
 800190a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190e:	6613      	str	r3, [r2, #96]	; 0x60
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_UART_MspInit+0xb4>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_UART_MspInit+0xb4>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_UART_MspInit+0xb4>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_UART_MspInit+0xb4>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194c:	2307      	movs	r3, #7
 800194e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_UART_MspInit+0xb8>)
 800195a:	f001 fca7 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	37b0      	adds	r7, #176	; 0xb0
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40013800 	.word	0x40013800
 800196c:	40021000 	.word	0x40021000
 8001970:	48000400 	.word	0x48000400

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f001 fa34 	bl	8002e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019cc:	2020      	movs	r0, #32
 80019ce:	f001 ff3d 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019d2:	2040      	movs	r0, #64	; 0x40
 80019d4:	f001 ff3a 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019d8:	2080      	movs	r0, #128	; 0x80
 80019da:	f001 ff37 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019e2:	f001 ff33 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}

080019ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019f2:	f001 ff2b 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019fa:	f001 ff27 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a02:	f001 ff23 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a0a:	f001 ff1f 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a12:	f001 ff1b 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f007 fb26 	bl	800909c <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20018000 	.word	0x20018000
 8001a7c:	00000800 	.word	0x00000800
 8001a80:	200009d8 	.word	0x200009d8
 8001a84:	20001350 	.word	0x20001350

08001a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <SystemInit+0x5c>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <SystemInit+0x5c>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <SystemInit+0x60>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <SystemInit+0x60>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <SystemInit+0x60>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <SystemInit+0x60>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <SystemInit+0x60>)
 8001ab4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ab8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001abc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <SystemInit+0x60>)
 8001ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SystemInit+0x60>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <SystemInit+0x60>)
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SystemInit+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	40021000 	.word	0x40021000

08001aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af0:	f7ff ffca 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b00:	480a      	ldr	r0, [pc, #40]	; (8001b2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
	ldr	r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <LoopForever+0x16>)
	cmp	r2, r3
 8001b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f007 fac5 	bl	80090a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1e:	f7ff f9bf 	bl	8000ea0 <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b28:	080180e4 	.word	0x080180e4
	ldr	r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b30:	200009bc 	.word	0x200009bc
	ldr	r2, =_sbss
 8001b34:	200009bc 	.word	0x200009bc
	ldr	r3, = _ebss
 8001b38:	2000134c 	.word	0x2000134c

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>
	...

08001b40 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <BSP_I2C2_Init+0x70>)
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <BSP_I2C2_Init+0x74>)
 8001b4e:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <BSP_I2C2_Init+0x78>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <BSP_I2C2_Init+0x78>)
 8001b58:	600a      	str	r2, [r1, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d122      	bne.n	8001ba4 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001b5e:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <BSP_I2C2_Init+0x70>)
 8001b60:	f002 f98c 	bl	8003e7c <HAL_I2C_GetState>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11c      	bne.n	8001ba4 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <BSP_I2C2_Init+0x70>)
 8001b6c:	f000 f8fe 	bl	8001d6c <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001b76:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <BSP_I2C2_Init+0x70>)
 8001b78:	f000 f8b4 	bl	8001ce4 <MX_I2C2_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001b82:	f06f 0307 	mvn.w	r3, #7
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	e00c      	b.n	8001ba4 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <BSP_I2C2_Init+0x70>)
 8001b8e:	f002 fbab 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001b98:	f06f 0307 	mvn.w	r3, #7
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e001      	b.n	8001ba4 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200012ec 	.word	0x200012ec
 8001bb4:	40005800 	.word	0x40005800
 8001bb8:	200009dc 	.word	0x200009dc

08001bbc <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <BSP_I2C2_DeInit+0x48>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d014      	beq.n	8001bf8 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <BSP_I2C2_DeInit+0x48>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <BSP_I2C2_DeInit+0x48>)
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <BSP_I2C2_DeInit+0x48>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <BSP_I2C2_DeInit+0x4c>)
 8001be2:	f000 f909 	bl	8001df8 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <BSP_I2C2_DeInit+0x4c>)
 8001be8:	f001 fed7 	bl	800399a <HAL_I2C_DeInit>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001bf2:	f06f 0307 	mvn.w	r3, #7
 8001bf6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200009dc 	.word	0x200009dc
 8001c08:	200012ec 	.word	0x200012ec

08001c0c <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	60ba      	str	r2, [r7, #8]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	81fb      	strh	r3, [r7, #14]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	81bb      	strh	r3, [r7, #12]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001c26:	89ba      	ldrh	r2, [r7, #12]
 8001c28:	89f9      	ldrh	r1, [r7, #14]
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <BSP_I2C2_WriteReg+0x60>)
 8001c3c:	f001 fef0 	bl	8003a20 <HAL_I2C_Mem_Write>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <BSP_I2C2_WriteReg+0x60>)
 8001c48:	f002 f926 	bl	8003e98 <HAL_I2C_GetError>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d103      	bne.n	8001c5a <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c52:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e002      	b.n	8001c60 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001c5a:	f06f 0303 	mvn.w	r3, #3
 8001c5e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001c60:	697b      	ldr	r3, [r7, #20]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200012ec 	.word	0x200012ec

08001c70 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	81bb      	strh	r3, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001c8a:	89ba      	ldrh	r2, [r7, #12]
 8001c8c:	89f9      	ldrh	r1, [r7, #14]
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <BSP_I2C2_ReadReg+0x60>)
 8001ca0:	f001 ffd2 	bl	8003c48 <HAL_I2C_Mem_Read>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <BSP_I2C2_ReadReg+0x60>)
 8001cac:	f002 f8f4 	bl	8003e98 <HAL_I2C_GetError>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d103      	bne.n	8001cbe <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001cb6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e002      	b.n	8001cc4 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001cbe:	f06f 0303 	mvn.w	r3, #3
 8001cc2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001cc4:	697b      	ldr	r3, [r7, #20]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200012ec 	.word	0x200012ec

08001cd4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001cd8:	f001 f8bc 	bl	8002e54 <HAL_GetTick>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <MX_I2C2_Init+0x80>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <MX_I2C2_Init+0x84>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f001 fda8 	bl	800387c <HAL_I2C_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f002 fad5 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f002 fb17 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40005800 	.word	0x40005800
 8001d68:	00702991 	.word	0x00702991

08001d6c <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <I2C2_MspInit+0x84>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <I2C2_MspInit+0x84>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <I2C2_MspInit+0x84>)
 8001d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d92:	2312      	movs	r3, #18
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4812      	ldr	r0, [pc, #72]	; (8001df4 <I2C2_MspInit+0x88>)
 8001daa:	f001 fa7f 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <I2C2_MspInit+0x88>)
 8001dcc:	f001 fa6e 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <I2C2_MspInit+0x84>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <I2C2_MspInit+0x84>)
 8001dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dda:	6593      	str	r3, [r2, #88]	; 0x58
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <I2C2_MspInit+0x84>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000400 	.word	0x48000400

08001df8 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <I2C2_MspDeInit+0x30>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <I2C2_MspDeInit+0x30>)
 8001e06:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e0a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e10:	4806      	ldr	r0, [pc, #24]	; (8001e2c <I2C2_MspDeInit+0x34>)
 8001e12:	f001 fbf5 	bl	8003600 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	4804      	ldr	r0, [pc, #16]	; (8001e2c <I2C2_MspDeInit+0x34>)
 8001e1c:	f001 fbf0 	bl	8003600 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	48000400 	.word	0x48000400

08001e30 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e04d      	b.n	8001ee8 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	7b1a      	ldrb	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <LSM6DSL_RegisterBusIO+0xc4>)
 8001e88:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <LSM6DSL_RegisterBusIO+0xc8>)
 8001e8e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e020      	b.n	8001ee8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4798      	blx	r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e016      	b.n	8001ee8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d112      	bne.n	8001ee8 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001ecc:	230c      	movs	r3, #12
 8001ece:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2112      	movs	r1, #18
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f9b9 	bl	800224e <LSM6DSL_Write_Reg>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	08002509 	.word	0x08002509
 8001ef8:	0800253f 	.word	0x0800253f

08001efc <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	331c      	adds	r3, #28
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fcb4 	bl	8002878 <lsm6dsl_auto_increment_set>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e054      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	331c      	adds	r3, #28
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fc26 	bl	8002774 <lsm6dsl_block_data_update_set>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e048      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	331c      	adds	r3, #28
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fefb 	bl	8002d36 <lsm6dsl_fifo_mode_set>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e03c      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	331c      	adds	r3, #28
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fb98 	bl	8002690 <lsm6dsl_xl_data_rate_set>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e02c      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	331c      	adds	r3, #28
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fb2e 	bl	80025d4 <lsm6dsl_xl_full_scale_set>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e020      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2204      	movs	r2, #4
 8001f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	331c      	adds	r3, #28
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fbc8 	bl	8002728 <lsm6dsl_gy_data_rate_set>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e010      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	331c      	adds	r3, #28
 8001fa8:	2106      	movs	r1, #6
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fb96 	bl	80026dc <lsm6dsl_gy_full_scale_set>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e004      	b.n	8001fc6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	331c      	adds	r3, #28
 8001fdc:	6839      	ldr	r1, [r7, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fc39 	bl	8002856 <lsm6dsl_device_id_get>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e000      	b.n	8001ff2 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e014      	b.n	800203a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f103 021c 	add.w	r2, r3, #28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 fb36 	bl	8002690 <lsm6dsl_xl_data_rate_set>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e004      	b.n	800203a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	331c      	adds	r3, #28
 8002056:	f107 020b 	add.w	r2, r7, #11
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fadf 	bl	8002620 <lsm6dsl_xl_full_scale_get>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	e023      	b.n	80020b6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d81b      	bhi.n	80020ac <LSM6DSL_ACC_GetSensitivity+0x68>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	080020a5 	.word	0x080020a5
 8002084:	08002095 	.word	0x08002095
 8002088:	0800209d 	.word	0x0800209d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002090:	601a      	str	r2, [r3, #0]
      break;
 8002092:	e00f      	b.n	80020b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002098:	601a      	str	r2, [r3, #0]
      break;
 800209a:	e00b      	b.n	80020b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80020a0:	601a      	str	r2, [r3, #0]
      break;
 80020a2:	e007      	b.n	80020b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <LSM6DSL_ACC_GetSensitivity+0x88>)
 80020a8:	601a      	str	r2, [r3, #0]
      break;
 80020aa:	e003      	b.n	80020b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	60fb      	str	r3, [r7, #12]
      break;
 80020b2:	bf00      	nop
  }

  return ret;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	3d79db23 	.word	0x3d79db23
 80020c4:	3df9db23 	.word	0x3df9db23
 80020c8:	3e79db23 	.word	0x3e79db23
 80020cc:	3ef9db23 	.word	0x3ef9db23

080020d0 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d106      	bne.n	80020f4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80020e6:	ed97 0a00 	vldr	s0, [r7]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8fe 	bl	80022ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80020f0:	4603      	mov	r3, r0
 80020f2:	e005      	b.n	8002100 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80020f4:	ed97 0a00 	vldr	s0, [r7]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f983 	bl	8002404 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80020fe:	4603      	mov	r3, r0
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b02      	cmp	r3, #2
 8002116:	dd0b      	ble.n	8002130 <LSM6DSL_ACC_SetFullScale+0x28>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b04      	cmp	r3, #4
 800211c:	dd06      	ble.n	800212c <LSM6DSL_ACC_SetFullScale+0x24>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b08      	cmp	r3, #8
 8002122:	dc01      	bgt.n	8002128 <LSM6DSL_ACC_SetFullScale+0x20>
 8002124:	2303      	movs	r3, #3
 8002126:	e004      	b.n	8002132 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002128:	2301      	movs	r3, #1
 800212a:	e002      	b.n	8002132 <LSM6DSL_ACC_SetFullScale+0x2a>
 800212c:	2302      	movs	r3, #2
 800212e:	e000      	b.n	8002132 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002130:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8002132:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	331c      	adds	r3, #28
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fa49 	bl	80025d4 <lsm6dsl_xl_full_scale_set>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	e000      	b.n	8002150 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	331c      	adds	r3, #28
 8002166:	f107 0208 	add.w	r2, r7, #8
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fb27 	bl	80027c0 <lsm6dsl_acceleration_raw_get>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	e00c      	b.n	8002198 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800217e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002186:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800218e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	331c      	adds	r3, #28
 80021b4:	f107 0210 	add.w	r2, r7, #16
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fb00 	bl	80027c0 <lsm6dsl_acceleration_raw_get>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e03c      	b.n	8002246 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff36 	bl	8002044 <LSM6DSL_ACC_GetSensitivity>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e030      	b.n	8002246 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80021e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fc:	ee17 2a90 	vmov	r2, s15
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002204:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002210:	edd7 7a03 	vldr	s15, [r7, #12]
 8002214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	ee17 2a90 	vmov	r2, s15
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002224:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002230:	edd7 7a03 	vldr	s15, [r7, #12]
 8002234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223c:	ee17 2a90 	vmov	r2, s15
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
 800225a:	4613      	mov	r3, r2
 800225c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 001c 	add.w	r0, r3, #28
 8002264:	1cba      	adds	r2, r7, #2
 8002266:	78f9      	ldrb	r1, [r7, #3]
 8002268:	2301      	movs	r3, #1
 800226a:	f000 f99b 	bl	80025a4 <lsm6dsl_write_reg>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	e000      	b.n	800227c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	331c      	adds	r3, #28
 8002294:	f107 020c 	add.w	r2, r7, #12
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fc75 	bl	8002b8a <lsm6dsl_pin_int1_route_get>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e01b      	b.n	80022e4 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d811      	bhi.n	80022d6 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	7b3b      	ldrb	r3, [r7, #12]
 80022bc:	f362 0300 	bfi	r3, r2, #0, #1
 80022c0:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	331c      	adds	r3, #28
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fafb 	bl	80028c4 <lsm6dsl_pin_int1_route_set>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80022d4:	e002      	b.n	80022dc <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	e003      	b.n	80022e4 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	e000      	b.n	80022e4 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80022f8:	edd7 7a00 	vldr	s15, [r7]
 80022fc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d801      	bhi.n	800230e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800230a:	2301      	movs	r3, #1
 800230c:	e058      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800230e:	edd7 7a00 	vldr	s15, [r7]
 8002312:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d801      	bhi.n	8002324 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002320:	2302      	movs	r3, #2
 8002322:	e04d      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002324:	edd7 7a00 	vldr	s15, [r7]
 8002328:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80023e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d801      	bhi.n	800233a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002336:	2303      	movs	r3, #3
 8002338:	e042      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800233a:	edd7 7a00 	vldr	s15, [r7]
 800233e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80023ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	d801      	bhi.n	8002350 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 800234c:	2304      	movs	r3, #4
 800234e:	e037      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002350:	edd7 7a00 	vldr	s15, [r7]
 8002354:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d801      	bhi.n	8002366 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002362:	2305      	movs	r3, #5
 8002364:	e02c      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002366:	edd7 7a00 	vldr	s15, [r7]
 800236a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800236e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d801      	bhi.n	800237c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002378:	2306      	movs	r3, #6
 800237a:	e021      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800237c:	edd7 7a00 	vldr	s15, [r7]
 8002380:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80023f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d801      	bhi.n	8002392 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800238e:	2307      	movs	r3, #7
 8002390:	e016      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002392:	edd7 7a00 	vldr	s15, [r7]
 8002396:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80023fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	d801      	bhi.n	80023a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80023a4:	2308      	movs	r3, #8
 80023a6:	e00b      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80023a8:	edd7 7a00 	vldr	s15, [r7]
 80023ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002400 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80023b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	d801      	bhi.n	80023be <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80023ba:	2309      	movs	r3, #9
 80023bc:	e000      	b.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80023be:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80023c0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	331c      	adds	r3, #28
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f960 	bl	8002690 <lsm6dsl_xl_data_rate_set>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e000      	b.n	80023de <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	42500000 	.word	0x42500000
 80023ec:	42d00000 	.word	0x42d00000
 80023f0:	43500000 	.word	0x43500000
 80023f4:	43d00000 	.word	0x43d00000
 80023f8:	44504000 	.word	0x44504000
 80023fc:	44cf8000 	.word	0x44cf8000
 8002400:	45502000 	.word	0x45502000

08002404 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002410:	edd7 7a00 	vldr	s15, [r7]
 8002414:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d801      	bhi.n	8002426 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002422:	2301      	movs	r3, #1
 8002424:	e058      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002426:	edd7 7a00 	vldr	s15, [r7]
 800242a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d801      	bhi.n	800243c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002438:	2302      	movs	r3, #2
 800243a:	e04d      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800243c:	edd7 7a00 	vldr	s15, [r7]
 8002440:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80024ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	d801      	bhi.n	8002452 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800244e:	2303      	movs	r3, #3
 8002450:	e042      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002452:	edd7 7a00 	vldr	s15, [r7]
 8002456:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80024f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800245a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d801      	bhi.n	8002468 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002464:	2304      	movs	r3, #4
 8002466:	e037      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002468:	edd7 7a00 	vldr	s15, [r7]
 800246c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80024f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	d801      	bhi.n	800247e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800247a:	2305      	movs	r3, #5
 800247c:	e02c      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800247e:	edd7 7a00 	vldr	s15, [r7]
 8002482:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80024f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	d801      	bhi.n	8002494 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002490:	2306      	movs	r3, #6
 8002492:	e021      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002494:	edd7 7a00 	vldr	s15, [r7]
 8002498:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80024fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d801      	bhi.n	80024aa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80024a6:	2307      	movs	r3, #7
 80024a8:	e016      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024aa:	edd7 7a00 	vldr	s15, [r7]
 80024ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d801      	bhi.n	80024c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80024bc:	2308      	movs	r3, #8
 80024be:	e00b      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024c0:	edd7 7a00 	vldr	s15, [r7]
 80024c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002504 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80024c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d801      	bhi.n	80024d6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80024d2:	2309      	movs	r3, #9
 80024d4:	e000      	b.n	80024d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80024d6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	42500000 	.word	0x42500000
 80024f0:	42d00000 	.word	0x42d00000
 80024f4:	43500000 	.word	0x43500000
 80024f8:	43d00000 	.word	0x43d00000
 80024fc:	44504000 	.word	0x44504000
 8002500:	44cf8000 	.word	0x44cf8000
 8002504:	45502000 	.word	0x45502000

08002508 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	460b      	mov	r3, r1
 8002516:	72fb      	strb	r3, [r7, #11]
 8002518:	4613      	mov	r3, r2
 800251a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	695c      	ldr	r4, [r3, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	7b1b      	ldrb	r3, [r3, #12]
 8002528:	b298      	uxth	r0, r3
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	b299      	uxth	r1, r3
 800252e:	893b      	ldrh	r3, [r7, #8]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	47a0      	blx	r4
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}

0800253e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800253e:	b590      	push	{r4, r7, lr}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	461a      	mov	r2, r3
 800254a:	460b      	mov	r3, r1
 800254c:	72fb      	strb	r3, [r7, #11]
 800254e:	4613      	mov	r3, r2
 8002550:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	691c      	ldr	r4, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	7b1b      	ldrb	r3, [r3, #12]
 800255e:	b298      	uxth	r0, r3
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	b299      	uxth	r1, r3
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	47a0      	blx	r4
 800256a:	4603      	mov	r3, r0
}
 800256c:	4618      	mov	r0, r3
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	72fb      	strb	r3, [r7, #11]
 8002584:	4613      	mov	r3, r2
 8002586:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685c      	ldr	r4, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6898      	ldr	r0, [r3, #8]
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	7af9      	ldrb	r1, [r7, #11]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	47a0      	blx	r4
 8002598:	6178      	str	r0, [r7, #20]
  return ret;
 800259a:	697b      	ldr	r3, [r7, #20]
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	72fb      	strb	r3, [r7, #11]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681c      	ldr	r4, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6898      	ldr	r0, [r3, #8]
 80025c0:	893b      	ldrh	r3, [r7, #8]
 80025c2:	7af9      	ldrb	r1, [r7, #11]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	47a0      	blx	r4
 80025c8:	6178      	str	r0, [r7, #20]
  return ret;
 80025ca:	697b      	ldr	r3, [r7, #20]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80025e0:	f107 0208 	add.w	r2, r7, #8
 80025e4:	2301      	movs	r3, #1
 80025e6:	2110      	movs	r1, #16
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ffc3 	bl	8002574 <lsm6dsl_read_reg>
 80025ee:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	7a3b      	ldrb	r3, [r7, #8]
 8002600:	f362 0383 	bfi	r3, r2, #2, #2
 8002604:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8002606:	f107 0208 	add.w	r2, r7, #8
 800260a:	2301      	movs	r3, #1
 800260c:	2110      	movs	r1, #16
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffc8 	bl	80025a4 <lsm6dsl_write_reg>
 8002614:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800262a:	f107 0208 	add.w	r2, r7, #8
 800262e:	2301      	movs	r3, #1
 8002630:	2110      	movs	r1, #16
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff9e 	bl	8002574 <lsm6dsl_read_reg>
 8002638:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b03      	cmp	r3, #3
 8002644:	d81a      	bhi.n	800267c <lsm6dsl_xl_full_scale_get+0x5c>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <lsm6dsl_xl_full_scale_get+0x2c>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002665 	.word	0x08002665
 8002654:	0800266d 	.word	0x0800266d
 8002658:	08002675 	.word	0x08002675
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e00f      	b.n	8002684 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
      break;
 800266a:	e00b      	b.n	8002684 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
      break;
 8002672:	e007      	b.n	8002684 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2203      	movs	r2, #3
 8002678:	701a      	strb	r2, [r3, #0]
      break;
 800267a:	e003      	b.n	8002684 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	701a      	strb	r2, [r3, #0]
      break;
 8002682:	bf00      	nop
  }

  return ret;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop

08002690 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800269c:	f107 0208 	add.w	r2, r7, #8
 80026a0:	2301      	movs	r3, #1
 80026a2:	2110      	movs	r1, #16
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff65 	bl	8002574 <lsm6dsl_read_reg>
 80026aa:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	7a3b      	ldrb	r3, [r7, #8]
 80026bc:	f362 1307 	bfi	r3, r2, #4, #4
 80026c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80026c2:	f107 0208 	add.w	r2, r7, #8
 80026c6:	2301      	movs	r3, #1
 80026c8:	2110      	movs	r1, #16
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ff6a 	bl	80025a4 <lsm6dsl_write_reg>
 80026d0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026e8:	f107 0208 	add.w	r2, r7, #8
 80026ec:	2301      	movs	r3, #1
 80026ee:	2111      	movs	r1, #17
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff3f 	bl	8002574 <lsm6dsl_read_reg>
 80026f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	b2da      	uxtb	r2, r3
 8002706:	7a3b      	ldrb	r3, [r7, #8]
 8002708:	f362 0343 	bfi	r3, r2, #1, #3
 800270c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800270e:	f107 0208 	add.w	r2, r7, #8
 8002712:	2301      	movs	r3, #1
 8002714:	2111      	movs	r1, #17
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff44 	bl	80025a4 <lsm6dsl_write_reg>
 800271c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002734:	f107 0208 	add.w	r2, r7, #8
 8002738:	2301      	movs	r3, #1
 800273a:	2111      	movs	r1, #17
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff19 	bl	8002574 <lsm6dsl_read_reg>
 8002742:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	b2da      	uxtb	r2, r3
 8002752:	7a3b      	ldrb	r3, [r7, #8]
 8002754:	f362 1307 	bfi	r3, r2, #4, #4
 8002758:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800275a:	f107 0208 	add.w	r2, r7, #8
 800275e:	2301      	movs	r3, #1
 8002760:	2111      	movs	r1, #17
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff1e 	bl	80025a4 <lsm6dsl_write_reg>
 8002768:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002780:	f107 0208 	add.w	r2, r7, #8
 8002784:	2301      	movs	r3, #1
 8002786:	2112      	movs	r1, #18
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff fef3 	bl	8002574 <lsm6dsl_read_reg>
 800278e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	7a3b      	ldrb	r3, [r7, #8]
 80027a0:	f362 1386 	bfi	r3, r2, #6, #1
 80027a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80027a6:	f107 0208 	add.w	r2, r7, #8
 80027aa:	2301      	movs	r3, #1
 80027ac:	2112      	movs	r1, #18
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff fef8 	bl	80025a4 <lsm6dsl_write_reg>
 80027b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	2306      	movs	r3, #6
 80027d0:	2128      	movs	r1, #40	; 0x28
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fece 	bl	8002574 <lsm6dsl_read_reg>
 80027d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027da:	7b7b      	ldrb	r3, [r7, #13]
 80027dc:	b21a      	sxth	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3302      	adds	r3, #2
 8002802:	b212      	sxth	r2, r2
 8002804:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3302      	adds	r3, #2
 800280a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280e:	b29b      	uxth	r3, r3
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b29a      	uxth	r2, r3
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4413      	add	r3, r2
 800281a:	b29a      	uxth	r2, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	3302      	adds	r3, #2
 8002820:	b212      	sxth	r2, r2
 8002822:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002824:	7c7a      	ldrb	r2, [r7, #17]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	3304      	adds	r3, #4
 800282a:	b212      	sxth	r2, r2
 800282c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	3304      	adds	r3, #4
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	b29b      	uxth	r3, r3
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	7c3b      	ldrb	r3, [r7, #16]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3304      	adds	r3, #4
 8002848:	b212      	sxth	r2, r2
 800284a:	801a      	strh	r2, [r3, #0]
  return ret;
 800284c:	697b      	ldr	r3, [r7, #20]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002860:	2301      	movs	r3, #1
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	210f      	movs	r1, #15
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fe84 	bl	8002574 <lsm6dsl_read_reg>
 800286c:	60f8      	str	r0, [r7, #12]
  return ret;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002884:	f107 0208 	add.w	r2, r7, #8
 8002888:	2301      	movs	r3, #1
 800288a:	2112      	movs	r1, #18
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe71 	bl	8002574 <lsm6dsl_read_reg>
 8002892:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	7a3b      	ldrb	r3, [r7, #8]
 80028a4:	f362 0382 	bfi	r3, r2, #2, #1
 80028a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028aa:	f107 0208 	add.w	r2, r7, #8
 80028ae:	2301      	movs	r3, #1
 80028b0:	2112      	movs	r1, #18
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fe76 	bl	80025a4 <lsm6dsl_write_reg>
 80028b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 80028ce:	f107 021c 	add.w	r2, r7, #28
 80028d2:	2301      	movs	r3, #1
 80028d4:	210d      	movs	r1, #13
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fe4c 	bl	8002574 <lsm6dsl_read_reg>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24
                         1);

  if (ret == 0) {
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d147      	bne.n	8002974 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 80028e4:	783b      	ldrb	r3, [r7, #0]
 80028e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	7f3b      	ldrb	r3, [r7, #28]
 80028ee:	f362 0300 	bfi	r3, r2, #0, #1
 80028f2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80028f4:	783b      	ldrb	r3, [r7, #0]
 80028f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	7f3b      	ldrb	r3, [r7, #28]
 80028fe:	f362 0341 	bfi	r3, r2, #1, #1
 8002902:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8002904:	783b      	ldrb	r3, [r7, #0]
 8002906:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	7f3b      	ldrb	r3, [r7, #28]
 800290e:	f362 0382 	bfi	r3, r2, #2, #1
 8002912:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8002914:	783b      	ldrb	r3, [r7, #0]
 8002916:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	7f3b      	ldrb	r3, [r7, #28]
 800291e:	f362 03c3 	bfi	r3, r2, #3, #1
 8002922:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8002924:	783b      	ldrb	r3, [r7, #0]
 8002926:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	7f3b      	ldrb	r3, [r7, #28]
 800292e:	f362 1304 	bfi	r3, r2, #4, #1
 8002932:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8002934:	783b      	ldrb	r3, [r7, #0]
 8002936:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	7f3b      	ldrb	r3, [r7, #28]
 800293e:	f362 1345 	bfi	r3, r2, #5, #1
 8002942:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8002944:	783b      	ldrb	r3, [r7, #0]
 8002946:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	7f3b      	ldrb	r3, [r7, #28]
 800294e:	f362 1386 	bfi	r3, r2, #6, #1
 8002952:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8002954:	783b      	ldrb	r3, [r7, #0]
 8002956:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	7f3b      	ldrb	r3, [r7, #28]
 800295e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002962:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8002964:	f107 021c 	add.w	r2, r7, #28
 8002968:	2301      	movs	r3, #1
 800296a:	210d      	movs	r1, #13
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fe19 	bl	80025a4 <lsm6dsl_write_reg>
 8002972:	6278      	str	r0, [r7, #36]	; 0x24
                            1);
  }

  if (ret == 0) {
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800297a:	f107 0218 	add.w	r2, r7, #24
 800297e:	2301      	movs	r3, #1
 8002980:	215e      	movs	r1, #94	; 0x5e
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fdf6 	bl	8002574 <lsm6dsl_read_reg>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002990:	f107 0214 	add.w	r2, r7, #20
 8002994:	2301      	movs	r3, #1
 8002996:	215f      	movs	r1, #95	; 0x5f
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fdeb 	bl	8002574 <lsm6dsl_read_reg>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d147      	bne.n	8002a36 <lsm6dsl_pin_int1_route_set+0x172>
    md1_cfg.int1_timer           = val.int1_timer;
 80029a6:	787b      	ldrb	r3, [r7, #1]
 80029a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	7e3b      	ldrb	r3, [r7, #24]
 80029b0:	f362 0300 	bfi	r3, r2, #0, #1
 80029b4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 80029b6:	787b      	ldrb	r3, [r7, #1]
 80029b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	7e3b      	ldrb	r3, [r7, #24]
 80029c0:	f362 0341 	bfi	r3, r2, #1, #1
 80029c4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80029c6:	787b      	ldrb	r3, [r7, #1]
 80029c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	7e3b      	ldrb	r3, [r7, #24]
 80029d0:	f362 0382 	bfi	r3, r2, #2, #1
 80029d4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 80029d6:	787b      	ldrb	r3, [r7, #1]
 80029d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	7e3b      	ldrb	r3, [r7, #24]
 80029e0:	f362 03c3 	bfi	r3, r2, #3, #1
 80029e4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 80029e6:	787b      	ldrb	r3, [r7, #1]
 80029e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	7e3b      	ldrb	r3, [r7, #24]
 80029f0:	f362 1304 	bfi	r3, r2, #4, #1
 80029f4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 80029f6:	787b      	ldrb	r3, [r7, #1]
 80029f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	7e3b      	ldrb	r3, [r7, #24]
 8002a00:	f362 1345 	bfi	r3, r2, #5, #1
 8002a04:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002a06:	787b      	ldrb	r3, [r7, #1]
 8002a08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	7e3b      	ldrb	r3, [r7, #24]
 8002a10:	f362 1386 	bfi	r3, r2, #6, #1
 8002a14:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002a16:	787b      	ldrb	r3, [r7, #1]
 8002a18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	7e3b      	ldrb	r3, [r7, #24]
 8002a20:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a24:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002a26:	f107 0218 	add.w	r2, r7, #24
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	215e      	movs	r1, #94	; 0x5e
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fdb8 	bl	80025a4 <lsm6dsl_write_reg>
 8002a34:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002a3c:	f107 0210 	add.w	r2, r7, #16
 8002a40:	2301      	movs	r3, #1
 8002a42:	2113      	movs	r1, #19
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fd95 	bl	8002574 <lsm6dsl_read_reg>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002a52:	78bb      	ldrb	r3, [r7, #2]
 8002a54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	7c3b      	ldrb	r3, [r7, #16]
 8002a5c:	f362 1304 	bfi	r3, r2, #4, #1
 8002a60:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002a62:	f107 0210 	add.w	r2, r7, #16
 8002a66:	2301      	movs	r3, #1
 8002a68:	2113      	movs	r1, #19
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fd9a 	bl	80025a4 <lsm6dsl_write_reg>
 8002a70:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002a78:	f107 0220 	add.w	r2, r7, #32
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	211a      	movs	r1, #26
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fd77 	bl	8002574 <lsm6dsl_read_reg>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d111      	bne.n	8002ab2 <lsm6dsl_pin_int1_route_set+0x1ee>
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8002a8e:	78bb      	ldrb	r3, [r7, #2]
 8002a90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a9a:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a9e:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002aa2:	f107 0220 	add.w	r2, r7, #32
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	211a      	movs	r1, #26
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fd7a 	bl	80025a4 <lsm6dsl_write_reg>
 8002ab0:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d158      	bne.n	8002b6a <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002ab8:	f107 020c 	add.w	r2, r7, #12
 8002abc:	2301      	movs	r3, #1
 8002abe:	2158      	movs	r1, #88	; 0x58
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fd57 	bl	8002574 <lsm6dsl_read_reg>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d141      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d13b      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d135      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002aec:	787b      	ldrb	r3, [r7, #1]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d12f      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d129      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b0a:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d123      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002b10:	7d3b      	ldrb	r3, [r7, #20]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11d      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002b1c:	7d3b      	ldrb	r3, [r7, #20]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d117      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002b28:	7d3b      	ldrb	r3, [r7, #20]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d111      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002b34:	7d3b      	ldrb	r3, [r7, #20]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002b40:	7d3b      	ldrb	r3, [r7, #20]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U) ) {
 8002b4c:	7d3b      	ldrb	r3, [r7, #20]
 8002b4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b52:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002b58:	7b3b      	ldrb	r3, [r7, #12]
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	733b      	strb	r3, [r7, #12]
 8002b60:	e003      	b.n	8002b6a <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002b62:	7b3b      	ldrb	r3, [r7, #12]
 8002b64:	f36f 13c7 	bfc	r3, #7, #1
 8002b68:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0) {
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002b70:	f107 020c 	add.w	r2, r7, #12
 8002b74:	2301      	movs	r3, #1
 8002b76:	2158      	movs	r1, #88	; 0x58
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fd13 	bl	80025a4 <lsm6dsl_write_reg>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  lsm6dsl_master_config_t master_config;
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8002b94:	f107 0214 	add.w	r2, r7, #20
 8002b98:	2301      	movs	r3, #1
 8002b9a:	210d      	movs	r1, #13
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fce9 	bl	8002574 <lsm6dsl_read_reg>
 8002ba2:	61f8      	str	r0, [r7, #28]
                         1);

  if (ret == 0) {
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 80c0 	bne.w	8002d2c <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002bac:	7d3b      	ldrb	r3, [r7, #20]
 8002bae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bb2:	b2d9      	uxtb	r1, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	7813      	ldrb	r3, [r2, #0]
 8002bb8:	f361 0300 	bfi	r3, r1, #0, #1
 8002bbc:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002bbe:	7d3b      	ldrb	r3, [r7, #20]
 8002bc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bc4:	b2d9      	uxtb	r1, r3
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	7813      	ldrb	r3, [r2, #0]
 8002bca:	f361 0341 	bfi	r3, r1, #1, #1
 8002bce:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002bd0:	7d3b      	ldrb	r3, [r7, #20]
 8002bd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002bd6:	b2d9      	uxtb	r1, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	7813      	ldrb	r3, [r2, #0]
 8002bdc:	f361 0382 	bfi	r3, r1, #2, #1
 8002be0:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002be2:	7d3b      	ldrb	r3, [r7, #20]
 8002be4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002be8:	b2d9      	uxtb	r1, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	7813      	ldrb	r3, [r2, #0]
 8002bee:	f361 03c3 	bfi	r3, r1, #3, #1
 8002bf2:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002bf4:	7d3b      	ldrb	r3, [r7, #20]
 8002bf6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002bfa:	b2d9      	uxtb	r1, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	7813      	ldrb	r3, [r2, #0]
 8002c00:	f361 1304 	bfi	r3, r1, #4, #1
 8002c04:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002c06:	7d3b      	ldrb	r3, [r7, #20]
 8002c08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c0c:	b2d9      	uxtb	r1, r3
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	7813      	ldrb	r3, [r2, #0]
 8002c12:	f361 1345 	bfi	r3, r1, #5, #1
 8002c16:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8002c18:	7d3b      	ldrb	r3, [r7, #20]
 8002c1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	7813      	ldrb	r3, [r2, #0]
 8002c24:	f361 1386 	bfi	r3, r1, #6, #1
 8002c28:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002c2a:	7d3b      	ldrb	r3, [r7, #20]
 8002c2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c30:	b2d9      	uxtb	r1, r3
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	7813      	ldrb	r3, [r2, #0]
 8002c36:	f361 13c7 	bfi	r3, r1, #7, #1
 8002c3a:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002c3c:	f107 0210 	add.w	r2, r7, #16
 8002c40:	2301      	movs	r3, #1
 8002c42:	215e      	movs	r1, #94	; 0x5e
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fc95 	bl	8002574 <lsm6dsl_read_reg>
 8002c4a:	61f8      	str	r0, [r7, #28]

    if (ret == 0) {
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d16c      	bne.n	8002d2c <lsm6dsl_pin_int1_route_get+0x1a2>
      val->int1_timer       = md1_cfg.int1_timer;
 8002c52:	7c3b      	ldrb	r3, [r7, #16]
 8002c54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c58:	b2d9      	uxtb	r1, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	7853      	ldrb	r3, [r2, #1]
 8002c5e:	f361 0300 	bfi	r3, r1, #0, #1
 8002c62:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002c64:	7c3b      	ldrb	r3, [r7, #16]
 8002c66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c6a:	b2d9      	uxtb	r1, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	7853      	ldrb	r3, [r2, #1]
 8002c70:	f361 0341 	bfi	r3, r1, #1, #1
 8002c74:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8002c76:	7c3b      	ldrb	r3, [r7, #16]
 8002c78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c7c:	b2d9      	uxtb	r1, r3
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	7853      	ldrb	r3, [r2, #1]
 8002c82:	f361 0382 	bfi	r3, r1, #2, #1
 8002c86:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002c88:	7c3b      	ldrb	r3, [r7, #16]
 8002c8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c8e:	b2d9      	uxtb	r1, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	7853      	ldrb	r3, [r2, #1]
 8002c94:	f361 03c3 	bfi	r3, r1, #3, #1
 8002c98:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002c9a:	7c3b      	ldrb	r3, [r7, #16]
 8002c9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ca0:	b2d9      	uxtb	r1, r3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	7853      	ldrb	r3, [r2, #1]
 8002ca6:	f361 1304 	bfi	r3, r1, #4, #1
 8002caa:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8002cac:	7c3b      	ldrb	r3, [r7, #16]
 8002cae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002cb2:	b2d9      	uxtb	r1, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	7853      	ldrb	r3, [r2, #1]
 8002cb8:	f361 1345 	bfi	r3, r1, #5, #1
 8002cbc:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002cbe:	7c3b      	ldrb	r3, [r7, #16]
 8002cc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002cc4:	b2d9      	uxtb	r1, r3
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	7853      	ldrb	r3, [r2, #1]
 8002cca:	f361 1386 	bfi	r3, r1, #6, #1
 8002cce:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002cd0:	7c3b      	ldrb	r3, [r7, #16]
 8002cd2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002cd6:	b2d9      	uxtb	r1, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	7853      	ldrb	r3, [r2, #1]
 8002cdc:	f361 13c7 	bfi	r3, r1, #7, #1
 8002ce0:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002ce2:	f107 020c 	add.w	r2, r7, #12
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	2113      	movs	r1, #19
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fc42 	bl	8002574 <lsm6dsl_read_reg>
 8002cf0:	61f8      	str	r0, [r7, #28]

      if (ret == 0) {
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d119      	bne.n	8002d2c <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002cf8:	7b3b      	ldrb	r3, [r7, #12]
 8002cfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002cfe:	b2d9      	uxtb	r1, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	7893      	ldrb	r3, [r2, #2]
 8002d04:	f361 0300 	bfi	r3, r1, #0, #1
 8002d08:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002d0a:	f107 0218 	add.w	r2, r7, #24
 8002d0e:	2301      	movs	r3, #1
 8002d10:	211a      	movs	r1, #26
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fc2e 	bl	8002574 <lsm6dsl_read_reg>
 8002d18:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002d1a:	7e3b      	ldrb	r3, [r7, #24]
 8002d1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d20:	b2d9      	uxtb	r1, r3
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	7893      	ldrb	r3, [r2, #2]
 8002d26:	f361 0300 	bfi	r3, r1, #0, #1
 8002d2a:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d42:	f107 0208 	add.w	r2, r7, #8
 8002d46:	2301      	movs	r3, #1
 8002d48:	210a      	movs	r1, #10
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fc12 	bl	8002574 <lsm6dsl_read_reg>
 8002d50:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10f      	bne.n	8002d78 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	7a3b      	ldrb	r3, [r7, #8]
 8002d62:	f362 0302 	bfi	r3, r2, #0, #3
 8002d66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	210a      	movs	r1, #10
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fc17 	bl	80025a4 <lsm6dsl_write_reg>
 8002d76:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f000 f961 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d92:	2000      	movs	r0, #0
 8002d94:	f000 f80e 	bl	8002db4 <HAL_InitTick>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	71fb      	strb	r3, [r7, #7]
 8002da2:	e001      	b.n	8002da8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002da4:	f7fe fd44 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002da8:	79fb      	ldrb	r3, [r7, #7]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_InitTick+0x6c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d023      	beq.n	8002e10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_InitTick+0x70>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_InitTick+0x6c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f96d 	bl	80030be <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	d809      	bhi.n	8002e04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df0:	2200      	movs	r2, #0
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f000 f937 	bl	800306a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_InitTick+0x74>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e007      	b.n	8002e14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e004      	b.n	8002e14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e001      	b.n	8002e14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000014 	.word	0x20000014
 8002e24:	2000000c 	.word	0x2000000c
 8002e28:	20000010 	.word	0x20000010

08002e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x20>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_IncTick+0x24>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_IncTick+0x24>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000014 	.word	0x20000014
 8002e50:	20001338 	.word	0x20001338

08002e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_GetTick+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20001338 	.word	0x20001338

08002e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff ffee 	bl	8002e54 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d005      	beq.n	8002e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_Delay+0x44>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e92:	bf00      	nop
 8002e94:	f7ff ffde 	bl	8002e54 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8f7      	bhi.n	8002e94 <HAL_Delay+0x28>
  {
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000014 	.word	0x20000014

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <__NVIC_EnableIRQ+0x38>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d301      	bcc.n	8003026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003022:	2301      	movs	r3, #1
 8003024:	e00f      	b.n	8003046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003026:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <SysTick_Config+0x40>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302e:	210f      	movs	r1, #15
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f7ff ff8e 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SysTick_Config+0x40>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <SysTick_Config+0x40>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010

08003054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff29 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800307c:	f7ff ff3e 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff8e 	bl	8002fa8 <NVIC_EncodePriority>
 800308c:	4602      	mov	r2, r0
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff5d 	bl	8002f54 <__NVIC_SetPriority>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff31 	bl	8002f18 <__NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffa2 	bl	8003010 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e054      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f5b      	ldrb	r3, [r3, #29]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe fbbc 	bl	8001878 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_CRC_Init+0xc4>)
 8003114:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0218 	bic.w	r2, r2, #24
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e00c      	b.n	8003142 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	461a      	mov	r2, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f834 	bl	80031a0 <HAL_CRCEx_Polynomial_Set>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e028      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e004      	b.n	8003160 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6912      	ldr	r2, [r2, #16]
 800315e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	04c11db7 	.word	0x04c11db7

080031a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031b0:	231f      	movs	r3, #31
 80031b2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031b4:	bf00      	nop
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	613a      	str	r2, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_CRCEx_Polynomial_Set+0x16>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b18      	cmp	r3, #24
 80031d8:	d846      	bhi.n	8003268 <HAL_CRCEx_Polynomial_Set+0xc8>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	0800326f 	.word	0x0800326f
 80031e4:	08003269 	.word	0x08003269
 80031e8:	08003269 	.word	0x08003269
 80031ec:	08003269 	.word	0x08003269
 80031f0:	08003269 	.word	0x08003269
 80031f4:	08003269 	.word	0x08003269
 80031f8:	08003269 	.word	0x08003269
 80031fc:	08003269 	.word	0x08003269
 8003200:	0800325d 	.word	0x0800325d
 8003204:	08003269 	.word	0x08003269
 8003208:	08003269 	.word	0x08003269
 800320c:	08003269 	.word	0x08003269
 8003210:	08003269 	.word	0x08003269
 8003214:	08003269 	.word	0x08003269
 8003218:	08003269 	.word	0x08003269
 800321c:	08003269 	.word	0x08003269
 8003220:	08003251 	.word	0x08003251
 8003224:	08003269 	.word	0x08003269
 8003228:	08003269 	.word	0x08003269
 800322c:	08003269 	.word	0x08003269
 8003230:	08003269 	.word	0x08003269
 8003234:	08003269 	.word	0x08003269
 8003238:	08003269 	.word	0x08003269
 800323c:	08003269 	.word	0x08003269
 8003240:	08003245 	.word	0x08003245
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d913      	bls.n	8003272 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800324e:	e010      	b.n	8003272 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b07      	cmp	r3, #7
 8003254:	d90f      	bls.n	8003276 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800325a:	e00c      	b.n	8003276 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d90b      	bls.n	800327a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003266:	e008      	b.n	800327a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
      break;
 800326c:	e006      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800326e:	bf00      	nop
 8003270:	e004      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800327a:	bf00      	nop
  }
  if (status == HAL_OK)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 0118 	bic.w	r1, r3, #24
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	e17f      	b.n	80035bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8171 	beq.w	80035b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d00b      	beq.n	80032f4 <HAL_GPIO_Init+0x48>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d007      	beq.n	80032f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e8:	2b11      	cmp	r3, #17
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d130      	bne.n	8003356 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800332a:	2201      	movs	r2, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0201 	and.w	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d118      	bne.n	8003394 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003368:	2201      	movs	r2, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f003 0201 	and.w	r2, r3, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x128>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b12      	cmp	r3, #18
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	6939      	ldr	r1, [r7, #16]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80ac 	beq.w	80035b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_GPIO_Init+0x330>)
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <HAL_GPIO_Init+0x330>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6613      	str	r3, [r2, #96]	; 0x60
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <HAL_GPIO_Init+0x330>)
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_GPIO_Init+0x334>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x242>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4f      	ldr	r2, [pc, #316]	; (80035e4 <HAL_GPIO_Init+0x338>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x23e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4e      	ldr	r2, [pc, #312]	; (80035e8 <HAL_GPIO_Init+0x33c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x23a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	; (80035ec <HAL_GPIO_Init+0x340>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x236>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4c      	ldr	r2, [pc, #304]	; (80035f0 <HAL_GPIO_Init+0x344>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x232>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_GPIO_Init+0x348>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x22e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4a      	ldr	r2, [pc, #296]	; (80035f8 <HAL_GPIO_Init+0x34c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x22a>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00c      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e00a      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034da:	2305      	movs	r3, #5
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034de:	2304      	movs	r3, #4
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034ee:	2300      	movs	r3, #0
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003500:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_GPIO_Init+0x334>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003532:	4a32      	ldr	r2, [pc, #200]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_GPIO_Init+0x350>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_GPIO_Init+0x350>)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_GPIO_Init+0x350>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_GPIO_Init+0x350>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f ae78 	bne.w	80032bc <HAL_GPIO_Init+0x10>
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000
 80035e4:	48000400 	.word	0x48000400
 80035e8:	48000800 	.word	0x48000800
 80035ec:	48000c00 	.word	0x48000c00
 80035f0:	48001000 	.word	0x48001000
 80035f4:	48001400 	.word	0x48001400
 80035f8:	48001800 	.word	0x48001800
 80035fc:	40010400 	.word	0x40010400

08003600 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800360e:	e0cd      	b.n	80037ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003610:	2201      	movs	r2, #1
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80c0 	beq.w	80037a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003626:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_GPIO_DeInit+0x1c8>)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800364e:	d025      	beq.n	800369c <HAL_GPIO_DeInit+0x9c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a5e      	ldr	r2, [pc, #376]	; (80037cc <HAL_GPIO_DeInit+0x1cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01f      	beq.n	8003698 <HAL_GPIO_DeInit+0x98>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a5d      	ldr	r2, [pc, #372]	; (80037d0 <HAL_GPIO_DeInit+0x1d0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d019      	beq.n	8003694 <HAL_GPIO_DeInit+0x94>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a5c      	ldr	r2, [pc, #368]	; (80037d4 <HAL_GPIO_DeInit+0x1d4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_GPIO_DeInit+0x90>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_GPIO_DeInit+0x1d8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00d      	beq.n	800368c <HAL_GPIO_DeInit+0x8c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a5a      	ldr	r2, [pc, #360]	; (80037dc <HAL_GPIO_DeInit+0x1dc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <HAL_GPIO_DeInit+0x88>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a59      	ldr	r2, [pc, #356]	; (80037e0 <HAL_GPIO_DeInit+0x1e0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_GPIO_DeInit+0x84>
 8003680:	2306      	movs	r3, #6
 8003682:	e00c      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003684:	2307      	movs	r3, #7
 8003686:	e00a      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003688:	2305      	movs	r3, #5
 800368a:	e008      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 800368c:	2304      	movs	r3, #4
 800368e:	e006      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003690:	2303      	movs	r3, #3
 8003692:	e004      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003694:	2302      	movs	r3, #2
 8003696:	e002      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 800369c:	2300      	movs	r3, #0
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	f002 0203 	and.w	r2, r2, #3
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	4093      	lsls	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d132      	bne.n	8003714 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80036ae:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	494b      	ldr	r1, [pc, #300]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80036bc:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	4947      	ldr	r1, [pc, #284]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4944      	ldr	r1, [pc, #272]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80036d8:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	4940      	ldr	r1, [pc, #256]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	220f      	movs	r2, #15
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <HAL_GPIO_DeInit+0x1c8>)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43da      	mvns	r2, r3
 8003706:	4830      	ldr	r0, [pc, #192]	; (80037c8 <HAL_GPIO_DeInit+0x1c8>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	400a      	ands	r2, r1
 800370e:	3302      	adds	r3, #2
 8003710:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2103      	movs	r1, #3
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	08d2      	lsrs	r2, r2, #3
 8003748:	4019      	ands	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2103      	movs	r1, #3
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	401a      	ands	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	2101      	movs	r1, #1
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	401a      	ands	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2103      	movs	r1, #3
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	2101      	movs	r1, #1
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	401a      	ands	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f af2b 	bne.w	8003610 <HAL_GPIO_DeInit+0x10>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40010000 	.word	0x40010000
 80037cc:	48000400 	.word	0x48000400
 80037d0:	48000800 	.word	0x48000800
 80037d4:	48000c00 	.word	0x48000c00
 80037d8:	48001000 	.word	0x48001000
 80037dc:	48001400 	.word	0x48001400
 80037e0:	48001800 	.word	0x48001800
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
 80037f4:	4613      	mov	r3, r2
 80037f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f8:	787b      	ldrb	r3, [r7, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003804:	e002      	b.n	800380c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	041a      	lsls	r2, r3, #16
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	43d9      	mvns	r1, r3
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	400b      	ands	r3, r1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd febe 	bl	80015ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010400 	.word	0x40010400

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e081      	b.n	8003992 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8a8 	bl	80039f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d107      	bne.n	80038f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	e006      	b.n	8003904 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003902:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d104      	bne.n	8003916 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003928:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	ea42 0103 	orr.w	r1, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	021a      	lsls	r2, r3, #8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1a      	ldr	r2, [r3, #32]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e021      	b.n	80039f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f821 	bl	8003a0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	460b      	mov	r3, r1
 8003a34:	813b      	strh	r3, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	f040 80f9 	bne.w	8003c3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_I2C_Mem_Write+0x34>
 8003a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0ed      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_I2C_Mem_Write+0x4e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0e6      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a76:	f7ff f9ed 	bl	8002e54 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2319      	movs	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fadd 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0d1      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2221      	movs	r2, #33	; 0x21
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ac0:	88f8      	ldrh	r0, [r7, #6]
 8003ac2:	893a      	ldrh	r2, [r7, #8]
 8003ac4:	8979      	ldrh	r1, [r7, #10]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	4603      	mov	r3, r0
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f9ed 	bl	8003eb0 <I2C_RequestMemoryWrite>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0a9      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2bff      	cmp	r3, #255	; 0xff
 8003af0:	d90e      	bls.n	8003b10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	22ff      	movs	r2, #255	; 0xff
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	8979      	ldrh	r1, [r7, #10]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fbbf 	bl	800428c <I2C_TransferConfig>
 8003b0e:	e00f      	b.n	8003b30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	8979      	ldrh	r1, [r7, #10]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fbae 	bl	800428c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fac7 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e07b      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d034      	beq.n	8003be8 <HAL_I2C_Mem_Write+0x1c8>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d130      	bne.n	8003be8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fa59 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e04d      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2bff      	cmp	r3, #255	; 0xff
 8003ba8:	d90e      	bls.n	8003bc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	22ff      	movs	r2, #255	; 0xff
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fb63 	bl	800428c <I2C_TransferConfig>
 8003bc6:	e00f      	b.n	8003be8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	8979      	ldrh	r1, [r7, #10]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fb52 	bl	800428c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d19e      	bne.n	8003b30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 faa6 	bl	8004148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e01a      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_I2C_Mem_Write+0x224>)
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	fe00e800 	.word	0xfe00e800

08003c48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	4608      	mov	r0, r1
 8003c52:	4611      	mov	r1, r2
 8003c54:	461a      	mov	r2, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	817b      	strh	r3, [r7, #10]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	813b      	strh	r3, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	f040 80fd 	bne.w	8003e6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x34>
 8003c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0f1      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_I2C_Mem_Read+0x4e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0ea      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c9e:	f7ff f8d9 	bl	8002e54 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2319      	movs	r3, #25
 8003caa:	2201      	movs	r2, #1
 8003cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f9c9 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0d5      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2222      	movs	r2, #34	; 0x22
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2240      	movs	r2, #64	; 0x40
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce8:	88f8      	ldrh	r0, [r7, #6]
 8003cea:	893a      	ldrh	r2, [r7, #8]
 8003cec:	8979      	ldrh	r1, [r7, #10]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f92d 	bl	8003f58 <I2C_RequestMemoryRead>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0ad      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2bff      	cmp	r3, #255	; 0xff
 8003d18:	d90e      	bls.n	8003d38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	22ff      	movs	r2, #255	; 0xff
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	8979      	ldrh	r1, [r7, #10]
 8003d28:	4b52      	ldr	r3, [pc, #328]	; (8003e74 <HAL_I2C_Mem_Read+0x22c>)
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 faab 	bl	800428c <I2C_TransferConfig>
 8003d36:	e00f      	b.n	8003d58 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	8979      	ldrh	r1, [r7, #10]
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_I2C_Mem_Read+0x22c>)
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fa9a 	bl	800428c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2104      	movs	r1, #4
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f970 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07c      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d034      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x1d0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d130      	bne.n	8003e18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f941 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e04d      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2bff      	cmp	r3, #255	; 0xff
 8003dd8:	d90e      	bls.n	8003df8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	22ff      	movs	r2, #255	; 0xff
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	8979      	ldrh	r1, [r7, #10]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fa4b 	bl	800428c <I2C_TransferConfig>
 8003df6:	e00f      	b.n	8003e18 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa3a 	bl	800428c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d19a      	bne.n	8003d58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f98e 	bl	8004148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e01a      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_I2C_Mem_Read+0x230>)
 8003e4a:	400b      	ands	r3, r1
 8003e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	80002400 	.word	0x80002400
 8003e78:	fe00e800 	.word	0xfe00e800

08003e7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8a:	b2db      	uxtb	r3, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	817b      	strh	r3, [r7, #10]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	813b      	strh	r3, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	8979      	ldrh	r1, [r7, #10]
 8003ed0:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <I2C_RequestMemoryWrite+0xa4>)
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f9d7 	bl	800428c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	69b9      	ldr	r1, [r7, #24]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f8f0 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e02c      	b.n	8003f4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
 8003f02:	e015      	b.n	8003f30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8d6 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e012      	b.n	8003f4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f26:	893b      	ldrh	r3, [r7, #8]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f884 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	80002000 	.word	0x80002000

08003f58 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	817b      	strh	r3, [r7, #10]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	813b      	strh	r3, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <I2C_RequestMemoryRead+0xa4>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f984 	bl	800428c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	69b9      	ldr	r1, [r7, #24]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f89d 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e02c      	b.n	8003ff2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9e:	893b      	ldrh	r3, [r7, #8]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa8:	e015      	b.n	8003fd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f883 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e012      	b.n	8003ff2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2140      	movs	r1, #64	; 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f831 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	80002000 	.word	0x80002000

08004000 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d103      	bne.n	800401e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d007      	beq.n	800403c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	619a      	str	r2, [r3, #24]
  }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004058:	e022      	b.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d01e      	beq.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7fe fef7 	bl	8002e54 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d113      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e00f      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d0cd      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040d4:	e02c      	b.n	8004130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f870 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e02a      	b.n	8004140 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d01e      	beq.n	8004130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fe feaf 	bl	8002e54 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d113      	bne.n	8004130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e007      	b.n	8004140 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d1cb      	bne.n	80040d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004154:	e028      	b.n	80041a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f830 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e026      	b.n	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fe fe73 	bl	8002e54 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d113      	bne.n	80041a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e007      	b.n	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d1cf      	bne.n	8004156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d151      	bne.n	800427e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041da:	e022      	b.n	8004222 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d01e      	beq.n	8004222 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e4:	f7fe fe36 	bl	8002e54 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <I2C_IsAcknowledgeFailed+0x3a>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e02e      	b.n	8004280 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b20      	cmp	r3, #32
 800422e:	d1d5      	bne.n	80041dc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2210      	movs	r2, #16
 8004236:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2220      	movs	r2, #32
 800423e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff fedd 	bl	8004000 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <I2C_IsAcknowledgeFailed+0xc8>)
 8004252:	400b      	ands	r3, r1
 8004254:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f043 0204 	orr.w	r2, r3, #4
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	fe00e800 	.word	0xfe00e800

0800428c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	817b      	strh	r3, [r7, #10]
 800429a:	4613      	mov	r3, r2
 800429c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	0d5b      	lsrs	r3, r3, #21
 80042a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <I2C_TransferConfig+0x58>)
 80042ae:	430b      	orrs	r3, r1
 80042b0:	43db      	mvns	r3, r3
 80042b2:	ea02 0103 	and.w	r1, r2, r3
 80042b6:	897b      	ldrh	r3, [r7, #10]
 80042b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042bc:	7a7b      	ldrb	r3, [r7, #9]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	03ff63ff 	.word	0x03ff63ff

080042e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d138      	bne.n	8004370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004308:	2302      	movs	r3, #2
 800430a:	e032      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800433a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d139      	bne.n	8004408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800439e:	2302      	movs	r3, #2
 80043a0:	e033      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2224      	movs	r2, #36	; 0x24
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <HAL_PWREx_GetVoltageRange+0x18>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40007000 	.word	0x40007000

08004434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004442:	d130      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800444c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004450:	d038      	beq.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800445a:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004460:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2232      	movs	r2, #50	; 0x32
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0c9b      	lsrs	r3, r3, #18
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004478:	e002      	b.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3b01      	subs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448c:	d102      	bne.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x60>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f2      	bne.n	800447a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a0:	d110      	bne.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d007      	beq.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40007000 	.word	0x40007000
 80044d8:	2000000c 	.word	0x2000000c
 80044dc:	431bde83 	.word	0x431bde83

080044e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e3d4      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f2:	4ba1      	ldr	r3, [pc, #644]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044fc:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80e4 	beq.w	80046dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_RCC_OscConfig+0x4a>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	f040 808b 	bne.w	8004638 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 8087 	bne.w	8004638 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800452a:	4b93      	ldr	r3, [pc, #588]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e3ac      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	4b8c      	ldr	r3, [pc, #560]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_RCC_OscConfig+0x7c>
 8004552:	4b89      	ldr	r3, [pc, #548]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455a:	e005      	b.n	8004568 <HAL_RCC_OscConfig+0x88>
 800455c:	4b86      	ldr	r3, [pc, #536]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004568:	4293      	cmp	r3, r2
 800456a:	d223      	bcs.n	80045b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fd41 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e38d      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004580:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7c      	ldr	r2, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004586:	f043 0308 	orr.w	r3, r3, #8
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4977      	ldr	r1, [pc, #476]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459e:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	4972      	ldr	r1, [pc, #456]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	e025      	b.n	8004600 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b4:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6f      	ldr	r2, [pc, #444]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045ba:	f043 0308 	orr.w	r3, r3, #8
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	496a      	ldr	r1, [pc, #424]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d2:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	4965      	ldr	r1, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd01 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e34d      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004600:	f000 fc36 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	495a      	ldr	r1, [pc, #360]	; (800477c <HAL_RCC_OscConfig+0x29c>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	4a58      	ldr	r2, [pc, #352]	; (8004780 <HAL_RCC_OscConfig+0x2a0>)
 800461e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004620:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_RCC_OscConfig+0x2a4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fbc5 	bl	8002db4 <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d052      	beq.n	80046da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	e331      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d032      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004640:	4b4d      	ldr	r3, [pc, #308]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a4c      	ldr	r2, [pc, #304]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800464c:	f7fe fc02 	bl	8002e54 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004654:	f7fe fbfe 	bl	8002e54 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e31a      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a40      	ldr	r2, [pc, #256]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	493b      	ldr	r1, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	4936      	ldr	r1, [pc, #216]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	e01a      	b.n	80046dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a33      	ldr	r2, [pc, #204]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046b2:	f7fe fbcf 	bl	8002e54 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ba:	f7fe fbcb 	bl	8002e54 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e2e7      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046cc:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x1da>
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d074      	beq.n	80047d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d005      	beq.n	80046fa <HAL_RCC_OscConfig+0x21a>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d10e      	bne.n	8004712 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d10b      	bne.n	8004712 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d064      	beq.n	80047d0 <HAL_RCC_OscConfig+0x2f0>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d160      	bne.n	80047d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e2c4      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x24a>
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e01d      	b.n	8004766 <HAL_RCC_OscConfig+0x286>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004732:	d10c      	bne.n	800474e <HAL_RCC_OscConfig+0x26e>
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800473a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e00b      	b.n	8004766 <HAL_RCC_OscConfig+0x286>
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a06      	ldr	r2, [pc, #24]	; (8004778 <HAL_RCC_OscConfig+0x298>)
 8004760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fe fb71 	bl	8002e54 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004774:	e011      	b.n	800479a <HAL_RCC_OscConfig+0x2ba>
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	0800bf9c 	.word	0x0800bf9c
 8004780:	2000000c 	.word	0x2000000c
 8004784:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fe fb64 	bl	8002e54 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e280      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479a:	4baf      	ldr	r3, [pc, #700]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x2a8>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe fb54 	bl	8002e54 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe fb50 	bl	8002e54 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e26c      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c2:	4ba5      	ldr	r3, [pc, #660]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2d0>
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d060      	beq.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_OscConfig+0x310>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d119      	bne.n	800481e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d116      	bne.n	800481e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	4b99      	ldr	r3, [pc, #612]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x328>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e249      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b93      	ldr	r3, [pc, #588]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	4990      	ldr	r1, [pc, #576]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	e040      	b.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d023      	beq.n	800486e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004826:	4b8c      	ldr	r3, [pc, #560]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a8b      	ldr	r2, [pc, #556]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fe fb0f 	bl	8002e54 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483a:	f7fe fb0b 	bl	8002e54 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e227      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484c:	4b82      	ldr	r3, [pc, #520]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	4b7f      	ldr	r3, [pc, #508]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	497c      	ldr	r1, [pc, #496]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
 800486c:	e018      	b.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486e:	4b7a      	ldr	r3, [pc, #488]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a79      	ldr	r2, [pc, #484]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fe faeb 	bl	8002e54 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004882:	f7fe fae7 	bl	8002e54 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e203      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004894:	4b70      	ldr	r3, [pc, #448]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03c      	beq.n	8004926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01c      	beq.n	80048ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b4:	4b68      	ldr	r3, [pc, #416]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ba:	4a67      	ldr	r2, [pc, #412]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fe fac6 	bl	8002e54 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fe fac2 	bl	8002e54 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1de      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048de:	4b5e      	ldr	r3, [pc, #376]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80048e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <HAL_RCC_OscConfig+0x3ec>
 80048ec:	e01b      	b.n	8004926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ee:	4b5a      	ldr	r3, [pc, #360]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80048f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f4:	4a58      	ldr	r2, [pc, #352]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fe faa9 	bl	8002e54 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004906:	f7fe faa5 	bl	8002e54 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1c1      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004918:	4b4f      	ldr	r3, [pc, #316]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ef      	bne.n	8004906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a6 	beq.w	8004a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004938:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10d      	bne.n	8004960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004944:	4b44      	ldr	r3, [pc, #272]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	4a43      	ldr	r2, [pc, #268]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 800494a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	; 0x58
 8004950:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495c:	2301      	movs	r3, #1
 800495e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004960:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <HAL_RCC_OscConfig+0x57c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d118      	bne.n	800499e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_OscConfig+0x57c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3a      	ldr	r2, [pc, #232]	; (8004a5c <HAL_RCC_OscConfig+0x57c>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004978:	f7fe fa6c 	bl	8002e54 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fe fa68 	bl	8002e54 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e184      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004992:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <HAL_RCC_OscConfig+0x57c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d108      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4d8>
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ac:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b6:	e024      	b.n	8004a02 <HAL_RCC_OscConfig+0x522>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b05      	cmp	r3, #5
 80049be:	d110      	bne.n	80049e2 <HAL_RCC_OscConfig+0x502>
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	4a24      	ldr	r2, [pc, #144]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e0:	e00f      	b.n	8004a02 <HAL_RCC_OscConfig+0x522>
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 80049fa:	f023 0304 	bic.w	r3, r3, #4
 80049fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0a:	f7fe fa23 	bl	8002e54 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a10:	e00a      	b.n	8004a28 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a12:	f7fe fa1f 	bl	8002e54 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e139      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_RCC_OscConfig+0x578>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ed      	beq.n	8004a12 <HAL_RCC_OscConfig+0x532>
 8004a36:	e01a      	b.n	8004a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fe fa0c 	bl	8002e54 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3e:	e00f      	b.n	8004a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fe fa08 	bl	8002e54 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d906      	bls.n	8004a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e122      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a60:	4b90      	ldr	r3, [pc, #576]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e8      	bne.n	8004a40 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b8b      	ldr	r3, [pc, #556]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	4a8a      	ldr	r2, [pc, #552]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8108 	beq.w	8004c9a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	f040 80d0 	bne.w	8004c34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a94:	4b83      	ldr	r3, [pc, #524]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0203 	and.w	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d130      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d127      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d11f      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ad4:	2a07      	cmp	r2, #7
 8004ad6:	bf14      	ite	ne
 8004ad8:	2201      	movne	r2, #1
 8004ada:	2200      	moveq	r2, #0
 8004adc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d113      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d06e      	beq.n	8004be8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d069      	beq.n	8004be4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b10:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b1c:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0b7      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a5c      	ldr	r2, [pc, #368]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b38:	f7fe f98c 	bl	8002e54 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fe f988 	bl	8002e54 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e0a4      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b52:	4b54      	ldr	r3, [pc, #336]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5e:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <HAL_RCC_OscConfig+0x7c8>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b78:	0212      	lsls	r2, r2, #8
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b80:	0852      	lsrs	r2, r2, #1
 8004b82:	3a01      	subs	r2, #1
 8004b84:	0552      	lsls	r2, r2, #21
 8004b86:	4311      	orrs	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b8c:	0852      	lsrs	r2, r2, #1
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	0652      	lsls	r2, r2, #25
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b98:	0912      	lsrs	r2, r2, #4
 8004b9a:	0452      	lsls	r2, r2, #17
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	4941      	ldr	r1, [pc, #260]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3e      	ldr	r2, [pc, #248]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb0:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a3b      	ldr	r2, [pc, #236]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bbc:	f7fe f94a 	bl	8002e54 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fe f946 	bl	8002e54 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e062      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be2:	e05a      	b.n	8004c9a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e059      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be8:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d152      	bne.n	8004c9a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2a      	ldr	r2, [pc, #168]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0c:	f7fe f922 	bl	8002e54 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c14:	f7fe f91e 	bl	8002e54 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e03a      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c26:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x734>
 8004c32:	e032      	b.n	8004c9a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d02d      	beq.n	8004c96 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c44:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c58:	f023 0303 	bic.w	r3, r3, #3
 8004c5c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fe f8f1 	bl	8002e54 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c76:	f7fe f8ed 	bl	8002e54 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e009      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x7c4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0x796>
 8004c94:	e001      	b.n	8004c9a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	f99d808c 	.word	0xf99d808c

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0c8      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b66      	ldr	r3, [pc, #408]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d910      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4961      	ldr	r1, [pc, #388]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0b0      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d04c      	beq.n	8004d96 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d121      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e09e      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d115      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e092      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d34:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e086      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e07e      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d54:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f023 0203 	bic.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	493f      	ldr	r1, [pc, #252]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d66:	f7fe f875 	bl	8002e54 <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6e:	f7fe f871 	bl	8002e54 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e066      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d84:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 020c 	and.w	r2, r3, #12
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d1eb      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	492c      	ldr	r1, [pc, #176]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db4:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d210      	bcs.n	8004de4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 0207 	bic.w	r2, r3, #7
 8004dca:	4924      	ldr	r1, [pc, #144]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCC_ClockConfig+0x1b0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e036      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4918      	ldr	r1, [pc, #96]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4910      	ldr	r1, [pc, #64]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e22:	f000 f825 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	490c      	ldr	r1, [pc, #48]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	5ccb      	ldrb	r3, [r1, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x1c0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd ffb4 	bl	8002db4 <HAL_InitTick>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e50:	7afb      	ldrb	r3, [r7, #11]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800bf9c 	.word	0x0800bf9c
 8004e68:	2000000c 	.word	0x2000000c
 8004e6c:	20000010 	.word	0x20000010

08004e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7e:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d121      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d11e      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10d      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d102      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e004      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d134      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004efe:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d003      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0xac>
 8004f14:	e005      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f18:	617b      	str	r3, [r7, #20]
      break;
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f1e:	617b      	str	r3, [r7, #20]
      break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	617b      	str	r3, [r7, #20]
      break;
 8004f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	3301      	adds	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	fb02 f203 	mul.w	r2, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	0e5b      	lsrs	r3, r3, #25
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	3301      	adds	r3, #1
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f68:	69bb      	ldr	r3, [r7, #24]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3724      	adds	r7, #36	; 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	0800bfb4 	.word	0x0800bfb4
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4904      	ldr	r1, [pc, #16]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	0800bfac 	.word	0x0800bfac

08004fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fd0:	f7ff ffda 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	0adb      	lsrs	r3, r3, #11
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4904      	ldr	r1, [pc, #16]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe2:	5ccb      	ldrb	r3, [r1, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	0800bfac 	.word	0x0800bfac

08004ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005010:	f7ff fa02 	bl	8004418 <HAL_PWREx_GetVoltageRange>
 8005014:	6178      	str	r0, [r7, #20]
 8005016:	e014      	b.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
 8005024:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005030:	f7ff f9f2 	bl	8004418 <HAL_PWREx_GetVoltageRange>
 8005034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d10b      	bne.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d919      	bls.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2ba0      	cmp	r3, #160	; 0xa0
 8005054:	d902      	bls.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005056:	2302      	movs	r3, #2
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e013      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800505c:	2301      	movs	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e010      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d902      	bls.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005068:	2303      	movs	r3, #3
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e00a      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d102      	bne.n	800507a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005074:	2302      	movs	r3, #2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e004      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d101      	bne.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005080:	2301      	movs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 0207 	bic.w	r2, r3, #7
 800508c:	4909      	ldr	r1, [pc, #36]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40022000 	.word	0x40022000

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c0:	2300      	movs	r3, #0
 80050c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050c4:	2300      	movs	r3, #0
 80050c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d041      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050dc:	d02a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e2:	d824      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050e8:	d008      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ee:	d81e      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f8:	d010      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050fa:	e018      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050fc:	4b86      	ldr	r3, [pc, #536]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a85      	ldr	r2, [pc, #532]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005106:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005108:	e015      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3304      	adds	r3, #4
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fabb 	bl	800568c <RCCEx_PLLSAI1_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800511a:	e00c      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3320      	adds	r3, #32
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fba6 	bl	8005874 <RCCEx_PLLSAI2_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800512c:	e003      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	74fb      	strb	r3, [r7, #19]
      break;
 8005132:	e000      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800513c:	4b76      	ldr	r3, [pc, #472]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514a:	4973      	ldr	r1, [pc, #460]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d041      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800516c:	d02a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800516e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005172:	d824      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005178:	d008      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800517a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800517e:	d81e      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005188:	d010      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800518a:	e018      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800518c:	4b62      	ldr	r3, [pc, #392]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4a61      	ldr	r2, [pc, #388]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005198:	e015      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fa73 	bl	800568c <RCCEx_PLLSAI1_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051aa:	e00c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3320      	adds	r3, #32
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb5e 	bl	8005874 <RCCEx_PLLSAI2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	74fb      	strb	r3, [r7, #19]
      break;
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051cc:	4b52      	ldr	r3, [pc, #328]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051da:	494f      	ldr	r1, [pc, #316]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051e2:	e001      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a0 	beq.w	8005336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051fa:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	4a40      	ldr	r2, [pc, #256]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	6593      	str	r3, [r2, #88]	; 0x58
 800521c:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005228:	2301      	movs	r3, #1
 800522a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3a      	ldr	r2, [pc, #232]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005238:	f7fd fe0c 	bl	8002e54 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800523e:	e009      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005240:	f7fd fe08 	bl	8002e54 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	74fb      	strb	r3, [r7, #19]
        break;
 8005252:	e005      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005254:	4b31      	ldr	r3, [pc, #196]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0ef      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d15c      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005266:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01f      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	d019      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052a0:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c2:	f7fd fdc7 	bl	8002e54 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c8:	e00b      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fd fdc3 	bl	8002e54 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d902      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	74fb      	strb	r3, [r7, #19]
            break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ec      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10c      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005306:	4904      	ldr	r1, [pc, #16]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800530e:	e009      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	74bb      	strb	r3, [r7, #18]
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005324:	7c7b      	ldrb	r3, [r7, #17]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532a:	4b9e      	ldr	r3, [pc, #632]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	4a9d      	ldr	r2, [pc, #628]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005342:	4b98      	ldr	r3, [pc, #608]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f023 0203 	bic.w	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	4994      	ldr	r1, [pc, #592]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005364:	4b8f      	ldr	r3, [pc, #572]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f023 020c 	bic.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	498c      	ldr	r1, [pc, #560]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005386:	4b87      	ldr	r3, [pc, #540]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	4983      	ldr	r1, [pc, #524]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053a8:	4b7e      	ldr	r3, [pc, #504]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	497b      	ldr	r1, [pc, #492]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053ca:	4b76      	ldr	r3, [pc, #472]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	4972      	ldr	r1, [pc, #456]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ec:	4b6d      	ldr	r3, [pc, #436]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	496a      	ldr	r1, [pc, #424]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540e:	4b65      	ldr	r3, [pc, #404]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541c:	4961      	ldr	r1, [pc, #388]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005430:	4b5c      	ldr	r3, [pc, #368]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543e:	4959      	ldr	r1, [pc, #356]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005452:	4b54      	ldr	r3, [pc, #336]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	4950      	ldr	r1, [pc, #320]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005474:	4b4b      	ldr	r3, [pc, #300]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	4948      	ldr	r1, [pc, #288]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005496:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	493f      	ldr	r1, [pc, #252]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d028      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054b8:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c6:	4937      	ldr	r1, [pc, #220]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d6:	d106      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d8:	4b32      	ldr	r3, [pc, #200]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e2:	60d3      	str	r3, [r2, #12]
 80054e4:	e011      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ee:	d10c      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f8c8 	bl	800568c <RCCEx_PLLSAI1_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d028      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	491f      	ldr	r1, [pc, #124]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005534:	d106      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005536:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005540:	60d3      	str	r3, [r2, #12]
 8005542:	e011      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800554c:	d10c      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	2101      	movs	r1, #1
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f899 	bl	800568c <RCCEx_PLLSAI1_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800555e:	7cfb      	ldrb	r3, [r7, #19]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005564:	7cfb      	ldrb	r3, [r7, #19]
 8005566:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d02b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	4908      	ldr	r1, [pc, #32]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005592:	d109      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a02      	ldr	r2, [pc, #8]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559e:	60d3      	str	r3, [r2, #12]
 80055a0:	e014      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b0:	d10c      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	2101      	movs	r1, #1
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 f867 	bl	800568c <RCCEx_PLLSAI1_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c2:	7cfb      	ldrb	r3, [r7, #19]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d02f      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055d8:	4b2b      	ldr	r3, [pc, #172]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e6:	4928      	ldr	r1, [pc, #160]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f6:	d10d      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	2102      	movs	r1, #2
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f844 	bl	800568c <RCCEx_PLLSAI1_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d014      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	74bb      	strb	r3, [r7, #18]
 8005612:	e011      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561c:	d10c      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3320      	adds	r3, #32
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f925 	bl	8005874 <RCCEx_PLLSAI2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005652:	490d      	ldr	r1, [pc, #52]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005676:	4904      	ldr	r1, [pc, #16]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800567e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000

0800568c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800569a:	4b75      	ldr	r3, [pc, #468]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d018      	beq.n	80056d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056a6:	4b72      	ldr	r3, [pc, #456]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0203 	and.w	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d10d      	bne.n	80056d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
       ||
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056be:	4b6c      	ldr	r3, [pc, #432]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
       ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d047      	beq.n	8005762 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	e044      	b.n	8005762 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d018      	beq.n	8005712 <RCCEx_PLLSAI1_Config+0x86>
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d825      	bhi.n	8005730 <RCCEx_PLLSAI1_Config+0xa4>
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d002      	beq.n	80056ee <RCCEx_PLLSAI1_Config+0x62>
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d009      	beq.n	8005700 <RCCEx_PLLSAI1_Config+0x74>
 80056ec:	e020      	b.n	8005730 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ee:	4b60      	ldr	r3, [pc, #384]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11d      	bne.n	8005736 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fe:	e01a      	b.n	8005736 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005700:	4b5b      	ldr	r3, [pc, #364]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005710:	e013      	b.n	800573a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005712:	4b57      	ldr	r3, [pc, #348]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10f      	bne.n	800573e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800571e:	4b54      	ldr	r3, [pc, #336]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800572e:	e006      	b.n	800573e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      break;
 8005734:	e004      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800573e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005746:	4b4a      	ldr	r3, [pc, #296]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	3b01      	subs	r3, #1
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	430b      	orrs	r3, r1
 800575c:	4944      	ldr	r1, [pc, #272]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575e:	4313      	orrs	r3, r2
 8005760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d17d      	bne.n	8005864 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005768:	4b41      	ldr	r3, [pc, #260]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a40      	ldr	r2, [pc, #256]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005774:	f7fd fb6e 	bl	8002e54 <HAL_GetTick>
 8005778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800577a:	e009      	b.n	8005790 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800577c:	f7fd fb6a 	bl	8002e54 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d902      	bls.n	8005790 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	73fb      	strb	r3, [r7, #15]
        break;
 800578e:	e005      	b.n	800579c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005790:	4b37      	ldr	r3, [pc, #220]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ef      	bne.n	800577c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d160      	bne.n	8005864 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d111      	bne.n	80057cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a8:	4b31      	ldr	r3, [pc, #196]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6892      	ldr	r2, [r2, #8]
 80057b8:	0211      	lsls	r1, r2, #8
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68d2      	ldr	r2, [r2, #12]
 80057be:	0912      	lsrs	r2, r2, #4
 80057c0:	0452      	lsls	r2, r2, #17
 80057c2:	430a      	orrs	r2, r1
 80057c4:	492a      	ldr	r1, [pc, #168]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	610b      	str	r3, [r1, #16]
 80057ca:	e027      	b.n	800581c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d112      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d2:	4b27      	ldr	r3, [pc, #156]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	0211      	lsls	r1, r2, #8
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6912      	ldr	r2, [r2, #16]
 80057e8:	0852      	lsrs	r2, r2, #1
 80057ea:	3a01      	subs	r2, #1
 80057ec:	0552      	lsls	r2, r2, #21
 80057ee:	430a      	orrs	r2, r1
 80057f0:	491f      	ldr	r1, [pc, #124]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	610b      	str	r3, [r1, #16]
 80057f6:	e011      	b.n	800581c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005800:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6892      	ldr	r2, [r2, #8]
 8005808:	0211      	lsls	r1, r2, #8
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6952      	ldr	r2, [r2, #20]
 800580e:	0852      	lsrs	r2, r2, #1
 8005810:	3a01      	subs	r2, #1
 8005812:	0652      	lsls	r2, r2, #25
 8005814:	430a      	orrs	r2, r1
 8005816:	4916      	ldr	r1, [pc, #88]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005826:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fd fb14 	bl	8002e54 <HAL_GetTick>
 800582c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800582e:	e009      	b.n	8005844 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005830:	f7fd fb10 	bl	8002e54 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d902      	bls.n	8005844 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	73fb      	strb	r3, [r7, #15]
          break;
 8005842:	e005      	b.n	8005850 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ef      	beq.n	8005830 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	4904      	ldr	r1, [pc, #16]	; (8005870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005860:	4313      	orrs	r3, r2
 8005862:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000

08005874 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005882:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d018      	beq.n	80058c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800588e:	4b67      	ldr	r3, [pc, #412]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0203 	and.w	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d10d      	bne.n	80058ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
       ||
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058a6:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
       ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d047      	beq.n	800594a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
 80058be:	e044      	b.n	800594a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d018      	beq.n	80058fa <RCCEx_PLLSAI2_Config+0x86>
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d825      	bhi.n	8005918 <RCCEx_PLLSAI2_Config+0xa4>
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d002      	beq.n	80058d6 <RCCEx_PLLSAI2_Config+0x62>
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d009      	beq.n	80058e8 <RCCEx_PLLSAI2_Config+0x74>
 80058d4:	e020      	b.n	8005918 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058d6:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d11d      	bne.n	800591e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e6:	e01a      	b.n	800591e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058e8:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d116      	bne.n	8005922 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f8:	e013      	b.n	8005922 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058fa:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005906:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005916:	e006      	b.n	8005926 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e004      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005926:	bf00      	nop
    }

    if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10d      	bne.n	800594a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800592e:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	3b01      	subs	r3, #1
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	430b      	orrs	r3, r1
 8005944:	4939      	ldr	r1, [pc, #228]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005946:	4313      	orrs	r3, r2
 8005948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d167      	bne.n	8005a20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005950:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a35      	ldr	r2, [pc, #212]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595c:	f7fd fa7a 	bl	8002e54 <HAL_GetTick>
 8005960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005962:	e009      	b.n	8005978 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005964:	f7fd fa76 	bl	8002e54 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d902      	bls.n	8005978 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	73fb      	strb	r3, [r7, #15]
        break;
 8005976:	e005      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005978:	4b2c      	ldr	r3, [pc, #176]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ef      	bne.n	8005964 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d14a      	bne.n	8005a20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d111      	bne.n	80059b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005990:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6892      	ldr	r2, [r2, #8]
 80059a0:	0211      	lsls	r1, r2, #8
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68d2      	ldr	r2, [r2, #12]
 80059a6:	0912      	lsrs	r2, r2, #4
 80059a8:	0452      	lsls	r2, r2, #17
 80059aa:	430a      	orrs	r2, r1
 80059ac:	491f      	ldr	r1, [pc, #124]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	614b      	str	r3, [r1, #20]
 80059b2:	e011      	b.n	80059d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059b4:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6892      	ldr	r2, [r2, #8]
 80059c4:	0211      	lsls	r1, r2, #8
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6912      	ldr	r2, [r2, #16]
 80059ca:	0852      	lsrs	r2, r2, #1
 80059cc:	3a01      	subs	r2, #1
 80059ce:	0652      	lsls	r2, r2, #25
 80059d0:	430a      	orrs	r2, r1
 80059d2:	4916      	ldr	r1, [pc, #88]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd fa36 	bl	8002e54 <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059ea:	e009      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ec:	f7fd fa32 	bl	8002e54 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d902      	bls.n	8005a00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	73fb      	strb	r3, [r7, #15]
          break;
 80059fe:	e005      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ef      	beq.n	80059ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4904      	ldr	r1, [pc, #16]	; (8005a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000

08005a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e040      	b.n	8005ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb ff30 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8c0 	bl	8005bf4 <UART_SetConfig>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e022      	b.n	8005ac4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb3e 	bl	8006108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fbc5 	bl	800624c <UART_CheckIdleState>
 8005ac2:	4603      	mov	r3, r0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 8082 	bne.w	8005bea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Transmit+0x26>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07a      	b.n	8005bec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Transmit+0x38>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e073      	b.n	8005bec <HAL_UART_Transmit+0x120>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2221      	movs	r2, #33	; 0x21
 8005b18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b1a:	f7fd f99b 	bl	8002e54 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b38:	d108      	bne.n	8005b4c <HAL_UART_Transmit+0x80>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e003      	b.n	8005b54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b5c:	e02d      	b.n	8005bba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fbb8 	bl	80062de <UART_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e039      	b.n	8005bec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	3302      	adds	r3, #2
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	e008      	b.n	8005ba8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1cb      	bne.n	8005b5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2140      	movs	r1, #64	; 0x40
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fb84 	bl	80062de <UART_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e005      	b.n	8005bec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	b5b0      	push	{r4, r5, r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4bad      	ldr	r3, [pc, #692]	; (8005ed4 <UART_SetConfig+0x2e0>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	69f9      	ldr	r1, [r7, #28]
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4aa2      	ldr	r2, [pc, #648]	; (8005ed8 <UART_SetConfig+0x2e4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a99      	ldr	r2, [pc, #612]	; (8005edc <UART_SetConfig+0x2e8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d121      	bne.n	8005cbe <UART_SetConfig+0xca>
 8005c7a:	4b99      	ldr	r3, [pc, #612]	; (8005ee0 <UART_SetConfig+0x2ec>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d817      	bhi.n	8005cb8 <UART_SetConfig+0xc4>
 8005c88:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0x9c>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005ca1 	.word	0x08005ca1
 8005c94:	08005cad 	.word	0x08005cad
 8005c98:	08005ca7 	.word	0x08005ca7
 8005c9c:	08005cb3 	.word	0x08005cb3
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	76fb      	strb	r3, [r7, #27]
 8005ca4:	e0e7      	b.n	8005e76 <UART_SetConfig+0x282>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	76fb      	strb	r3, [r7, #27]
 8005caa:	e0e4      	b.n	8005e76 <UART_SetConfig+0x282>
 8005cac:	2304      	movs	r3, #4
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e0e1      	b.n	8005e76 <UART_SetConfig+0x282>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e0de      	b.n	8005e76 <UART_SetConfig+0x282>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e0db      	b.n	8005e76 <UART_SetConfig+0x282>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a88      	ldr	r2, [pc, #544]	; (8005ee4 <UART_SetConfig+0x2f0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d132      	bne.n	8005d2e <UART_SetConfig+0x13a>
 8005cc8:	4b85      	ldr	r3, [pc, #532]	; (8005ee0 <UART_SetConfig+0x2ec>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d828      	bhi.n	8005d28 <UART_SetConfig+0x134>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0xe8>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d1d 	.word	0x08005d1d
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005d17 	.word	0x08005d17
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d29 	.word	0x08005d29
 8005d0c:	08005d23 	.word	0x08005d23
 8005d10:	2300      	movs	r3, #0
 8005d12:	76fb      	strb	r3, [r7, #27]
 8005d14:	e0af      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d16:	2302      	movs	r3, #2
 8005d18:	76fb      	strb	r3, [r7, #27]
 8005d1a:	e0ac      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e0a9      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d22:	2308      	movs	r3, #8
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e0a6      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e0a3      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6d      	ldr	r2, [pc, #436]	; (8005ee8 <UART_SetConfig+0x2f4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d120      	bne.n	8005d7a <UART_SetConfig+0x186>
 8005d38:	4b69      	ldr	r3, [pc, #420]	; (8005ee0 <UART_SetConfig+0x2ec>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	d013      	beq.n	8005d6e <UART_SetConfig+0x17a>
 8005d46:	2b30      	cmp	r3, #48	; 0x30
 8005d48:	d814      	bhi.n	8005d74 <UART_SetConfig+0x180>
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d009      	beq.n	8005d62 <UART_SetConfig+0x16e>
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d810      	bhi.n	8005d74 <UART_SetConfig+0x180>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <UART_SetConfig+0x168>
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d006      	beq.n	8005d68 <UART_SetConfig+0x174>
 8005d5a:	e00b      	b.n	8005d74 <UART_SetConfig+0x180>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	76fb      	strb	r3, [r7, #27]
 8005d60:	e089      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d62:	2302      	movs	r3, #2
 8005d64:	76fb      	strb	r3, [r7, #27]
 8005d66:	e086      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	76fb      	strb	r3, [r7, #27]
 8005d6c:	e083      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d6e:	2308      	movs	r3, #8
 8005d70:	76fb      	strb	r3, [r7, #27]
 8005d72:	e080      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d74:	2310      	movs	r3, #16
 8005d76:	76fb      	strb	r3, [r7, #27]
 8005d78:	e07d      	b.n	8005e76 <UART_SetConfig+0x282>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a5b      	ldr	r2, [pc, #364]	; (8005eec <UART_SetConfig+0x2f8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d120      	bne.n	8005dc6 <UART_SetConfig+0x1d2>
 8005d84:	4b56      	ldr	r3, [pc, #344]	; (8005ee0 <UART_SetConfig+0x2ec>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d90:	d013      	beq.n	8005dba <UART_SetConfig+0x1c6>
 8005d92:	2bc0      	cmp	r3, #192	; 0xc0
 8005d94:	d814      	bhi.n	8005dc0 <UART_SetConfig+0x1cc>
 8005d96:	2b80      	cmp	r3, #128	; 0x80
 8005d98:	d009      	beq.n	8005dae <UART_SetConfig+0x1ba>
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d810      	bhi.n	8005dc0 <UART_SetConfig+0x1cc>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <UART_SetConfig+0x1b4>
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d006      	beq.n	8005db4 <UART_SetConfig+0x1c0>
 8005da6:	e00b      	b.n	8005dc0 <UART_SetConfig+0x1cc>
 8005da8:	2300      	movs	r3, #0
 8005daa:	76fb      	strb	r3, [r7, #27]
 8005dac:	e063      	b.n	8005e76 <UART_SetConfig+0x282>
 8005dae:	2302      	movs	r3, #2
 8005db0:	76fb      	strb	r3, [r7, #27]
 8005db2:	e060      	b.n	8005e76 <UART_SetConfig+0x282>
 8005db4:	2304      	movs	r3, #4
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e05d      	b.n	8005e76 <UART_SetConfig+0x282>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e05a      	b.n	8005e76 <UART_SetConfig+0x282>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e057      	b.n	8005e76 <UART_SetConfig+0x282>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a49      	ldr	r2, [pc, #292]	; (8005ef0 <UART_SetConfig+0x2fc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d125      	bne.n	8005e1c <UART_SetConfig+0x228>
 8005dd0:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <UART_SetConfig+0x2ec>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dde:	d017      	beq.n	8005e10 <UART_SetConfig+0x21c>
 8005de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de4:	d817      	bhi.n	8005e16 <UART_SetConfig+0x222>
 8005de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dea:	d00b      	beq.n	8005e04 <UART_SetConfig+0x210>
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df0:	d811      	bhi.n	8005e16 <UART_SetConfig+0x222>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <UART_SetConfig+0x20a>
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d006      	beq.n	8005e0a <UART_SetConfig+0x216>
 8005dfc:	e00b      	b.n	8005e16 <UART_SetConfig+0x222>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	76fb      	strb	r3, [r7, #27]
 8005e02:	e038      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e04:	2302      	movs	r3, #2
 8005e06:	76fb      	strb	r3, [r7, #27]
 8005e08:	e035      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	76fb      	strb	r3, [r7, #27]
 8005e0e:	e032      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e10:	2308      	movs	r3, #8
 8005e12:	76fb      	strb	r3, [r7, #27]
 8005e14:	e02f      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e16:	2310      	movs	r3, #16
 8005e18:	76fb      	strb	r3, [r7, #27]
 8005e1a:	e02c      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2d      	ldr	r2, [pc, #180]	; (8005ed8 <UART_SetConfig+0x2e4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d125      	bne.n	8005e72 <UART_SetConfig+0x27e>
 8005e26:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <UART_SetConfig+0x2ec>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e34:	d017      	beq.n	8005e66 <UART_SetConfig+0x272>
 8005e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e3a:	d817      	bhi.n	8005e6c <UART_SetConfig+0x278>
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d00b      	beq.n	8005e5a <UART_SetConfig+0x266>
 8005e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e46:	d811      	bhi.n	8005e6c <UART_SetConfig+0x278>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <UART_SetConfig+0x260>
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	d006      	beq.n	8005e60 <UART_SetConfig+0x26c>
 8005e52:	e00b      	b.n	8005e6c <UART_SetConfig+0x278>
 8005e54:	2300      	movs	r3, #0
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e00d      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	76fb      	strb	r3, [r7, #27]
 8005e5e:	e00a      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e60:	2304      	movs	r3, #4
 8005e62:	76fb      	strb	r3, [r7, #27]
 8005e64:	e007      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e66:	2308      	movs	r3, #8
 8005e68:	76fb      	strb	r3, [r7, #27]
 8005e6a:	e004      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	76fb      	strb	r3, [r7, #27]
 8005e70:	e001      	b.n	8005e76 <UART_SetConfig+0x282>
 8005e72:	2310      	movs	r3, #16
 8005e74:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <UART_SetConfig+0x2e4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	f040 8087 	bne.w	8005f90 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e82:	7efb      	ldrb	r3, [r7, #27]
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d837      	bhi.n	8005ef8 <UART_SetConfig+0x304>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x29c>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ef9 	.word	0x08005ef9
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ef9 	.word	0x08005ef9
 8005ea0:	08005ec3 	.word	0x08005ec3
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005ef9 	.word	0x08005ef9
 8005eac:	08005ef9 	.word	0x08005ef9
 8005eb0:	08005ecb 	.word	0x08005ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7ff f874 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005eb8:	6178      	str	r0, [r7, #20]
        break;
 8005eba:	e022      	b.n	8005f02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <UART_SetConfig+0x300>)
 8005ebe:	617b      	str	r3, [r7, #20]
        break;
 8005ec0:	e01f      	b.n	8005f02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ec2:	f7fe ffd5 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8005ec6:	6178      	str	r0, [r7, #20]
        break;
 8005ec8:	e01b      	b.n	8005f02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ece:	617b      	str	r3, [r7, #20]
        break;
 8005ed0:	e017      	b.n	8005f02 <UART_SetConfig+0x30e>
 8005ed2:	bf00      	nop
 8005ed4:	efff69f3 	.word	0xefff69f3
 8005ed8:	40008000 	.word	0x40008000
 8005edc:	40013800 	.word	0x40013800
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40004400 	.word	0x40004400
 8005ee8:	40004800 	.word	0x40004800
 8005eec:	40004c00 	.word	0x40004c00
 8005ef0:	40005000 	.word	0x40005000
 8005ef4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	76bb      	strb	r3, [r7, #26]
        break;
 8005f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80f1 	beq.w	80060ec <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	4413      	add	r3, r2
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d305      	bcc.n	8005f26 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d902      	bls.n	8005f2c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	76bb      	strb	r3, [r7, #26]
 8005f2a:	e0df      	b.n	80060ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f04f 0100 	mov.w	r1, #0
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	020b      	lsls	r3, r1, #8
 8005f3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f42:	0202      	lsls	r2, r0, #8
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	6849      	ldr	r1, [r1, #4]
 8005f48:	0849      	lsrs	r1, r1, #1
 8005f4a:	4608      	mov	r0, r1
 8005f4c:	f04f 0100 	mov.w	r1, #0
 8005f50:	1814      	adds	r4, r2, r0
 8005f52:	eb43 0501 	adc.w	r5, r3, r1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa fe20 	bl	8000ba8 <__aeabi_uldivmod>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f76:	d308      	bcc.n	8005f8a <UART_SetConfig+0x396>
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7e:	d204      	bcs.n	8005f8a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	60da      	str	r2, [r3, #12]
 8005f88:	e0b0      	b.n	80060ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	76bb      	strb	r3, [r7, #26]
 8005f8e:	e0ad      	b.n	80060ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f98:	d15c      	bne.n	8006054 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005f9a:	7efb      	ldrb	r3, [r7, #27]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d828      	bhi.n	8005ff2 <UART_SetConfig+0x3fe>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x3b4>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe ffe8 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	6178      	str	r0, [r7, #20]
        break;
 8005fd2:	e013      	b.n	8005ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fe fffa 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8005fd8:	6178      	str	r0, [r7, #20]
        break;
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b49      	ldr	r3, [pc, #292]	; (8006104 <UART_SetConfig+0x510>)
 8005fde:	617b      	str	r3, [r7, #20]
        break;
 8005fe0:	e00c      	b.n	8005ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fe ff45 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8005fe6:	6178      	str	r0, [r7, #20]
        break;
 8005fe8:	e008      	b.n	8005ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	617b      	str	r3, [r7, #20]
        break;
 8005ff0:	e004      	b.n	8005ffc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	76bb      	strb	r3, [r7, #26]
        break;
 8005ffa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d074      	beq.n	80060ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	005a      	lsls	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	b29b      	uxth	r3, r3
 8006018:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b0f      	cmp	r3, #15
 800601e:	d916      	bls.n	800604e <UART_SetConfig+0x45a>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006026:	d212      	bcs.n	800604e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f023 030f 	bic.w	r3, r3, #15
 8006030:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	b29a      	uxth	r2, r3
 800603e:	89fb      	ldrh	r3, [r7, #14]
 8006040:	4313      	orrs	r3, r2
 8006042:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	89fa      	ldrh	r2, [r7, #14]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e04e      	b.n	80060ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	76bb      	strb	r3, [r7, #26]
 8006052:	e04b      	b.n	80060ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006054:	7efb      	ldrb	r3, [r7, #27]
 8006056:	2b08      	cmp	r3, #8
 8006058:	d827      	bhi.n	80060aa <UART_SetConfig+0x4b6>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x46c>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fe ff8c 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006088:	6178      	str	r0, [r7, #20]
        break;
 800608a:	e013      	b.n	80060b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fe ff9e 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8006090:	6178      	str	r0, [r7, #20]
        break;
 8006092:	e00f      	b.n	80060b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <UART_SetConfig+0x510>)
 8006096:	617b      	str	r3, [r7, #20]
        break;
 8006098:	e00c      	b.n	80060b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fe fee9 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 800609e:	6178      	str	r0, [r7, #20]
        break;
 80060a0:	e008      	b.n	80060b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	617b      	str	r3, [r7, #20]
        break;
 80060a8:	e004      	b.n	80060b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	76bb      	strb	r3, [r7, #26]
        break;
 80060b2:	bf00      	nop
    }

    if (pclk != 0U)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d018      	beq.n	80060ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	085a      	lsrs	r2, r3, #1
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	441a      	add	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b0f      	cmp	r3, #15
 80060d4:	d908      	bls.n	80060e8 <UART_SetConfig+0x4f4>
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060dc:	d204      	bcs.n	80060e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	e001      	b.n	80060ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bdb0      	pop	{r4, r5, r7, pc}
 8006102:	bf00      	nop
 8006104:	00f42400 	.word	0x00f42400

08006108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01a      	beq.n	800621e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006206:	d10a      	bne.n	800621e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  }
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800625c:	f7fc fdfa 	bl	8002e54 <HAL_GetTick>
 8006260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b08      	cmp	r3, #8
 800626e:	d10e      	bne.n	800628e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f82d 	bl	80062de <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e023      	b.n	80062d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b04      	cmp	r3, #4
 800629a:	d10e      	bne.n	80062ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f817 	bl	80062de <UART_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e00d      	b.n	80062d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ee:	e05e      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d05a      	beq.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fc fdac 	bl	8002e54 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <UART_WaitOnFlagUntilTimeout+0x30>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11b      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800631c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e043      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02c      	beq.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006362:	d124      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800636c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800637c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e00f      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d091      	beq.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f9a8 	bl	8006744 <ai_platform_get_activations_map>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d035      	beq.n	8006466 <network_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <network_configure_activations+0x98>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8006400:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <network_configure_activations+0x98>)
 8006402:	2200      	movs	r2, #0
 8006404:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 64);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3340      	adds	r3, #64	; 0x40
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <network_configure_activations+0x9c>)
 800640c:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 64);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3340      	adds	r3, #64	; 0x40
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <network_configure_activations+0x9c>)
 8006414:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <network_configure_activations+0xa0>)
 800641a:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <network_configure_activations+0xa0>)
 8006420:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 704);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <network_configure_activations+0xa4>)
 800642a:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 704);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8006432:	4a12      	ldr	r2, [pc, #72]	; (800647c <network_configure_activations+0xa4>)
 8006434:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4a11      	ldr	r2, [pc, #68]	; (8006480 <network_configure_activations+0xa8>)
 800643a:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <network_configure_activations+0xa8>)
 8006440:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 256);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006448:	4a0e      	ldr	r2, [pc, #56]	; (8006484 <network_configure_activations+0xac>)
 800644a:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006452:	4a0c      	ldr	r2, [pc, #48]	; (8006484 <network_configure_activations+0xac>)
 8006454:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <network_configure_activations+0xb0>)
 8006458:	2200      	movs	r2, #0
 800645a:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <network_configure_activations+0xb0>)
 800645e:	2200      	movs	r2, #0
 8006460:	60da      	str	r2, [r3, #12]
    
    return true;
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <network_configure_activations+0x90>
  }
  return false;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000018 	.word	0x20000018
 8006474:	20000028 	.word	0x20000028
 8006478:	20000038 	.word	0x20000038
 800647c:	20000048 	.word	0x20000048
 8006480:	20000058 	.word	0x20000058
 8006484:	20000068 	.word	0x20000068
 8006488:	20000078 	.word	0x20000078

0800648c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800649a:	f107 030c 	add.w	r3, r7, #12
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f91a 	bl	80066dc <ai_platform_get_weights_map>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8084 	beq.w	80065b8 <network_configure_weights+0x12c>
    /* Updating weights with array addresses */
    
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 80064b0:	4b44      	ldr	r3, [pc, #272]	; (80065c4 <network_configure_weights+0x138>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064b8:	4a42      	ldr	r2, [pc, #264]	; (80065c4 <network_configure_weights+0x138>)
 80064ba:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a41      	ldr	r2, [pc, #260]	; (80065c4 <network_configure_weights+0x138>)
 80064c0:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a3f      	ldr	r2, [pc, #252]	; (80065c4 <network_configure_weights+0x138>)
 80064c6:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 80064c8:	4b3f      	ldr	r3, [pc, #252]	; (80065c8 <network_configure_weights+0x13c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064d0:	4a3d      	ldr	r2, [pc, #244]	; (80065c8 <network_configure_weights+0x13c>)
 80064d2:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 576);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80064da:	4a3b      	ldr	r2, [pc, #236]	; (80065c8 <network_configure_weights+0x13c>)
 80064dc:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 576);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80064e4:	4a38      	ldr	r2, [pc, #224]	; (80065c8 <network_configure_weights+0x13c>)
 80064e6:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80064e8:	4b38      	ldr	r3, [pc, #224]	; (80065cc <network_configure_weights+0x140>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f0:	4a36      	ldr	r2, [pc, #216]	; (80065cc <network_configure_weights+0x140>)
 80064f2:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 640);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064fa:	4a34      	ldr	r2, [pc, #208]	; (80065cc <network_configure_weights+0x140>)
 80064fc:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 640);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006504:	4a31      	ldr	r2, [pc, #196]	; (80065cc <network_configure_weights+0x140>)
 8006506:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006508:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <network_configure_weights+0x144>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006510:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <network_configure_weights+0x144>)
 8006512:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 2176);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 800651a:	4a2d      	ldr	r2, [pc, #180]	; (80065d0 <network_configure_weights+0x144>)
 800651c:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2176);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8006524:	4a2a      	ldr	r2, [pc, #168]	; (80065d0 <network_configure_weights+0x144>)
 8006526:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006528:	4b2a      	ldr	r3, [pc, #168]	; (80065d4 <network_configure_weights+0x148>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006530:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <network_configure_weights+0x148>)
 8006532:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 2208);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800653a:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <network_configure_weights+0x148>)
 800653c:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 2208);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8006544:	4a23      	ldr	r2, [pc, #140]	; (80065d4 <network_configure_weights+0x148>)
 8006546:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006548:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <network_configure_weights+0x14c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006550:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <network_configure_weights+0x14c>)
 8006552:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 47264);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 800655a:	33a0      	adds	r3, #160	; 0xa0
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <network_configure_weights+0x14c>)
 800655e:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 47264);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8006566:	33a0      	adds	r3, #160	; 0xa0
 8006568:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <network_configure_weights+0x14c>)
 800656a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <network_configure_weights+0x150>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006574:	4a19      	ldr	r2, [pc, #100]	; (80065dc <network_configure_weights+0x150>)
 8006576:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 47520);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 800657e:	33a0      	adds	r3, #160	; 0xa0
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <network_configure_weights+0x150>)
 8006582:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 47520);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 800658a:	33a0      	adds	r3, #160	; 0xa0
 800658c:	4a13      	ldr	r2, [pc, #76]	; (80065dc <network_configure_weights+0x150>)
 800658e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006590:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <network_configure_weights+0x154>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006598:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <network_configure_weights+0x154>)
 800659a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 48288);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80065a2:	33a0      	adds	r3, #160	; 0xa0
 80065a4:	4a0e      	ldr	r2, [pc, #56]	; (80065e0 <network_configure_weights+0x154>)
 80065a6:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 48288);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80065ae:	33a0      	adds	r3, #160	; 0xa0
 80065b0:	4a0b      	ldr	r2, [pc, #44]	; (80065e0 <network_configure_weights+0x154>)
 80065b2:	60d3      	str	r3, [r2, #12]
    return true;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <network_configure_weights+0x12e>
  }
  return false;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000088 	.word	0x20000088
 80065c8:	20000098 	.word	0x20000098
 80065cc:	200000a8 	.word	0x200000a8
 80065d0:	200000b8 	.word	0x200000b8
 80065d4:	200000c8 	.word	0x200000c8
 80065d8:	200000d8 	.word	0x200000d8
 80065dc:	200000e8 	.word	0x200000e8
 80065e0:	200000f8 	.word	0x200000f8

080065e4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f8dd 	bl	80067ac <ai_platform_network_get_error>
 80065f2:	4603      	mov	r3, r0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006606:	2300      	movs	r3, #0
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	2304      	movs	r3, #4
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2301      	movs	r3, #1
 8006610:	4a04      	ldr	r2, [pc, #16]	; (8006624 <ai_network_create+0x28>)
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f943 	bl	80068a0 <ai_platform_network_create>
 800661a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	200007a0 	.word	0x200007a0

08006628 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa09 	bl	8006a4c <ai_platform_network_init>
 800663a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <ai_network_init+0x1e>
 8006642:	2300      	movs	r3, #0
 8006644:	e028      	b.n	8006698 <ai_network_init+0x70>

  ai_bool ok = true;
 8006646:	2301      	movs	r3, #1
 8006648:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff ff1d 	bl	800648c <network_configure_weights>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	7afb      	ldrb	r3, [r7, #11]
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff feb6 	bl	80063d8 <network_configure_activations>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 faf6 	bl	8006c70 <ai_platform_network_post_init>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006696:	7afb      	ldrb	r3, [r7, #11]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fb71 	bl	8006d98 <ai_platform_network_process>
 80066b6:	4603      	mov	r3, r0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <ai_network_data_weights_get+0x10>)

}
 80066c6:	4618      	mov	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	08017cd0 	.word	0x08017cd0

080066d4 <_ai_platform_acquire_crc>:
 80066d4:	2001      	movs	r0, #1
 80066d6:	4770      	bx	lr

080066d8 <_ai_platform_release_crc>:
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop

080066dc <ai_platform_get_weights_map>:
 80066dc:	b132      	cbz	r2, 80066ec <ai_platform_get_weights_map+0x10>
 80066de:	6912      	ldr	r2, [r2, #16]
 80066e0:	b122      	cbz	r2, 80066ec <ai_platform_get_weights_map+0x10>
 80066e2:	b110      	cbz	r0, 80066ea <ai_platform_get_weights_map+0xe>
 80066e4:	b921      	cbnz	r1, 80066f0 <ai_platform_get_weights_map+0x14>
 80066e6:	4608      	mov	r0, r1
 80066e8:	4770      	bx	lr
 80066ea:	4770      	bx	lr
 80066ec:	4610      	mov	r0, r2
 80066ee:	4770      	bx	lr
 80066f0:	b470      	push	{r4, r5, r6}
 80066f2:	4b13      	ldr	r3, [pc, #76]	; (8006740 <ai_platform_get_weights_map+0x64>)
 80066f4:	6815      	ldr	r5, [r2, #0]
 80066f6:	429d      	cmp	r5, r3
 80066f8:	d007      	beq.n	800670a <ai_platform_get_weights_map+0x2e>
 80066fa:	6002      	str	r2, [r0, #0]
 80066fc:	f1a1 0001 	sub.w	r0, r1, #1
 8006700:	fab0 f080 	clz	r0, r0
 8006704:	0940      	lsrs	r0, r0, #5
 8006706:	bc70      	pop	{r4, r5, r6}
 8006708:	4770      	bx	lr
 800670a:	6854      	ldr	r4, [r2, #4]
 800670c:	42ac      	cmp	r4, r5
 800670e:	f102 0204 	add.w	r2, r2, #4
 8006712:	d011      	beq.n	8006738 <ai_platform_get_weights_map+0x5c>
 8006714:	1f03      	subs	r3, r0, #4
 8006716:	4616      	mov	r6, r2
 8006718:	2000      	movs	r0, #0
 800671a:	e003      	b.n	8006724 <ai_platform_get_weights_map+0x48>
 800671c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006720:	42ac      	cmp	r4, r5
 8006722:	d009      	beq.n	8006738 <ai_platform_get_weights_map+0x5c>
 8006724:	3001      	adds	r0, #1
 8006726:	4281      	cmp	r1, r0
 8006728:	f843 4f04 	str.w	r4, [r3, #4]!
 800672c:	d1f6      	bne.n	800671c <ai_platform_get_weights_map+0x40>
 800672e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006732:	4b03      	ldr	r3, [pc, #12]	; (8006740 <ai_platform_get_weights_map+0x64>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d001      	beq.n	800673c <ai_platform_get_weights_map+0x60>
 8006738:	2000      	movs	r0, #0
 800673a:	e7e4      	b.n	8006706 <ai_platform_get_weights_map+0x2a>
 800673c:	2001      	movs	r0, #1
 800673e:	e7e2      	b.n	8006706 <ai_platform_get_weights_map+0x2a>
 8006740:	a1facade 	.word	0xa1facade

08006744 <ai_platform_get_activations_map>:
 8006744:	b132      	cbz	r2, 8006754 <ai_platform_get_activations_map+0x10>
 8006746:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006748:	b122      	cbz	r2, 8006754 <ai_platform_get_activations_map+0x10>
 800674a:	b110      	cbz	r0, 8006752 <ai_platform_get_activations_map+0xe>
 800674c:	b921      	cbnz	r1, 8006758 <ai_platform_get_activations_map+0x14>
 800674e:	4608      	mov	r0, r1
 8006750:	4770      	bx	lr
 8006752:	4770      	bx	lr
 8006754:	4610      	mov	r0, r2
 8006756:	4770      	bx	lr
 8006758:	b470      	push	{r4, r5, r6}
 800675a:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <ai_platform_get_activations_map+0x64>)
 800675c:	6815      	ldr	r5, [r2, #0]
 800675e:	429d      	cmp	r5, r3
 8006760:	d007      	beq.n	8006772 <ai_platform_get_activations_map+0x2e>
 8006762:	6002      	str	r2, [r0, #0]
 8006764:	f1a1 0001 	sub.w	r0, r1, #1
 8006768:	fab0 f080 	clz	r0, r0
 800676c:	0940      	lsrs	r0, r0, #5
 800676e:	bc70      	pop	{r4, r5, r6}
 8006770:	4770      	bx	lr
 8006772:	6854      	ldr	r4, [r2, #4]
 8006774:	42ac      	cmp	r4, r5
 8006776:	f102 0204 	add.w	r2, r2, #4
 800677a:	d011      	beq.n	80067a0 <ai_platform_get_activations_map+0x5c>
 800677c:	1f03      	subs	r3, r0, #4
 800677e:	4616      	mov	r6, r2
 8006780:	2000      	movs	r0, #0
 8006782:	e003      	b.n	800678c <ai_platform_get_activations_map+0x48>
 8006784:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006788:	42ac      	cmp	r4, r5
 800678a:	d009      	beq.n	80067a0 <ai_platform_get_activations_map+0x5c>
 800678c:	3001      	adds	r0, #1
 800678e:	4281      	cmp	r1, r0
 8006790:	f843 4f04 	str.w	r4, [r3, #4]!
 8006794:	d1f6      	bne.n	8006784 <ai_platform_get_activations_map+0x40>
 8006796:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800679a:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <ai_platform_get_activations_map+0x64>)
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <ai_platform_get_activations_map+0x60>
 80067a0:	2000      	movs	r0, #0
 80067a2:	e7e4      	b.n	800676e <ai_platform_get_activations_map+0x2a>
 80067a4:	2001      	movs	r0, #1
 80067a6:	e7e2      	b.n	800676e <ai_platform_get_activations_map+0x2a>
 80067a8:	a1facade 	.word	0xa1facade

080067ac <ai_platform_network_get_error>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	b120      	cbz	r0, 80067ba <ai_platform_network_get_error+0xe>
 80067b0:	4b32      	ldr	r3, [pc, #200]	; (800687c <ai_platform_network_get_error+0xd0>)
 80067b2:	6802      	ldr	r2, [r0, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	4604      	mov	r4, r0
 80067b8:	d02e      	beq.n	8006818 <ai_platform_network_get_error+0x6c>
 80067ba:	4a31      	ldr	r2, [pc, #196]	; (8006880 <ai_platform_network_get_error+0xd4>)
 80067bc:	6813      	ldr	r3, [r2, #0]
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	f7ff ff86 	bl	80066d4 <_ai_platform_acquire_crc>
 80067c8:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <ai_platform_network_get_error+0xd8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d4:	d00d      	beq.n	80067f2 <ai_platform_network_get_error+0x46>
 80067d6:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <ai_platform_network_get_error+0xdc>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d1fc      	bne.n	80067dc <ai_platform_network_get_error+0x30>
 80067e2:	4b2a      	ldr	r3, [pc, #168]	; (800688c <ai_platform_network_get_error+0xe0>)
 80067e4:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <ai_platform_network_get_error+0xe4>)
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b2a      	ldr	r3, [pc, #168]	; (8006894 <ai_platform_network_get_error+0xe8>)
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d00d      	beq.n	800680c <ai_platform_network_get_error+0x60>
 80067f0:	e7fe      	b.n	80067f0 <ai_platform_network_get_error+0x44>
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <ai_platform_network_get_error+0xec>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d1fc      	bne.n	80067f8 <ai_platform_network_get_error+0x4c>
 80067fe:	4b27      	ldr	r3, [pc, #156]	; (800689c <ai_platform_network_get_error+0xf0>)
 8006800:	4a23      	ldr	r2, [pc, #140]	; (8006890 <ai_platform_network_get_error+0xe4>)
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b23      	ldr	r3, [pc, #140]	; (8006894 <ai_platform_network_get_error+0xe8>)
 8006808:	429a      	cmp	r2, r3
 800680a:	d104      	bne.n	8006816 <ai_platform_network_get_error+0x6a>
 800680c:	f7ff ff64 	bl	80066d8 <_ai_platform_release_crc>
 8006810:	f241 0010 	movw	r0, #4112	; 0x1010
 8006814:	bd10      	pop	{r4, pc}
 8006816:	e7fe      	b.n	8006816 <ai_platform_network_get_error+0x6a>
 8006818:	4a19      	ldr	r2, [pc, #100]	; (8006880 <ai_platform_network_get_error+0xd4>)
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	f7ff ff57 	bl	80066d4 <_ai_platform_acquire_crc>
 8006826:	4b17      	ldr	r3, [pc, #92]	; (8006884 <ai_platform_network_get_error+0xd8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d00d      	beq.n	8006850 <ai_platform_network_get_error+0xa4>
 8006834:	4b14      	ldr	r3, [pc, #80]	; (8006888 <ai_platform_network_get_error+0xdc>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	2a00      	cmp	r2, #0
 800683e:	d1fc      	bne.n	800683a <ai_platform_network_get_error+0x8e>
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <ai_platform_network_get_error+0xe0>)
 8006842:	4a13      	ldr	r2, [pc, #76]	; (8006890 <ai_platform_network_get_error+0xe4>)
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4b12      	ldr	r3, [pc, #72]	; (8006894 <ai_platform_network_get_error+0xe8>)
 800684a:	429a      	cmp	r2, r3
 800684c:	d00e      	beq.n	800686c <ai_platform_network_get_error+0xc0>
 800684e:	e7fe      	b.n	800684e <ai_platform_network_get_error+0xa2>
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <ai_platform_network_get_error+0xec>)
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	2a00      	cmp	r2, #0
 800685a:	d1fc      	bne.n	8006856 <ai_platform_network_get_error+0xaa>
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <ai_platform_network_get_error+0xf0>)
 800685e:	4a0c      	ldr	r2, [pc, #48]	; (8006890 <ai_platform_network_get_error+0xe4>)
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <ai_platform_network_get_error+0xe8>)
 8006866:	429a      	cmp	r2, r3
 8006868:	d000      	beq.n	800686c <ai_platform_network_get_error+0xc0>
 800686a:	e7fe      	b.n	800686a <ai_platform_network_get_error+0xbe>
 800686c:	f7ff ff34 	bl	80066d8 <_ai_platform_release_crc>
 8006870:	f104 0010 	add.w	r0, r4, #16
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006878:	f000 bd0e 	b.w	8007298 <core_get_error>
 800687c:	a1c00100 	.word	0xa1c00100
 8006880:	e0002000 	.word	0xe0002000
 8006884:	e0042000 	.word	0xe0042000
 8006888:	58024c08 	.word	0x58024c08
 800688c:	58024c00 	.word	0x58024c00
 8006890:	f407a5c2 	.word	0xf407a5c2
 8006894:	b5e8b5cd 	.word	0xb5e8b5cd
 8006898:	40023008 	.word	0x40023008
 800689c:	40023000 	.word	0x40023000

080068a0 <ai_platform_network_create>:
 80068a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	4607      	mov	r7, r0
 80068a8:	4616      	mov	r6, r2
 80068aa:	461d      	mov	r5, r3
 80068ac:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80068b0:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80068b4:	f7ff ff0e 	bl	80066d4 <_ai_platform_acquire_crc>
 80068b8:	b178      	cbz	r0, 80068da <ai_platform_network_create+0x3a>
 80068ba:	4b5a      	ldr	r3, [pc, #360]	; (8006a24 <ai_platform_network_create+0x184>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c6:	4602      	mov	r2, r0
 80068c8:	d00c      	beq.n	80068e4 <ai_platform_network_create+0x44>
 80068ca:	4b57      	ldr	r3, [pc, #348]	; (8006a28 <ai_platform_network_create+0x188>)
 80068cc:	2118      	movs	r1, #24
 80068ce:	6019      	str	r1, [r3, #0]
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	2918      	cmp	r1, #24
 80068d4:	d034      	beq.n	8006940 <ai_platform_network_create+0xa0>
 80068d6:	f7ff feff 	bl	80066d8 <_ai_platform_release_crc>
 80068da:	f241 0033 	movw	r0, #4147	; 0x1033
 80068de:	b002      	add	sp, #8
 80068e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e4:	4b51      	ldr	r3, [pc, #324]	; (8006a2c <ai_platform_network_create+0x18c>)
 80068e6:	2101      	movs	r1, #1
 80068e8:	6019      	str	r1, [r3, #0]
 80068ea:	2114      	movs	r1, #20
 80068ec:	e001      	b.n	80068f2 <ai_platform_network_create+0x52>
 80068ee:	3901      	subs	r1, #1
 80068f0:	d002      	beq.n	80068f8 <ai_platform_network_create+0x58>
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d1fa      	bne.n	80068ee <ai_platform_network_create+0x4e>
 80068f8:	4b4c      	ldr	r3, [pc, #304]	; (8006a2c <ai_platform_network_create+0x18c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	b9f3      	cbnz	r3, 800693c <ai_platform_network_create+0x9c>
 80068fe:	4610      	mov	r0, r2
 8006900:	f7ff feea 	bl	80066d8 <_ai_platform_release_crc>
 8006904:	4a4a      	ldr	r2, [pc, #296]	; (8006a30 <ai_platform_network_create+0x190>)
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	f7ff fee1 	bl	80066d4 <_ai_platform_acquire_crc>
 8006912:	4b44      	ldr	r3, [pc, #272]	; (8006a24 <ai_platform_network_create+0x184>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691e:	d015      	beq.n	800694c <ai_platform_network_create+0xac>
 8006920:	4b41      	ldr	r3, [pc, #260]	; (8006a28 <ai_platform_network_create+0x188>)
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	2a00      	cmp	r2, #0
 800692a:	d1fc      	bne.n	8006926 <ai_platform_network_create+0x86>
 800692c:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <ai_platform_network_create+0x194>)
 800692e:	4a42      	ldr	r2, [pc, #264]	; (8006a38 <ai_platform_network_create+0x198>)
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b41      	ldr	r3, [pc, #260]	; (8006a3c <ai_platform_network_create+0x19c>)
 8006936:	429a      	cmp	r2, r3
 8006938:	d016      	beq.n	8006968 <ai_platform_network_create+0xc8>
 800693a:	e7fe      	b.n	800693a <ai_platform_network_create+0x9a>
 800693c:	4610      	mov	r0, r2
 800693e:	e7ca      	b.n	80068d6 <ai_platform_network_create+0x36>
 8006940:	2101      	movs	r1, #1
 8006942:	6019      	str	r1, [r3, #0]
 8006944:	6819      	ldr	r1, [r3, #0]
 8006946:	2900      	cmp	r1, #0
 8006948:	d1fc      	bne.n	8006944 <ai_platform_network_create+0xa4>
 800694a:	e7d8      	b.n	80068fe <ai_platform_network_create+0x5e>
 800694c:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <ai_platform_network_create+0x18c>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	2a00      	cmp	r2, #0
 8006956:	d1fc      	bne.n	8006952 <ai_platform_network_create+0xb2>
 8006958:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <ai_platform_network_create+0x1a0>)
 800695a:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <ai_platform_network_create+0x198>)
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b36      	ldr	r3, [pc, #216]	; (8006a3c <ai_platform_network_create+0x19c>)
 8006962:	429a      	cmp	r2, r3
 8006964:	d000      	beq.n	8006968 <ai_platform_network_create+0xc8>
 8006966:	e7fe      	b.n	8006966 <ai_platform_network_create+0xc6>
 8006968:	f7ff feb6 	bl	80066d8 <_ai_platform_release_crc>
 800696c:	b1af      	cbz	r7, 800699a <ai_platform_network_create+0xfa>
 800696e:	4b35      	ldr	r3, [pc, #212]	; (8006a44 <ai_platform_network_create+0x1a4>)
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	603e      	str	r6, [r7, #0]
 8006974:	f000 fc8e 	bl	8007294 <core_init>
 8006978:	b990      	cbnz	r0, 80069a0 <ai_platform_network_create+0x100>
 800697a:	062d      	lsls	r5, r5, #24
 800697c:	0424      	lsls	r4, r4, #16
 800697e:	2230      	movs	r2, #48	; 0x30
 8006980:	2300      	movs	r3, #0
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	2110      	movs	r1, #16
 8006986:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800698a:	2000      	movs	r0, #0
 800698c:	432b      	orrs	r3, r5
 800698e:	f362 0007 	bfi	r0, r2, #0, #8
 8006992:	6473      	str	r3, [r6, #68]	; 0x44
 8006994:	f361 201f 	bfi	r0, r1, #8, #24
 8006998:	e7a1      	b.n	80068de <ai_platform_network_create+0x3e>
 800699a:	f241 0010 	movw	r0, #4112	; 0x1010
 800699e:	e79e      	b.n	80068de <ai_platform_network_create+0x3e>
 80069a0:	4a23      	ldr	r2, [pc, #140]	; (8006a30 <ai_platform_network_create+0x190>)
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	f023 0301 	bic.w	r3, r3, #1
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	f7ff fe93 	bl	80066d4 <_ai_platform_acquire_crc>
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <ai_platform_network_create+0x184>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ba:	d00d      	beq.n	80069d8 <ai_platform_network_create+0x138>
 80069bc:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <ai_platform_network_create+0x188>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	d1fc      	bne.n	80069c2 <ai_platform_network_create+0x122>
 80069c8:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <ai_platform_network_create+0x194>)
 80069ca:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <ai_platform_network_create+0x198>)
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <ai_platform_network_create+0x19c>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d00e      	beq.n	80069f4 <ai_platform_network_create+0x154>
 80069d6:	e7fe      	b.n	80069d6 <ai_platform_network_create+0x136>
 80069d8:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <ai_platform_network_create+0x18c>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	d1fc      	bne.n	80069de <ai_platform_network_create+0x13e>
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <ai_platform_network_create+0x1a0>)
 80069e6:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <ai_platform_network_create+0x198>)
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <ai_platform_network_create+0x19c>)
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d000      	beq.n	80069f4 <ai_platform_network_create+0x154>
 80069f2:	e7fe      	b.n	80069f2 <ai_platform_network_create+0x152>
 80069f4:	062d      	lsls	r5, r5, #24
 80069f6:	0424      	lsls	r4, r4, #16
 80069f8:	f7ff fe6e 	bl	80066d8 <_ai_platform_release_crc>
 80069fc:	ea45 0304 	orr.w	r3, r5, r4
 8006a00:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006a04:	d001      	beq.n	8006a0a <ai_platform_network_create+0x16a>
 8006a06:	2201      	movs	r2, #1
 8006a08:	e7ba      	b.n	8006980 <ai_platform_network_create+0xe0>
 8006a0a:	a802      	add	r0, sp, #8
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <ai_platform_network_create+0x1a8>)
 8006a0e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006a12:	f002 fa25 	bl	8008e60 <ai_check_custom_types>
 8006a16:	b110      	cbz	r0, 8006a1e <ai_platform_network_create+0x17e>
 8006a18:	2100      	movs	r1, #0
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	e7b3      	b.n	8006986 <ai_platform_network_create+0xe6>
 8006a1e:	2202      	movs	r2, #2
 8006a20:	e7ae      	b.n	8006980 <ai_platform_network_create+0xe0>
 8006a22:	bf00      	nop
 8006a24:	e0042000 	.word	0xe0042000
 8006a28:	58024c08 	.word	0x58024c08
 8006a2c:	40023008 	.word	0x40023008
 8006a30:	e0002000 	.word	0xe0002000
 8006a34:	58024c00 	.word	0x58024c00
 8006a38:	f407a5c2 	.word	0xf407a5c2
 8006a3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a40:	40023000 	.word	0x40023000
 8006a44:	a1c00100 	.word	0xa1c00100
 8006a48:	84048403 	.word	0x84048403

08006a4c <ai_platform_network_init>:
 8006a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d04d      	beq.n	8006af0 <ai_platform_network_init+0xa4>
 8006a54:	4b7c      	ldr	r3, [pc, #496]	; (8006c48 <ai_platform_network_init+0x1fc>)
 8006a56:	6802      	ldr	r2, [r0, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	d148      	bne.n	8006af0 <ai_platform_network_init+0xa4>
 8006a5e:	4a7b      	ldr	r2, [pc, #492]	; (8006c4c <ai_platform_network_init+0x200>)
 8006a60:	6813      	ldr	r3, [r2, #0]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	460d      	mov	r5, r1
 8006a6a:	f7ff fe33 	bl	80066d4 <_ai_platform_acquire_crc>
 8006a6e:	4b78      	ldr	r3, [pc, #480]	; (8006c50 <ai_platform_network_init+0x204>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7a:	d00d      	beq.n	8006a98 <ai_platform_network_init+0x4c>
 8006a7c:	4b75      	ldr	r3, [pc, #468]	; (8006c54 <ai_platform_network_init+0x208>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d1fc      	bne.n	8006a82 <ai_platform_network_init+0x36>
 8006a88:	4b73      	ldr	r3, [pc, #460]	; (8006c58 <ai_platform_network_init+0x20c>)
 8006a8a:	4a74      	ldr	r2, [pc, #464]	; (8006c5c <ai_platform_network_init+0x210>)
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4b73      	ldr	r3, [pc, #460]	; (8006c60 <ai_platform_network_init+0x214>)
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d00d      	beq.n	8006ab2 <ai_platform_network_init+0x66>
 8006a96:	e7fe      	b.n	8006a96 <ai_platform_network_init+0x4a>
 8006a98:	4b72      	ldr	r3, [pc, #456]	; (8006c64 <ai_platform_network_init+0x218>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d1fc      	bne.n	8006a9e <ai_platform_network_init+0x52>
 8006aa4:	4b70      	ldr	r3, [pc, #448]	; (8006c68 <ai_platform_network_init+0x21c>)
 8006aa6:	4a6d      	ldr	r2, [pc, #436]	; (8006c5c <ai_platform_network_init+0x210>)
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b6c      	ldr	r3, [pc, #432]	; (8006c60 <ai_platform_network_init+0x214>)
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d11d      	bne.n	8006aee <ai_platform_network_init+0xa2>
 8006ab2:	f7ff fe11 	bl	80066d8 <_ai_platform_release_crc>
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	d076      	beq.n	8006ba8 <ai_platform_network_init+0x15c>
 8006aba:	4b6c      	ldr	r3, [pc, #432]	; (8006c6c <ai_platform_network_init+0x220>)
 8006abc:	682a      	ldr	r2, [r5, #0]
 8006abe:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d030      	beq.n	8006b28 <ai_platform_network_init+0xdc>
 8006ac6:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006ac8:	46a9      	mov	r9, r5
 8006aca:	f105 0118 	add.w	r1, r5, #24
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	f000 8095 	beq.w	8006bfe <ai_platform_network_init+0x1b2>
 8006ad4:	f1bc 0f00 	cmp.w	ip, #0
 8006ad8:	f000 80a4 	beq.w	8006c24 <ai_platform_network_init+0x1d8>
 8006adc:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8006ae0:	f1b8 0f01 	cmp.w	r8, #1
 8006ae4:	d16a      	bne.n	8006bbc <ai_platform_network_init+0x170>
 8006ae6:	2700      	movs	r7, #0
 8006ae8:	468c      	mov	ip, r1
 8006aea:	83a7      	strh	r7, [r4, #28]
 8006aec:	e028      	b.n	8006b40 <ai_platform_network_init+0xf4>
 8006aee:	e7fe      	b.n	8006aee <ai_platform_network_init+0xa2>
 8006af0:	4a56      	ldr	r2, [pc, #344]	; (8006c4c <ai_platform_network_init+0x200>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	f7ff fdeb 	bl	80066d4 <_ai_platform_acquire_crc>
 8006afe:	4b54      	ldr	r3, [pc, #336]	; (8006c50 <ai_platform_network_init+0x204>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0a:	d067      	beq.n	8006bdc <ai_platform_network_init+0x190>
 8006b0c:	4b51      	ldr	r3, [pc, #324]	; (8006c54 <ai_platform_network_init+0x208>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	d1fc      	bne.n	8006b12 <ai_platform_network_init+0xc6>
 8006b18:	4b4f      	ldr	r3, [pc, #316]	; (8006c58 <ai_platform_network_init+0x20c>)
 8006b1a:	4a50      	ldr	r2, [pc, #320]	; (8006c5c <ai_platform_network_init+0x210>)
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4b4f      	ldr	r3, [pc, #316]	; (8006c60 <ai_platform_network_init+0x214>)
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d067      	beq.n	8006bf6 <ai_platform_network_init+0x1aa>
 8006b26:	e7fe      	b.n	8006b26 <ai_platform_network_init+0xda>
 8006b28:	8be1      	ldrh	r1, [r4, #30]
 8006b2a:	88eb      	ldrh	r3, [r5, #6]
 8006b2c:	89af      	ldrh	r7, [r5, #12]
 8006b2e:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8006b32:	88aa      	ldrh	r2, [r5, #4]
 8006b34:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	d13f      	bne.n	8006bbc <ai_platform_network_init+0x170>
 8006b3c:	83a2      	strh	r2, [r4, #28]
 8006b3e:	b19b      	cbz	r3, 8006b68 <ai_platform_network_init+0x11c>
 8006b40:	f04f 0e00 	mov.w	lr, #0
 8006b44:	46f2      	mov	sl, lr
 8006b46:	eb09 060e 	add.w	r6, r9, lr
 8006b4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006b4c:	6a25      	ldr	r5, [r4, #32]
 8006b4e:	4475      	add	r5, lr
 8006b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b52:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006b56:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b5a:	8be3      	ldrh	r3, [r4, #30]
 8006b5c:	f10a 0a01 	add.w	sl, sl, #1
 8006b60:	459a      	cmp	sl, r3
 8006b62:	f10e 0e18 	add.w	lr, lr, #24
 8006b66:	d3ee      	bcc.n	8006b46 <ai_platform_network_init+0xfa>
 8006b68:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006b6a:	4598      	cmp	r8, r3
 8006b6c:	d12e      	bne.n	8006bcc <ai_platform_network_init+0x180>
 8006b6e:	84a7      	strh	r7, [r4, #36]	; 0x24
 8006b70:	f1b8 0f00 	cmp.w	r8, #0
 8006b74:	d012      	beq.n	8006b9c <ai_platform_network_init+0x150>
 8006b76:	2700      	movs	r7, #0
 8006b78:	46be      	mov	lr, r7
 8006b7a:	eb0c 0607 	add.w	r6, ip, r7
 8006b7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006b80:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006b82:	443d      	add	r5, r7
 8006b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b86:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006b8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006b90:	f10e 0e01 	add.w	lr, lr, #1
 8006b94:	459e      	cmp	lr, r3
 8006b96:	f107 0718 	add.w	r7, r7, #24
 8006b9a:	d3ee      	bcc.n	8006b7a <ai_platform_network_init+0x12e>
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	60e3      	str	r3, [r4, #12]
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f002 f987 	bl	8008eb4 <ai_layers_init_all>
 8006ba6:	e006      	b.n	8006bb6 <ai_platform_network_init+0x16a>
 8006ba8:	f104 0010 	add.w	r0, r4, #16
 8006bac:	2211      	movs	r2, #17
 8006bae:	2110      	movs	r1, #16
 8006bb0:	462c      	mov	r4, r5
 8006bb2:	f000 fb77 	bl	80072a4 <core_set_error>
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	f104 0010 	add.w	r0, r4, #16
 8006bc0:	2212      	movs	r2, #18
 8006bc2:	2116      	movs	r1, #22
 8006bc4:	f000 fb6e 	bl	80072a4 <core_set_error>
 8006bc8:	2400      	movs	r4, #0
 8006bca:	e7f4      	b.n	8006bb6 <ai_platform_network_init+0x16a>
 8006bcc:	f104 0010 	add.w	r0, r4, #16
 8006bd0:	2213      	movs	r2, #19
 8006bd2:	2116      	movs	r1, #22
 8006bd4:	f000 fb66 	bl	80072a4 <core_set_error>
 8006bd8:	2400      	movs	r4, #0
 8006bda:	e7ec      	b.n	8006bb6 <ai_platform_network_init+0x16a>
 8006bdc:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <ai_platform_network_init+0x218>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	d1fc      	bne.n	8006be2 <ai_platform_network_init+0x196>
 8006be8:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <ai_platform_network_init+0x21c>)
 8006bea:	4a1c      	ldr	r2, [pc, #112]	; (8006c5c <ai_platform_network_init+0x210>)
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <ai_platform_network_init+0x214>)
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d115      	bne.n	8006c22 <ai_platform_network_init+0x1d6>
 8006bf6:	f7ff fd6f 	bl	80066d8 <_ai_platform_release_crc>
 8006bfa:	2400      	movs	r4, #0
 8006bfc:	e7db      	b.n	8006bb6 <ai_platform_network_init+0x16a>
 8006bfe:	8c28      	ldrh	r0, [r5, #32]
 8006c00:	8bea      	ldrh	r2, [r5, #30]
 8006c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c04:	fb02 f200 	mul.w	r2, r2, r0
 8006c08:	fb03 f302 	mul.w	r3, r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f43f af61 	beq.w	8006ad4 <ai_platform_network_init+0x88>
 8006c12:	f104 0010 	add.w	r0, r4, #16
 8006c16:	2213      	movs	r2, #19
 8006c18:	2110      	movs	r1, #16
 8006c1a:	4634      	mov	r4, r6
 8006c1c:	f000 fb42 	bl	80072a4 <core_set_error>
 8006c20:	e7c9      	b.n	8006bb6 <ai_platform_network_init+0x16a>
 8006c22:	e7fe      	b.n	8006c22 <ai_platform_network_init+0x1d6>
 8006c24:	8928      	ldrh	r0, [r5, #8]
 8006c26:	88ea      	ldrh	r2, [r5, #6]
 8006c28:	68eb      	ldr	r3, [r5, #12]
 8006c2a:	fb02 f200 	mul.w	r2, r2, r0
 8006c2e:	fb03 f302 	mul.w	r3, r3, r2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f43f af52 	beq.w	8006adc <ai_platform_network_init+0x90>
 8006c38:	f104 0010 	add.w	r0, r4, #16
 8006c3c:	2212      	movs	r2, #18
 8006c3e:	2110      	movs	r1, #16
 8006c40:	4664      	mov	r4, ip
 8006c42:	f000 fb2f 	bl	80072a4 <core_set_error>
 8006c46:	e7b6      	b.n	8006bb6 <ai_platform_network_init+0x16a>
 8006c48:	a1c00100 	.word	0xa1c00100
 8006c4c:	e0002000 	.word	0xe0002000
 8006c50:	e0042000 	.word	0xe0042000
 8006c54:	58024c08 	.word	0x58024c08
 8006c58:	58024c00 	.word	0x58024c00
 8006c5c:	f407a5c2 	.word	0xf407a5c2
 8006c60:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c64:	40023008 	.word	0x40023008
 8006c68:	40023000 	.word	0x40023000
 8006c6c:	a1facade 	.word	0xa1facade

08006c70 <ai_platform_network_post_init>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	b120      	cbz	r0, 8006c7e <ai_platform_network_post_init+0xe>
 8006c74:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <ai_platform_network_post_init+0x104>)
 8006c76:	6802      	ldr	r2, [r0, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	d02d      	beq.n	8006cda <ai_platform_network_post_init+0x6a>
 8006c7e:	4a3e      	ldr	r2, [pc, #248]	; (8006d78 <ai_platform_network_post_init+0x108>)
 8006c80:	6813      	ldr	r3, [r2, #0]
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	f7ff fd24 	bl	80066d4 <_ai_platform_acquire_crc>
 8006c8c:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <ai_platform_network_post_init+0x10c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c98:	d00d      	beq.n	8006cb6 <ai_platform_network_post_init+0x46>
 8006c9a:	4b39      	ldr	r3, [pc, #228]	; (8006d80 <ai_platform_network_post_init+0x110>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	d1fc      	bne.n	8006ca0 <ai_platform_network_post_init+0x30>
 8006ca6:	4b37      	ldr	r3, [pc, #220]	; (8006d84 <ai_platform_network_post_init+0x114>)
 8006ca8:	4a37      	ldr	r2, [pc, #220]	; (8006d88 <ai_platform_network_post_init+0x118>)
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b37      	ldr	r3, [pc, #220]	; (8006d8c <ai_platform_network_post_init+0x11c>)
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d00d      	beq.n	8006cd0 <ai_platform_network_post_init+0x60>
 8006cb4:	e7fe      	b.n	8006cb4 <ai_platform_network_post_init+0x44>
 8006cb6:	4b36      	ldr	r3, [pc, #216]	; (8006d90 <ai_platform_network_post_init+0x120>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d1fc      	bne.n	8006cbc <ai_platform_network_post_init+0x4c>
 8006cc2:	4b34      	ldr	r3, [pc, #208]	; (8006d94 <ai_platform_network_post_init+0x124>)
 8006cc4:	4a30      	ldr	r2, [pc, #192]	; (8006d88 <ai_platform_network_post_init+0x118>)
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b30      	ldr	r3, [pc, #192]	; (8006d8c <ai_platform_network_post_init+0x11c>)
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d103      	bne.n	8006cd8 <ai_platform_network_post_init+0x68>
 8006cd0:	f7ff fd02 	bl	80066d8 <_ai_platform_release_crc>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	e7fe      	b.n	8006cd8 <ai_platform_network_post_init+0x68>
 8006cda:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <ai_platform_network_post_init+0x108>)
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	f7ff fcf6 	bl	80066d4 <_ai_platform_acquire_crc>
 8006ce8:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <ai_platform_network_post_init+0x10c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf4:	d00d      	beq.n	8006d12 <ai_platform_network_post_init+0xa2>
 8006cf6:	4b22      	ldr	r3, [pc, #136]	; (8006d80 <ai_platform_network_post_init+0x110>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d1fc      	bne.n	8006cfc <ai_platform_network_post_init+0x8c>
 8006d02:	4b20      	ldr	r3, [pc, #128]	; (8006d84 <ai_platform_network_post_init+0x114>)
 8006d04:	4a20      	ldr	r2, [pc, #128]	; (8006d88 <ai_platform_network_post_init+0x118>)
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b20      	ldr	r3, [pc, #128]	; (8006d8c <ai_platform_network_post_init+0x11c>)
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d00e      	beq.n	8006d2e <ai_platform_network_post_init+0xbe>
 8006d10:	e7fe      	b.n	8006d10 <ai_platform_network_post_init+0xa0>
 8006d12:	4b1f      	ldr	r3, [pc, #124]	; (8006d90 <ai_platform_network_post_init+0x120>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	d1fc      	bne.n	8006d18 <ai_platform_network_post_init+0xa8>
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <ai_platform_network_post_init+0x124>)
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <ai_platform_network_post_init+0x118>)
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <ai_platform_network_post_init+0x11c>)
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d000      	beq.n	8006d2e <ai_platform_network_post_init+0xbe>
 8006d2c:	e7fe      	b.n	8006d2c <ai_platform_network_post_init+0xbc>
 8006d2e:	f7ff fcd3 	bl	80066d8 <_ai_platform_release_crc>
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	f013 0502 	ands.w	r5, r3, #2
 8006d38:	d011      	beq.n	8006d5e <ai_platform_network_post_init+0xee>
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f002 f8ce 	bl	8008edc <ai_layers_post_init_all>
 8006d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d42:	b1a3      	cbz	r3, 8006d6e <ai_platform_network_post_init+0xfe>
 8006d44:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006d46:	b195      	cbz	r5, 8006d6e <ai_platform_network_post_init+0xfe>
 8006d48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	4798      	blx	r3
 8006d50:	692b      	ldr	r3, [r5, #16]
 8006d52:	42ab      	cmp	r3, r5
 8006d54:	d00b      	beq.n	8006d6e <ai_platform_network_post_init+0xfe>
 8006d56:	461d      	mov	r5, r3
 8006d58:	b14b      	cbz	r3, 8006d6e <ai_platform_network_post_init+0xfe>
 8006d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d5c:	e7f4      	b.n	8006d48 <ai_platform_network_post_init+0xd8>
 8006d5e:	f104 0010 	add.w	r0, r4, #16
 8006d62:	2210      	movs	r2, #16
 8006d64:	2111      	movs	r1, #17
 8006d66:	f000 fa9d 	bl	80072a4 <core_set_error>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	bd38      	pop	{r3, r4, r5, pc}
 8006d6e:	2001      	movs	r0, #1
 8006d70:	bd38      	pop	{r3, r4, r5, pc}
 8006d72:	bf00      	nop
 8006d74:	a1c00100 	.word	0xa1c00100
 8006d78:	e0002000 	.word	0xe0002000
 8006d7c:	e0042000 	.word	0xe0042000
 8006d80:	58024c08 	.word	0x58024c08
 8006d84:	58024c00 	.word	0x58024c00
 8006d88:	f407a5c2 	.word	0xf407a5c2
 8006d8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d90:	40023008 	.word	0x40023008
 8006d94:	40023000 	.word	0x40023000

08006d98 <ai_platform_network_process>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	460d      	mov	r5, r1
 8006da0:	9202      	str	r2, [sp, #8]
 8006da2:	4604      	mov	r4, r0
 8006da4:	b120      	cbz	r0, 8006db0 <ai_platform_network_process+0x18>
 8006da6:	4b7b      	ldr	r3, [pc, #492]	; (8006f94 <ai_platform_network_process+0x1fc>)
 8006da8:	6802      	ldr	r2, [r0, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	bf18      	it	ne
 8006dae:	2400      	movne	r4, #0
 8006db0:	4a79      	ldr	r2, [pc, #484]	; (8006f98 <ai_platform_network_process+0x200>)
 8006db2:	6813      	ldr	r3, [r2, #0]
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	f7ff fc8b 	bl	80066d4 <_ai_platform_acquire_crc>
 8006dbe:	4b77      	ldr	r3, [pc, #476]	; (8006f9c <ai_platform_network_process+0x204>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	d00d      	beq.n	8006de8 <ai_platform_network_process+0x50>
 8006dcc:	4b74      	ldr	r3, [pc, #464]	; (8006fa0 <ai_platform_network_process+0x208>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d1fc      	bne.n	8006dd2 <ai_platform_network_process+0x3a>
 8006dd8:	4b72      	ldr	r3, [pc, #456]	; (8006fa4 <ai_platform_network_process+0x20c>)
 8006dda:	4a73      	ldr	r2, [pc, #460]	; (8006fa8 <ai_platform_network_process+0x210>)
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b72      	ldr	r3, [pc, #456]	; (8006fac <ai_platform_network_process+0x214>)
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d00e      	beq.n	8006e04 <ai_platform_network_process+0x6c>
 8006de6:	e7fe      	b.n	8006de6 <ai_platform_network_process+0x4e>
 8006de8:	4b71      	ldr	r3, [pc, #452]	; (8006fb0 <ai_platform_network_process+0x218>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	d1fc      	bne.n	8006dee <ai_platform_network_process+0x56>
 8006df4:	4b6f      	ldr	r3, [pc, #444]	; (8006fb4 <ai_platform_network_process+0x21c>)
 8006df6:	4a6c      	ldr	r2, [pc, #432]	; (8006fa8 <ai_platform_network_process+0x210>)
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b6b      	ldr	r3, [pc, #428]	; (8006fac <ai_platform_network_process+0x214>)
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d000      	beq.n	8006e04 <ai_platform_network_process+0x6c>
 8006e02:	e7fe      	b.n	8006e02 <ai_platform_network_process+0x6a>
 8006e04:	f7ff fc68 	bl	80066d8 <_ai_platform_release_crc>
 8006e08:	2c00      	cmp	r4, #0
 8006e0a:	f000 808e 	beq.w	8006f2a <ai_platform_network_process+0x192>
 8006e0e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	f040 823c 	bne.w	800728e <ai_platform_network_process+0x4f6>
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	f04f 0b00 	mov.w	fp, #0
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	f8c4 b014 	str.w	fp, [r4, #20]
 8006e26:	f040 822b 	bne.w	8007280 <ai_platform_network_process+0x4e8>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	f000 80a8 	beq.w	8006f80 <ai_platform_network_process+0x1e8>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	f000 80a5 	beq.w	8006f80 <ai_platform_network_process+0x1e8>
 8006e36:	883b      	ldrh	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80a1 	beq.w	8006f80 <ai_platform_network_process+0x1e8>
 8006e3e:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8006e42:	9401      	str	r4, [sp, #4]
 8006e44:	46d8      	mov	r8, fp
 8006e46:	4598      	cmp	r8, r3
 8006e48:	f080 80b6 	bcs.w	8006fb8 <ai_platform_network_process+0x220>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80b2 	beq.w	8006fb8 <ai_platform_network_process+0x220>
 8006e54:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006e58:	2e00      	cmp	r6, #0
 8006e5a:	f000 80ad 	beq.w	8006fb8 <ai_platform_network_process+0x220>
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9303      	str	r3, [sp, #12]
 8006e64:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006e68:	eb13 0a04 	adds.w	sl, r3, r4
 8006e6c:	f000 8087 	beq.w	8006f7e <ai_platform_network_process+0x1e6>
 8006e70:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006e74:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006e78:	69b0      	ldr	r0, [r6, #24]
 8006e7a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006e7e:	6841      	ldr	r1, [r0, #4]
 8006e80:	fb0b f30e 	mul.w	r3, fp, lr
 8006e84:	fb0c f303 	mul.w	r3, ip, r3
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	d36e      	bcc.n	8006f6a <ai_platform_network_process+0x1d2>
 8006e8c:	68f3      	ldr	r3, [r6, #12]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	455a      	cmp	r2, fp
 8006e92:	d16a      	bne.n	8006f6a <ai_platform_network_process+0x1d2>
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	4572      	cmp	r2, lr
 8006e98:	d167      	bne.n	8006f6a <ai_platform_network_process+0x1d2>
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	459c      	cmp	ip, r3
 8006e9e:	d164      	bne.n	8006f6a <ai_platform_network_process+0x1d2>
 8006ea0:	6800      	ldr	r0, [r0, #0]
 8006ea2:	f002 f8d9 	bl	8009058 <ai_array_get_byte_size>
 8006ea6:	68f2      	ldr	r2, [r6, #12]
 8006ea8:	6973      	ldr	r3, [r6, #20]
 8006eaa:	68d2      	ldr	r2, [r2, #12]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	fb03 f302 	mul.w	r3, r3, r2
 8006eb2:	4298      	cmp	r0, r3
 8006eb4:	d359      	bcc.n	8006f6a <ai_platform_network_process+0x1d2>
 8006eb6:	69b3      	ldr	r3, [r6, #24]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f002 f875 	bl	8008fa8 <ai_array_to_buffer_fmt>
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	4043      	eors	r3, r0
 8006ec2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006ec6:	d146      	bne.n	8006f56 <ai_platform_network_process+0x1be>
 8006ec8:	692b      	ldr	r3, [r5, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d03a      	beq.n	8006f44 <ai_platform_network_process+0x1ac>
 8006ece:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006ed2:	f1bb 0f00 	cmp.w	fp, #0
 8006ed6:	d02d      	beq.n	8006f34 <ai_platform_network_process+0x19c>
 8006ed8:	68f2      	ldr	r2, [r6, #12]
 8006eda:	6973      	ldr	r3, [r6, #20]
 8006edc:	68d1      	ldr	r1, [r2, #12]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	fb02 f201 	mul.w	r2, r2, r1
 8006ee4:	f8ca 2008 	str.w	r2, [sl, #8]
 8006ee8:	88ab      	ldrh	r3, [r5, #4]
 8006eea:	fb02 f203 	mul.w	r2, r2, r3
 8006eee:	f8ca 200c 	str.w	r2, [sl, #12]
 8006ef2:	6929      	ldr	r1, [r5, #16]
 8006ef4:	f8ca 1004 	str.w	r1, [sl, #4]
 8006ef8:	692b      	ldr	r3, [r5, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	9a03      	ldr	r2, [sp, #12]
 8006efe:	5113      	str	r3, [r2, r4]
 8006f00:	69b0      	ldr	r0, [r6, #24]
 8006f02:	6803      	ldr	r3, [r0, #0]
 8006f04:	45d9      	cmp	r9, fp
 8006f06:	bf38      	it	cc
 8006f08:	46d9      	movcc	r9, fp
 8006f0a:	009a      	lsls	r2, r3, #2
 8006f0c:	d408      	bmi.n	8006f20 <ai_platform_network_process+0x188>
 8006f0e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	4419      	add	r1, r3
 8006f16:	6081      	str	r1, [r0, #8]
 8006f18:	69b3      	ldr	r3, [r6, #24]
 8006f1a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	883b      	ldrh	r3, [r7, #0]
 8006f22:	f108 0801 	add.w	r8, r8, #1
 8006f26:	3518      	adds	r5, #24
 8006f28:	e78d      	b.n	8006e46 <ai_platform_network_process+0xae>
 8006f2a:	46a3      	mov	fp, r4
 8006f2c:	4658      	mov	r0, fp
 8006f2e:	b005      	add	sp, #20
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	9c01      	ldr	r4, [sp, #4]
 8006f36:	2221      	movs	r2, #33	; 0x21
 8006f38:	f104 0010 	add.w	r0, r4, #16
 8006f3c:	2112      	movs	r1, #18
 8006f3e:	f000 f9b1 	bl	80072a4 <core_set_error>
 8006f42:	e7f3      	b.n	8006f2c <ai_platform_network_process+0x194>
 8006f44:	9c01      	ldr	r4, [sp, #4]
 8006f46:	2217      	movs	r2, #23
 8006f48:	f104 0010 	add.w	r0, r4, #16
 8006f4c:	2112      	movs	r1, #18
 8006f4e:	469b      	mov	fp, r3
 8006f50:	f000 f9a8 	bl	80072a4 <core_set_error>
 8006f54:	e7ea      	b.n	8006f2c <ai_platform_network_process+0x194>
 8006f56:	9c01      	ldr	r4, [sp, #4]
 8006f58:	2219      	movs	r2, #25
 8006f5a:	f104 0010 	add.w	r0, r4, #16
 8006f5e:	2112      	movs	r1, #18
 8006f60:	f000 f9a0 	bl	80072a4 <core_set_error>
 8006f64:	f04f 0b00 	mov.w	fp, #0
 8006f68:	e7e0      	b.n	8006f2c <ai_platform_network_process+0x194>
 8006f6a:	9c01      	ldr	r4, [sp, #4]
 8006f6c:	2218      	movs	r2, #24
 8006f6e:	f104 0010 	add.w	r0, r4, #16
 8006f72:	2112      	movs	r1, #18
 8006f74:	f000 f996 	bl	80072a4 <core_set_error>
 8006f78:	f04f 0b00 	mov.w	fp, #0
 8006f7c:	e7d6      	b.n	8006f2c <ai_platform_network_process+0x194>
 8006f7e:	9c01      	ldr	r4, [sp, #4]
 8006f80:	f104 0010 	add.w	r0, r4, #16
 8006f84:	2217      	movs	r2, #23
 8006f86:	2112      	movs	r1, #18
 8006f88:	f000 f98c 	bl	80072a4 <core_set_error>
 8006f8c:	f04f 0b00 	mov.w	fp, #0
 8006f90:	e7cc      	b.n	8006f2c <ai_platform_network_process+0x194>
 8006f92:	bf00      	nop
 8006f94:	a1c00100 	.word	0xa1c00100
 8006f98:	e0002000 	.word	0xe0002000
 8006f9c:	e0042000 	.word	0xe0042000
 8006fa0:	58024c08 	.word	0x58024c08
 8006fa4:	58024c00 	.word	0x58024c00
 8006fa8:	f407a5c2 	.word	0xf407a5c2
 8006fac:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fb0:	40023008 	.word	0x40023008
 8006fb4:	40023000 	.word	0x40023000
 8006fb8:	9c01      	ldr	r4, [sp, #4]
 8006fba:	9a02      	ldr	r2, [sp, #8]
 8006fbc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	f000 80a9 	beq.w	8007116 <ai_platform_network_process+0x37e>
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	f240 809b 	bls.w	8007100 <ai_platform_network_process+0x368>
 8006fca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8006fce:	f11a 0f0c 	cmn.w	sl, #12
 8006fd2:	f000 8095 	beq.w	8007100 <ai_platform_network_process+0x368>
 8006fd6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8090 	beq.w	8007100 <ai_platform_network_process+0x368>
 8006fe0:	9d02      	ldr	r5, [sp, #8]
 8006fe2:	9401      	str	r4, [sp, #4]
 8006fe4:	f04f 0800 	mov.w	r8, #0
 8006fe8:	4598      	cmp	r8, r3
 8006fea:	f080 8092 	bcs.w	8007112 <ai_platform_network_process+0x37a>
 8006fee:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 808d 	beq.w	8007112 <ai_platform_network_process+0x37a>
 8006ff8:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	f000 8088 	beq.w	8007112 <ai_platform_network_process+0x37a>
 8007002:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	9302      	str	r3, [sp, #8]
 800700a:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800700e:	191f      	adds	r7, r3, r4
 8007010:	f000 812d 	beq.w	800726e <ai_platform_network_process+0x4d6>
 8007014:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8007018:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800701c:	69b0      	ldr	r0, [r6, #24]
 800701e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8007022:	6841      	ldr	r1, [r0, #4]
 8007024:	fb0b f30e 	mul.w	r3, fp, lr
 8007028:	fb0c f303 	mul.w	r3, ip, r3
 800702c:	4299      	cmp	r1, r3
 800702e:	d366      	bcc.n	80070fe <ai_platform_network_process+0x366>
 8007030:	68f3      	ldr	r3, [r6, #12]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	455a      	cmp	r2, fp
 8007036:	d162      	bne.n	80070fe <ai_platform_network_process+0x366>
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	4572      	cmp	r2, lr
 800703c:	d15f      	bne.n	80070fe <ai_platform_network_process+0x366>
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	459c      	cmp	ip, r3
 8007042:	d15c      	bne.n	80070fe <ai_platform_network_process+0x366>
 8007044:	6800      	ldr	r0, [r0, #0]
 8007046:	f002 f807 	bl	8009058 <ai_array_get_byte_size>
 800704a:	68f2      	ldr	r2, [r6, #12]
 800704c:	6973      	ldr	r3, [r6, #20]
 800704e:	68d2      	ldr	r2, [r2, #12]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	fb03 f302 	mul.w	r3, r3, r2
 8007056:	4298      	cmp	r0, r3
 8007058:	d351      	bcc.n	80070fe <ai_platform_network_process+0x366>
 800705a:	69b3      	ldr	r3, [r6, #24]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	f001 ffa3 	bl	8008fa8 <ai_array_to_buffer_fmt>
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	4043      	eors	r3, r0
 8007066:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800706a:	d13e      	bne.n	80070ea <ai_platform_network_process+0x352>
 800706c:	692b      	ldr	r3, [r5, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d032      	beq.n	80070d8 <ai_platform_network_process+0x340>
 8007072:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8007076:	f1bb 0f00 	cmp.w	fp, #0
 800707a:	d025      	beq.n	80070c8 <ai_platform_network_process+0x330>
 800707c:	68f2      	ldr	r2, [r6, #12]
 800707e:	6973      	ldr	r3, [r6, #20]
 8007080:	68d1      	ldr	r1, [r2, #12]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	fb02 f201 	mul.w	r2, r2, r1
 8007088:	60ba      	str	r2, [r7, #8]
 800708a:	88ab      	ldrh	r3, [r5, #4]
 800708c:	fb02 f203 	mul.w	r2, r2, r3
 8007090:	60fa      	str	r2, [r7, #12]
 8007092:	6929      	ldr	r1, [r5, #16]
 8007094:	6079      	str	r1, [r7, #4]
 8007096:	692b      	ldr	r3, [r5, #16]
 8007098:	4413      	add	r3, r2
 800709a:	9a02      	ldr	r2, [sp, #8]
 800709c:	5113      	str	r3, [r2, r4]
 800709e:	69b0      	ldr	r0, [r6, #24]
 80070a0:	6803      	ldr	r3, [r0, #0]
 80070a2:	45d9      	cmp	r9, fp
 80070a4:	bf38      	it	cc
 80070a6:	46d9      	movcc	r9, fp
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	d407      	bmi.n	80070bc <ai_platform_network_process+0x324>
 80070ac:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	4419      	add	r1, r3
 80070b4:	6081      	str	r1, [r0, #8]
 80070b6:	69b3      	ldr	r3, [r6, #24]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]
 80070bc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80070c0:	f108 0801 	add.w	r8, r8, #1
 80070c4:	3518      	adds	r5, #24
 80070c6:	e78f      	b.n	8006fe8 <ai_platform_network_process+0x250>
 80070c8:	9c01      	ldr	r4, [sp, #4]
 80070ca:	2221      	movs	r2, #33	; 0x21
 80070cc:	f104 0010 	add.w	r0, r4, #16
 80070d0:	2113      	movs	r1, #19
 80070d2:	f000 f8e7 	bl	80072a4 <core_set_error>
 80070d6:	e729      	b.n	8006f2c <ai_platform_network_process+0x194>
 80070d8:	9c01      	ldr	r4, [sp, #4]
 80070da:	2217      	movs	r2, #23
 80070dc:	f104 0010 	add.w	r0, r4, #16
 80070e0:	2113      	movs	r1, #19
 80070e2:	469b      	mov	fp, r3
 80070e4:	f000 f8de 	bl	80072a4 <core_set_error>
 80070e8:	e720      	b.n	8006f2c <ai_platform_network_process+0x194>
 80070ea:	9c01      	ldr	r4, [sp, #4]
 80070ec:	2219      	movs	r2, #25
 80070ee:	f104 0010 	add.w	r0, r4, #16
 80070f2:	2113      	movs	r1, #19
 80070f4:	f000 f8d6 	bl	80072a4 <core_set_error>
 80070f8:	f04f 0b00 	mov.w	fp, #0
 80070fc:	e716      	b.n	8006f2c <ai_platform_network_process+0x194>
 80070fe:	9c01      	ldr	r4, [sp, #4]
 8007100:	f104 0010 	add.w	r0, r4, #16
 8007104:	2218      	movs	r2, #24
 8007106:	2113      	movs	r1, #19
 8007108:	f000 f8cc 	bl	80072a4 <core_set_error>
 800710c:	f04f 0b00 	mov.w	fp, #0
 8007110:	e70c      	b.n	8006f2c <ai_platform_network_process+0x194>
 8007112:	9c01      	ldr	r4, [sp, #4]
 8007114:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007116:	f8a4 9014 	strh.w	r9, [r4, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80a4 	beq.w	8007268 <ai_platform_network_process+0x4d0>
 8007120:	2b01      	cmp	r3, #1
 8007122:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007124:	f240 809e 	bls.w	8007264 <ai_platform_network_process+0x4cc>
 8007128:	f105 070c 	add.w	r7, r5, #12
 800712c:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8007130:	8aa3      	ldrh	r3, [r4, #20]
 8007132:	455b      	cmp	r3, fp
 8007134:	f67f aefa 	bls.w	8006f2c <ai_platform_network_process+0x194>
 8007138:	9401      	str	r4, [sp, #4]
 800713a:	2d00      	cmp	r5, #0
 800713c:	d036      	beq.n	80071ac <ai_platform_network_process+0x414>
 800713e:	882b      	ldrh	r3, [r5, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d033      	beq.n	80071ac <ai_platform_network_process+0x414>
 8007144:	686b      	ldr	r3, [r5, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d030      	beq.n	80071ac <ai_platform_network_process+0x414>
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f04f 0800 	mov.w	r8, #0
 8007150:	b9db      	cbnz	r3, 800718a <ai_platform_network_process+0x3f2>
 8007152:	e02b      	b.n	80071ac <ai_platform_network_process+0x414>
 8007154:	68d4      	ldr	r4, [r2, #12]
 8007156:	1b00      	subs	r0, r0, r4
 8007158:	4401      	add	r1, r0
 800715a:	6091      	str	r1, [r2, #8]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	6872      	ldr	r2, [r6, #4]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007166:	f85a 2009 	ldr.w	r2, [sl, r9]
 800716a:	440b      	add	r3, r1
 800716c:	4293      	cmp	r3, r2
 800716e:	bf24      	itt	cs
 8007170:	68f3      	ldrcs	r3, [r6, #12]
 8007172:	1ad3      	subcs	r3, r2, r3
 8007174:	6073      	str	r3, [r6, #4]
 8007176:	882b      	ldrh	r3, [r5, #0]
 8007178:	f108 0801 	add.w	r8, r8, #1
 800717c:	4598      	cmp	r8, r3
 800717e:	d215      	bcs.n	80071ac <ai_platform_network_process+0x414>
 8007180:	686b      	ldr	r3, [r5, #4]
 8007182:	b19b      	cbz	r3, 80071ac <ai_platform_network_process+0x414>
 8007184:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007188:	b183      	cbz	r3, 80071ac <ai_platform_network_process+0x414>
 800718a:	68a9      	ldr	r1, [r5, #8]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	f8d1 a000 	ldr.w	sl, [r1]
 8007192:	6814      	ldr	r4, [r2, #0]
 8007194:	6890      	ldr	r0, [r2, #8]
 8007196:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800719a:	eb0a 0609 	add.w	r6, sl, r9
 800719e:	00a4      	lsls	r4, r4, #2
 80071a0:	6871      	ldr	r1, [r6, #4]
 80071a2:	d5d7      	bpl.n	8007154 <ai_platform_network_process+0x3bc>
 80071a4:	68b2      	ldr	r2, [r6, #8]
 80071a6:	f001 ffab 	bl	8009100 <memcpy>
 80071aa:	e7da      	b.n	8007162 <ai_platform_network_process+0x3ca>
 80071ac:	9801      	ldr	r0, [sp, #4]
 80071ae:	f001 fead 	bl	8008f0c <ai_layers_forward_all>
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	d047      	beq.n	8007246 <ai_platform_network_process+0x4ae>
 80071b6:	883b      	ldrh	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d044      	beq.n	8007246 <ai_platform_network_process+0x4ae>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d041      	beq.n	8007246 <ai_platform_network_process+0x4ae>
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d03e      	beq.n	8007246 <ai_platform_network_process+0x4ae>
 80071c8:	f04f 0800 	mov.w	r8, #0
 80071cc:	e019      	b.n	8007202 <ai_platform_network_process+0x46a>
 80071ce:	f85a 2009 	ldr.w	r2, [sl, r9]
 80071d2:	4293      	cmp	r3, r2
 80071d4:	bf24      	itt	cs
 80071d6:	68f3      	ldrcs	r3, [r6, #12]
 80071d8:	1ad3      	subcs	r3, r2, r3
 80071da:	6073      	str	r3, [r6, #4]
 80071dc:	6981      	ldr	r1, [r0, #24]
 80071de:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80071e2:	1b12      	subs	r2, r2, r4
 80071e4:	4413      	add	r3, r2
 80071e6:	608b      	str	r3, [r1, #8]
 80071e8:	6983      	ldr	r3, [r0, #24]
 80071ea:	6872      	ldr	r2, [r6, #4]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	883b      	ldrh	r3, [r7, #0]
 80071f0:	f108 0801 	add.w	r8, r8, #1
 80071f4:	4598      	cmp	r8, r3
 80071f6:	d226      	bcs.n	8007246 <ai_platform_network_process+0x4ae>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	b323      	cbz	r3, 8007246 <ai_platform_network_process+0x4ae>
 80071fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007200:	b308      	cbz	r0, 8007246 <ai_platform_network_process+0x4ae>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6981      	ldr	r1, [r0, #24]
 8007206:	f8d3 a000 	ldr.w	sl, [r3]
 800720a:	680c      	ldr	r4, [r1, #0]
 800720c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007210:	eb0a 0609 	add.w	r6, sl, r9
 8007214:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007218:	00a4      	lsls	r4, r4, #2
 800721a:	eb0c 0302 	add.w	r3, ip, r2
 800721e:	d5d6      	bpl.n	80071ce <ai_platform_network_process+0x436>
 8007220:	6889      	ldr	r1, [r1, #8]
 8007222:	4660      	mov	r0, ip
 8007224:	f001 ff6c 	bl	8009100 <memcpy>
 8007228:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800722c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007230:	440b      	add	r3, r1
 8007232:	4293      	cmp	r3, r2
 8007234:	bf24      	itt	cs
 8007236:	68f3      	ldrcs	r3, [r6, #12]
 8007238:	1ad3      	subcs	r3, r2, r3
 800723a:	6073      	str	r3, [r6, #4]
 800723c:	883b      	ldrh	r3, [r7, #0]
 800723e:	f108 0801 	add.w	r8, r8, #1
 8007242:	4598      	cmp	r8, r3
 8007244:	d3d8      	bcc.n	80071f8 <ai_platform_network_process+0x460>
 8007246:	9b01      	ldr	r3, [sp, #4]
 8007248:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800724c:	461a      	mov	r2, r3
 800724e:	f10b 0b01 	add.w	fp, fp, #1
 8007252:	8a9b      	ldrh	r3, [r3, #20]
 8007254:	fa1f fb8b 	uxth.w	fp, fp
 8007258:	455b      	cmp	r3, fp
 800725a:	f8a2 b016 	strh.w	fp, [r2, #22]
 800725e:	f63f af6c 	bhi.w	800713a <ai_platform_network_process+0x3a2>
 8007262:	e663      	b.n	8006f2c <ai_platform_network_process+0x194>
 8007264:	2700      	movs	r7, #0
 8007266:	e761      	b.n	800712c <ai_platform_network_process+0x394>
 8007268:	461d      	mov	r5, r3
 800726a:	461f      	mov	r7, r3
 800726c:	e75e      	b.n	800712c <ai_platform_network_process+0x394>
 800726e:	9c01      	ldr	r4, [sp, #4]
 8007270:	2217      	movs	r2, #23
 8007272:	f104 0010 	add.w	r0, r4, #16
 8007276:	2113      	movs	r1, #19
 8007278:	f000 f814 	bl	80072a4 <core_set_error>
 800727c:	46bb      	mov	fp, r7
 800727e:	e655      	b.n	8006f2c <ai_platform_network_process+0x194>
 8007280:	f104 0010 	add.w	r0, r4, #16
 8007284:	2230      	movs	r2, #48	; 0x30
 8007286:	2111      	movs	r1, #17
 8007288:	f000 f80c 	bl	80072a4 <core_set_error>
 800728c:	e64e      	b.n	8006f2c <ai_platform_network_process+0x194>
 800728e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007290:	e5c1      	b.n	8006e16 <ai_platform_network_process+0x7e>
 8007292:	bf00      	nop

08007294 <core_init>:
 8007294:	2001      	movs	r0, #1
 8007296:	4770      	bx	lr

08007298 <core_get_error>:
 8007298:	4603      	mov	r3, r0
 800729a:	2200      	movs	r2, #0
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <core_set_error>:
 80072a4:	7803      	ldrb	r3, [r0, #0]
 80072a6:	b933      	cbnz	r3, 80072b6 <core_set_error+0x12>
 80072a8:	7001      	strb	r1, [r0, #0]
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	f362 231f 	bfi	r3, r2, #8, #24
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	2001      	movs	r0, #1
 80072b4:	4770      	bx	lr
 80072b6:	2000      	movs	r0, #0
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop

080072bc <func_dummy>:
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop

080072c0 <ai_dict8_dot_array_f32>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80072c8:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80072cc:	f000 80c0 	beq.w	8007450 <ai_dict8_dot_array_f32+0x190>
 80072d0:	f101 0408 	add.w	r4, r1, #8
 80072d4:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80072d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007458 <ai_dict8_dot_array_f32+0x198>
 80072dc:	eb04 0e09 	add.w	lr, r4, r9
 80072e0:	f103 0520 	add.w	r5, r3, #32
 80072e4:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80072e8:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80072ec:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80072f0:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80072f4:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80072f8:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80072fc:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007300:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007304:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007308:	ed55 5a02 	vldr	s11, [r5, #-8]
 800730c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007310:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007314:	edd6 7a00 	vldr	s15, [r6]
 8007318:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800731c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007320:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007324:	ed9a 3a00 	vldr	s6, [sl]
 8007328:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800732c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007330:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007334:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007338:	ed97 3a00 	vldr	s6, [r7]
 800733c:	ed96 5a00 	vldr	s10, [r6]
 8007340:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007344:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8007348:	eee3 7a04 	vfma.f32	s15, s6, s8
 800734c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007350:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007354:	ed9a 3a00 	vldr	s6, [sl]
 8007358:	ed96 4a00 	vldr	s8, [r6]
 800735c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007360:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007364:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007368:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800736c:	ed97 5a00 	vldr	s10, [r7]
 8007370:	ed96 6a00 	vldr	s12, [r6]
 8007374:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007378:	3408      	adds	r4, #8
 800737a:	45a6      	cmp	lr, r4
 800737c:	f105 0520 	add.w	r5, r5, #32
 8007380:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007384:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007388:	eee6 7a26 	vfma.f32	s15, s12, s13
 800738c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007390:	d1a8      	bne.n	80072e4 <ai_dict8_dot_array_f32+0x24>
 8007392:	4449      	add	r1, r9
 8007394:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007398:	f01c 0c07 	ands.w	ip, ip, #7
 800739c:	d050      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 800739e:	780c      	ldrb	r4, [r1, #0]
 80073a0:	edd3 6a00 	vldr	s13, [r3]
 80073a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073a8:	edd4 7a00 	vldr	s15, [r4]
 80073ac:	f1bc 0f01 	cmp.w	ip, #1
 80073b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073b4:	d044      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 80073b6:	784c      	ldrb	r4, [r1, #1]
 80073b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80073bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073c0:	edd4 7a00 	vldr	s15, [r4]
 80073c4:	f1bc 0f02 	cmp.w	ip, #2
 80073c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073cc:	d038      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 80073ce:	788c      	ldrb	r4, [r1, #2]
 80073d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80073d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073d8:	edd4 7a00 	vldr	s15, [r4]
 80073dc:	f1bc 0f03 	cmp.w	ip, #3
 80073e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073e4:	d02c      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 80073e6:	78cc      	ldrb	r4, [r1, #3]
 80073e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80073ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073f0:	edd4 7a00 	vldr	s15, [r4]
 80073f4:	f1bc 0f04 	cmp.w	ip, #4
 80073f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073fc:	d020      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 80073fe:	790c      	ldrb	r4, [r1, #4]
 8007400:	edd3 6a04 	vldr	s13, [r3, #16]
 8007404:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007408:	edd4 7a00 	vldr	s15, [r4]
 800740c:	f1bc 0f05 	cmp.w	ip, #5
 8007410:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007414:	d014      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 8007416:	794c      	ldrb	r4, [r1, #5]
 8007418:	edd3 6a05 	vldr	s13, [r3, #20]
 800741c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007420:	edd4 7a00 	vldr	s15, [r4]
 8007424:	f1bc 0f06 	cmp.w	ip, #6
 8007428:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800742c:	d008      	beq.n	8007440 <ai_dict8_dot_array_f32+0x180>
 800742e:	7989      	ldrb	r1, [r1, #6]
 8007430:	edd3 7a06 	vldr	s15, [r3, #24]
 8007434:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007438:	edd2 6a00 	vldr	s13, [r2]
 800743c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007440:	edd0 7a00 	vldr	s15, [r0]
 8007444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007448:	ed80 7a00 	vstr	s14, [r0]
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007458 <ai_dict8_dot_array_f32+0x198>
 8007454:	e7a0      	b.n	8007398 <ai_dict8_dot_array_f32+0xd8>
 8007456:	bf00      	nop
 8007458:	00000000 	.word	0x00000000

0800745c <ai_dict4_dot_array_f32>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007462:	f027 0c01 	bic.w	ip, r7, #1
 8007466:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800746a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800746e:	f000 80ae 	beq.w	80075ce <ai_dict4_dot_array_f32+0x172>
 8007472:	1d0d      	adds	r5, r1, #4
 8007474:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007478:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80075d4 <ai_dict4_dot_array_f32+0x178>
 800747c:	eb05 0e09 	add.w	lr, r5, r9
 8007480:	f103 0420 	add.w	r4, r3, #32
 8007484:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007488:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800748c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007490:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007494:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007498:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800749c:	ed14 5a04 	vldr	s10, [r4, #-16]
 80074a0:	ed54 5a03 	vldr	s11, [r4, #-12]
 80074a4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80074a8:	ed54 6a01 	vldr	s13, [r4, #-4]
 80074ac:	f006 0a0f 	and.w	sl, r6, #15
 80074b0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80074b4:	edda 7a00 	vldr	s15, [sl]
 80074b8:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80074bc:	0936      	lsrs	r6, r6, #4
 80074be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074c2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80074c6:	ed96 3a00 	vldr	s6, [r6]
 80074ca:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80074ce:	eee3 7a23 	vfma.f32	s15, s6, s7
 80074d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074d6:	f00b 0b0f 	and.w	fp, fp, #15
 80074da:	edd6 3a00 	vldr	s7, [r6]
 80074de:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80074e2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80074e6:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80074ea:	3504      	adds	r5, #4
 80074ec:	ed9b 4a00 	vldr	s8, [fp]
 80074f0:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80074f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074f8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80074fc:	f00a 0a0f 	and.w	sl, sl, #15
 8007500:	eddb 4a00 	vldr	s9, [fp]
 8007504:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007508:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800750c:	45ae      	cmp	lr, r5
 800750e:	ed9a 5a00 	vldr	s10, [sl]
 8007512:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8007516:	eee5 7a25 	vfma.f32	s15, s10, s11
 800751a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800751e:	f006 060f 	and.w	r6, r6, #15
 8007522:	edda 5a00 	vldr	s11, [sl]
 8007526:	eee5 7a86 	vfma.f32	s15, s11, s12
 800752a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800752e:	f104 0420 	add.w	r4, r4, #32
 8007532:	ed96 6a00 	vldr	s12, [r6]
 8007536:	eee6 7a26 	vfma.f32	s15, s12, s13
 800753a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800753e:	d1a1      	bne.n	8007484 <ai_dict4_dot_array_f32+0x28>
 8007540:	4449      	add	r1, r9
 8007542:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007546:	459c      	cmp	ip, r3
 8007548:	d92d      	bls.n	80075a6 <ai_dict4_dot_array_f32+0x14a>
 800754a:	f10c 0c07 	add.w	ip, ip, #7
 800754e:	f103 0508 	add.w	r5, r3, #8
 8007552:	ebac 0c05 	sub.w	ip, ip, r5
 8007556:	f02c 0407 	bic.w	r4, ip, #7
 800755a:	f103 0810 	add.w	r8, r3, #16
 800755e:	44a0      	add	r8, r4
 8007560:	f101 3eff 	add.w	lr, r1, #4294967295
 8007564:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8007568:	ed15 6a01 	vldr	s12, [r5, #-4]
 800756c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8007570:	f004 060f 	and.w	r6, r4, #15
 8007574:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007578:	0924      	lsrs	r4, r4, #4
 800757a:	edd6 7a00 	vldr	s15, [r6]
 800757e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007582:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007586:	ed94 6a00 	vldr	s12, [r4]
 800758a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800758e:	3508      	adds	r5, #8
 8007590:	45a8      	cmp	r8, r5
 8007592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007596:	d1e5      	bne.n	8007564 <ai_dict4_dot_array_f32+0x108>
 8007598:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800759c:	f10c 0c01 	add.w	ip, ip, #1
 80075a0:	4461      	add	r1, ip
 80075a2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80075a6:	07fc      	lsls	r4, r7, #31
 80075a8:	d509      	bpl.n	80075be <ai_dict4_dot_array_f32+0x162>
 80075aa:	7809      	ldrb	r1, [r1, #0]
 80075ac:	edd3 7a00 	vldr	s15, [r3]
 80075b0:	090b      	lsrs	r3, r1, #4
 80075b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80075b6:	edd2 6a00 	vldr	s13, [r2]
 80075ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075be:	edd0 7a00 	vldr	s15, [r0]
 80075c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c6:	ed80 7a00 	vstr	s14, [r0]
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80075d4 <ai_dict4_dot_array_f32+0x178>
 80075d2:	e7b8      	b.n	8007546 <ai_dict4_dot_array_f32+0xea>
 80075d4:	00000000 	.word	0x00000000

080075d8 <ai_dict_decompress_f32>:
 80075d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075dc:	9f08      	ldr	r7, [sp, #32]
 80075de:	2b04      	cmp	r3, #4
 80075e0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80075e4:	d00e      	beq.n	8007604 <ai_dict_decompress_f32+0x2c>
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d10a      	bne.n	8007600 <ai_dict_decompress_f32+0x28>
 80075ea:	42b8      	cmp	r0, r7
 80075ec:	d208      	bcs.n	8007600 <ai_dict_decompress_f32+0x28>
 80075ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f840 3b04 	str.w	r3, [r0], #4
 80075fc:	4287      	cmp	r7, r0
 80075fe:	d8f6      	bhi.n	80075ee <ai_dict_decompress_f32+0x16>
 8007600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800760a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800760e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8007612:	f003 0e01 	and.w	lr, r3, #1
 8007616:	42b8      	cmp	r0, r7
 8007618:	d2f2      	bcs.n	8007600 <ai_dict_decompress_f32+0x28>
 800761a:	f1bc 0f00 	cmp.w	ip, #0
 800761e:	d01a      	beq.n	8007656 <ai_dict_decompress_f32+0x7e>
 8007620:	f100 0508 	add.w	r5, r0, #8
 8007624:	1e4c      	subs	r4, r1, #1
 8007626:	eb01 0608 	add.w	r6, r1, r8
 800762a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800762e:	091b      	lsrs	r3, r3, #4
 8007630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007634:	42a6      	cmp	r6, r4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f845 3c08 	str.w	r3, [r5, #-8]
 800763c:	7823      	ldrb	r3, [r4, #0]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007646:	f105 0508 	add.w	r5, r5, #8
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007650:	d1eb      	bne.n	800762a <ai_dict_decompress_f32+0x52>
 8007652:	4461      	add	r1, ip
 8007654:	4448      	add	r0, r9
 8007656:	f1be 0f00 	cmp.w	lr, #0
 800765a:	d103      	bne.n	8007664 <ai_dict_decompress_f32+0x8c>
 800765c:	4287      	cmp	r7, r0
 800765e:	d8dc      	bhi.n	800761a <ai_dict_decompress_f32+0x42>
 8007660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007664:	780b      	ldrb	r3, [r1, #0]
 8007666:	091b      	lsrs	r3, r3, #4
 8007668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800766c:	3101      	adds	r1, #1
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	3004      	adds	r0, #4
 8007674:	e7cf      	b.n	8007616 <ai_dict_decompress_f32+0x3e>
 8007676:	bf00      	nop

08007678 <forward_conv2d>:
 8007678:	6983      	ldr	r3, [r0, #24]
 800767a:	881a      	ldrh	r2, [r3, #0]
 800767c:	2a00      	cmp	r2, #0
 800767e:	f000 87c7 	beq.w	8008610 <forward_conv2d+0xf98>
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	b101      	cbz	r1, 800768a <forward_conv2d+0x12>
 8007688:	6809      	ldr	r1, [r1, #0]
 800768a:	2a01      	cmp	r2, #1
 800768c:	f240 87bd 	bls.w	800860a <forward_conv2d+0xf92>
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	ed2d 8b10 	vpush	{d8-d15}
 8007698:	b0cb      	sub	sp, #300	; 0x12c
 800769a:	691c      	ldr	r4, [r3, #16]
 800769c:	af02      	add	r7, sp, #8
 800769e:	2c00      	cmp	r4, #0
 80076a0:	f000 87af 	beq.w	8008602 <forward_conv2d+0xf8a>
 80076a4:	6824      	ldr	r4, [r4, #0]
 80076a6:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80076aa:	2a02      	cmp	r2, #2
 80076ac:	f000 87a4 	beq.w	80085f8 <forward_conv2d+0xf80>
 80076b0:	69dd      	ldr	r5, [r3, #28]
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	f000 8799 	beq.w	80085ea <forward_conv2d+0xf72>
 80076b8:	f113 0218 	adds.w	r2, r3, #24
 80076bc:	682c      	ldr	r4, [r5, #0]
 80076be:	d004      	beq.n	80076ca <forward_conv2d+0x52>
 80076c0:	8b1b      	ldrh	r3, [r3, #24]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	f240 87a6 	bls.w	8008614 <forward_conv2d+0xf9c>
 80076c8:	686a      	ldr	r2, [r5, #4]
 80076ca:	68ab      	ldr	r3, [r5, #8]
 80076cc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80076d0:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80076d4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80076d8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80076dc:	68ce      	ldr	r6, [r1, #12]
 80076de:	69a1      	ldr	r1, [r4, #24]
 80076e0:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80076e4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80076e8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80076ec:	f8de 1004 	ldr.w	r1, [lr, #4]
 80076f0:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80076f4:	f8de 100c 	ldr.w	r1, [lr, #12]
 80076f8:	6479      	str	r1, [r7, #68]	; 0x44
 80076fa:	f8de 1008 	ldr.w	r1, [lr, #8]
 80076fe:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8007702:	6871      	ldr	r1, [r6, #4]
 8007704:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8007708:	68f1      	ldr	r1, [r6, #12]
 800770a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800770e:	68b1      	ldr	r1, [r6, #8]
 8007710:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8007714:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007718:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800771c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007720:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8007724:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007728:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800772a:	6889      	ldr	r1, [r1, #8]
 800772c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8007730:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007732:	e9d5 ba00 	ldrd	fp, sl, [r5]
 8007736:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800773a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800773c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8007740:	69c1      	ldr	r1, [r0, #28]
 8007742:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8007746:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800774a:	2a00      	cmp	r2, #0
 800774c:	f000 8749 	beq.w	80085e2 <forward_conv2d+0xf6a>
 8007750:	6992      	ldr	r2, [r2, #24]
 8007752:	6892      	ldr	r2, [r2, #8]
 8007754:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800775c:	6992      	ldr	r2, [r2, #24]
 800775e:	6892      	ldr	r2, [r2, #8]
 8007760:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007764:	4606      	mov	r6, r0
 8007766:	6a00      	ldr	r0, [r0, #32]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 872c 	beq.w	80085c6 <forward_conv2d+0xf4e>
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	2a00      	cmp	r2, #0
 8007772:	f000 8594 	beq.w	800829e <forward_conv2d+0xc26>
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800777e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007782:	6893      	ldr	r3, [r2, #8]
 8007784:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007788:	f001 fc66 	bl	8009058 <ai_array_get_byte_size>
 800778c:	69a3      	ldr	r3, [r4, #24]
 800778e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8007792:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800779c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800779e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077a2:	f3c3 5441 	ubfx	r4, r3, #21, #2
 80077a6:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 80077aa:	fa1f f088 	uxth.w	r0, r8
 80077ae:	4125      	asrs	r5, r4
 80077b0:	3801      	subs	r0, #1
 80077b2:	1e4c      	subs	r4, r1, #1
 80077b4:	fb04 1100 	mla	r1, r4, r0, r1
 80077b8:	6439      	str	r1, [r7, #64]	; 0x40
 80077ba:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80077be:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8007b60 <forward_conv2d+0x4e8>
 80077c2:	fa1f f289 	uxth.w	r2, r9
 80077c6:	3a01      	subs	r2, #1
 80077c8:	1e48      	subs	r0, r1, #1
 80077ca:	fb00 1102 	mla	r1, r0, r2, r1
 80077ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077d2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80077d6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80077da:	4610      	mov	r0, r2
 80077dc:	2a00      	cmp	r2, #0
 80077de:	bf08      	it	eq
 80077e0:	4660      	moveq	r0, ip
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	b2ad      	uxth	r5, r5
 80077e6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80077ea:	f000 8533 	beq.w	8008254 <forward_conv2d+0xbdc>
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	f000 8530 	beq.w	8008254 <forward_conv2d+0xbdc>
 80077f4:	fa1f f38b 	uxth.w	r3, fp
 80077f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80077fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007800:	425b      	negs	r3, r3
 8007802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007806:	2900      	cmp	r1, #0
 8007808:	f000 8242 	beq.w	8007c90 <forward_conv2d+0x618>
 800780c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007810:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 8007814:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8007b5c <forward_conv2d+0x4e4>
 8007818:	fb00 f305 	mul.w	r3, r0, r5
 800781c:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 8007820:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8007824:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007828:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800782c:	663d      	str	r5, [r7, #96]	; 0x60
 800782e:	fa0f f288 	sxth.w	r2, r8
 8007832:	fb03 f400 	mul.w	r4, r3, r0
 8007836:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800783a:	fa1f f18a 	uxth.w	r1, sl
 800783e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007842:	67bc      	str	r4, [r7, #120]	; 0x78
 8007844:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8007848:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800784c:	4249      	negs	r1, r1
 800784e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007852:	0092      	lsls	r2, r2, #2
 8007854:	0081      	lsls	r1, r0, #2
 8007856:	4605      	mov	r5, r0
 8007858:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800785c:	fb04 f200 	mul.w	r2, r4, r0
 8007860:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007864:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8007868:	fb01 fc00 	mul.w	ip, r1, r0
 800786c:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 8007870:	fb01 fc03 	mul.w	ip, r1, r3
 8007874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007876:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007884:	fa0f f689 	sxth.w	r6, r9
 8007888:	469c      	mov	ip, r3
 800788a:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800788e:	4633      	mov	r3, r6
 8007890:	fb0c f606 	mul.w	r6, ip, r6
 8007894:	677e      	str	r6, [r7, #116]	; 0x74
 8007896:	4666      	mov	r6, ip
 8007898:	fb04 f606 	mul.w	r6, r4, r6
 800789c:	4686      	mov	lr, r0
 800789e:	4620      	mov	r0, r4
 80078a0:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80078a4:	62be      	str	r6, [r7, #40]	; 0x28
 80078a6:	fb01 f404 	mul.w	r4, r1, r4
 80078aa:	fb03 f605 	mul.w	r6, r3, r5
 80078ae:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80078b0:	66bc      	str	r4, [r7, #104]	; 0x68
 80078b2:	460b      	mov	r3, r1
 80078b4:	4604      	mov	r4, r0
 80078b6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80078ba:	627e      	str	r6, [r7, #36]	; 0x24
 80078bc:	fb05 f404 	mul.w	r4, r5, r4
 80078c0:	617c      	str	r4, [r7, #20]
 80078c2:	460c      	mov	r4, r1
 80078c4:	fb04 f403 	mul.w	r4, r4, r3
 80078c8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80078cc:	65bc      	str	r4, [r7, #88]	; 0x58
 80078ce:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80078d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078d6:	fb01 f104 	mul.w	r1, r1, r4
 80078da:	61b9      	str	r1, [r7, #24]
 80078dc:	0091      	lsls	r1, r2, #2
 80078de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80078e4:	fb00 f202 	mul.w	r2, r0, r2
 80078e8:	0081      	lsls	r1, r0, #2
 80078ea:	61f9      	str	r1, [r7, #28]
 80078ec:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80078f0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80078f4:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80078f8:	011a      	lsls	r2, r3, #4
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007908:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800790c:	2300      	movs	r3, #0
 800790e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007914:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007918:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800791c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800791e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007920:	2900      	cmp	r1, #0
 8007922:	441a      	add	r2, r3
 8007924:	bfb4      	ite	lt
 8007926:	2100      	movlt	r1, #0
 8007928:	2300      	movge	r3, #0
 800792a:	4282      	cmp	r2, r0
 800792c:	bf28      	it	cs
 800792e:	4602      	movcs	r2, r0
 8007930:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007934:	2801      	cmp	r0, #1
 8007936:	f000 8320 	beq.w	8007f7a <forward_conv2d+0x902>
 800793a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800793e:	4281      	cmp	r1, r0
 8007940:	f000 81c3 	beq.w	8007cca <forward_conv2d+0x652>
 8007944:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007948:	2900      	cmp	r1, #0
 800794a:	f000 8182 	beq.w	8007c52 <forward_conv2d+0x5da>
 800794e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8007952:	fb93 f1f0 	sdiv	r1, r3, r0
 8007956:	fb00 3111 	mls	r1, r0, r1, r3
 800795a:	1a41      	subs	r1, r0, r1
 800795c:	1ad2      	subs	r2, r2, r3
 800795e:	fb91 f5f0 	sdiv	r5, r1, r0
 8007962:	fb00 1515 	mls	r5, r0, r5, r1
 8007966:	1b52      	subs	r2, r2, r5
 8007968:	4601      	mov	r1, r0
 800796a:	4402      	add	r2, r0
 800796c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007970:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 8007974:	f8c7 b020 	str.w	fp, [r7, #32]
 8007978:	4604      	mov	r4, r0
 800797a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800797e:	fbb4 f4f0 	udiv	r4, r4, r0
 8007982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007984:	3a01      	subs	r2, #1
 8007986:	fb92 f8f1 	sdiv	r8, r2, r1
 800798a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800798e:	eba0 0c04 	sub.w	ip, r0, r4
 8007992:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007996:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800799a:	4614      	mov	r4, r2
 800799c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80079a0:	fbb4 f2f2 	udiv	r2, r4, r2
 80079a4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80079a8:	657a      	str	r2, [r7, #84]	; 0x54
 80079aa:	441d      	add	r5, r3
 80079ac:	fb0e f000 	mul.w	r0, lr, r0
 80079b0:	440b      	add	r3, r1
 80079b2:	eba6 0608 	sub.w	r6, r6, r8
 80079b6:	fb04 f505 	mul.w	r5, r4, r5
 80079ba:	3b01      	subs	r3, #1
 80079bc:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80079c0:	fb93 f3f4 	sdiv	r3, r3, r4
 80079c4:	fb00 f406 	mul.w	r4, r0, r6
 80079c8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80079cc:	66fd      	str	r5, [r7, #108]	; 0x6c
 80079ce:	0091      	lsls	r1, r2, #2
 80079d0:	fb00 f003 	mul.w	r0, r0, r3
 80079d4:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 80079d8:	6538      	str	r0, [r7, #80]	; 0x50
 80079da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079de:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80079e2:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80079e6:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80079ea:	1ac3      	subs	r3, r0, r3
 80079ec:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80079f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079f4:	008b      	lsls	r3, r1, #2
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
 80079f8:	00d3      	lsls	r3, r2, #3
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8007a12:	673b      	str	r3, [r7, #112]	; 0x70
 8007a14:	46c2      	mov	sl, r8
 8007a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a1e:	eb03 0c02 	add.w	ip, r3, r2
 8007a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f2c0 813b 	blt.w	8007ca2 <forward_conv2d+0x62a>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8007a30:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8007a34:	4605      	mov	r5, r0
 8007a36:	4606      	mov	r6, r0
 8007a38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a40:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007a44:	4413      	add	r3, r2
 8007a46:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007a50:	428b      	cmp	r3, r1
 8007a52:	bf94      	ite	ls
 8007a54:	ebc6 0303 	rsbls	r3, r6, r3
 8007a58:	ebc6 0301 	rsbhi	r3, r6, r1
 8007a5c:	4415      	add	r5, r2
 8007a5e:	1a1b      	subs	r3, r3, r0
 8007a60:	00a4      	lsls	r4, r4, #2
 8007a62:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8007a66:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8007a6a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007a6e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007a70:	4602      	mov	r2, r0
 8007a72:	2800      	cmp	r0, #0
 8007a74:	bf08      	it	eq
 8007a76:	4662      	moveq	r2, ip
 8007a78:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a7c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007a80:	fb91 f1f0 	sdiv	r1, r1, r0
 8007a84:	4429      	add	r1, r5
 8007a86:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8007a8a:	fb0e 5501 	mla	r5, lr, r1, r5
 8007a8e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007a92:	4403      	add	r3, r0
 8007a94:	fb01 6104 	mla	r1, r1, r4, r6
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	fb93 f6f0 	sdiv	r6, r3, r0
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8007aa4:	fb06 3110 	mls	r1, r6, r0, r3
 8007aa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007aac:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007ab0:	4562      	cmp	r2, ip
 8007ab2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007ab6:	bf08      	it	eq
 8007ab8:	eeb0 6a48 	vmoveq.f32	s12, s16
 8007abc:	1b9b      	subs	r3, r3, r6
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d076      	beq.n	8007bb0 <forward_conv2d+0x538>
 8007ac2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007ac6:	fb0e f803 	mul.w	r8, lr, r3
 8007aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007acc:	fb00 fb01 	mul.w	fp, r0, r1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d06d      	beq.n	8007bb0 <forward_conv2d+0x538>
 8007ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad8:	18d3      	adds	r3, r2, r3
 8007ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8007aea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	4413      	add	r3, r2
 8007af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	4413      	add	r3, r2
 8007afc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b04:	ecf3 7a01 	vldmia	r3!, {s15}
 8007b08:	f1ba 0f00 	cmp.w	sl, #0
 8007b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007b14:	f340 80c3 	ble.w	8007c9e <forward_conv2d+0x626>
 8007b18:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007b1c:	f04f 0c00 	mov.w	ip, #0
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	dd1f      	ble.n	8007b64 <forward_conv2d+0x4ec>
 8007b24:	2100      	movs	r1, #0
 8007b26:	eb00 040e 	add.w	r4, r0, lr
 8007b2a:	4284      	cmp	r4, r0
 8007b2c:	d910      	bls.n	8007b50 <forward_conv2d+0x4d8>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	462a      	mov	r2, r5
 8007b32:	ecb3 7a01 	vldmia	r3!, {s14}
 8007b36:	ecf2 6a01 	vldmia	r2!, {s13}
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b40:	d8f7      	bhi.n	8007b32 <forward_conv2d+0x4ba>
 8007b42:	43c3      	mvns	r3, r0
 8007b44:	441c      	add	r4, r3
 8007b46:	f024 0403 	bic.w	r4, r4, #3
 8007b4a:	3404      	adds	r4, #4
 8007b4c:	4425      	add	r5, r4
 8007b4e:	4420      	add	r0, r4
 8007b50:	3101      	adds	r1, #1
 8007b52:	428e      	cmp	r6, r1
 8007b54:	4448      	add	r0, r9
 8007b56:	d1e6      	bne.n	8007b26 <forward_conv2d+0x4ae>
 8007b58:	e004      	b.n	8007b64 <forward_conv2d+0x4ec>
 8007b5a:	bf00      	nop
 8007b5c:	00000000 	.word	0x00000000
 8007b60:	080072bd 	.word	0x080072bd
 8007b64:	f10c 0c01 	add.w	ip, ip, #1
 8007b68:	45e2      	cmp	sl, ip
 8007b6a:	4458      	add	r0, fp
 8007b6c:	4445      	add	r5, r8
 8007b6e:	d1d7      	bne.n	8007b20 <forward_conv2d+0x4a8>
 8007b70:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b78:	441d      	add	r5, r3
 8007b7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b7e:	ece3 7a01 	vstmia	r3!, {s15}
 8007b82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d1b8      	bne.n	8007b00 <forward_conv2d+0x488>
 8007b8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b96:	4472      	add	r2, lr
 8007b98:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b9e:	1a52      	subs	r2, r2, r1
 8007ba0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007ba4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007ba8:	3301      	adds	r3, #1
 8007baa:	429a      	cmp	r2, r3
 8007bac:	667b      	str	r3, [r7, #100]	; 0x64
 8007bae:	d19c      	bne.n	8007aea <forward_conv2d+0x472>
 8007bb0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007bb4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4410      	add	r0, r2
 8007bbe:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007bc2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8007bc6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8007bca:	4401      	add	r1, r0
 8007bcc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8007bd0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007bd4:	1a8a      	subs	r2, r1, r2
 8007bd6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8007bda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007bde:	3301      	adds	r3, #1
 8007be0:	429a      	cmp	r2, r3
 8007be2:	673b      	str	r3, [r7, #112]	; 0x70
 8007be4:	f47f af17 	bne.w	8007a16 <forward_conv2d+0x39e>
 8007be8:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8007bec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bf0:	b37b      	cbz	r3, 8007c52 <forward_conv2d+0x5da>
 8007bf2:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8007bf6:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8007bfa:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 8007bfe:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8007c02:	2500      	movs	r5, #0
 8007c04:	46a2      	mov	sl, r4
 8007c06:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007c0a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8007c0e:	f8c2 a008 	str.w	sl, [r2, #8]
 8007c12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007c16:	4633      	mov	r3, r6
 8007c18:	4641      	mov	r1, r8
 8007c1a:	4416      	add	r6, r2
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007c22:	47a0      	blx	r4
 8007c24:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007c28:	4492      	add	sl, r2
 8007c2a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007c2e:	eba6 0309 	sub.w	r3, r6, r9
 8007c32:	4293      	cmp	r3, r2
 8007c34:	bfa8      	it	ge
 8007c36:	464e      	movge	r6, r9
 8007c38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c3c:	3501      	adds	r5, #1
 8007c3e:	42ab      	cmp	r3, r5
 8007c40:	d1e1      	bne.n	8007c06 <forward_conv2d+0x58e>
 8007c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	609a      	str	r2, [r3, #8]
 8007c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c64:	4610      	mov	r0, r2
 8007c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c6a:	4418      	add	r0, r3
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c78:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c86:	3101      	adds	r1, #1
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	67f9      	str	r1, [r7, #124]	; 0x7c
 8007c8c:	f47f ae42 	bne.w	8007914 <forward_conv2d+0x29c>
 8007c90:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8007c94:	46bd      	mov	sp, r7
 8007c96:	ecbd 8b10 	vpop	{d8-d15}
 8007c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	e768      	b.n	8007b74 <forward_conv2d+0x4fc>
 8007ca2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007ca6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8007caa:	fb90 f3f2 	sdiv	r3, r0, r2
 8007cae:	fb02 0313 	mls	r3, r2, r3, r0
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	fb93 f0f2 	sdiv	r0, r3, r2
 8007cba:	fb02 3010 	mls	r0, r2, r0, r3
 8007cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc0:	462e      	mov	r6, r5
 8007cc2:	18c4      	adds	r4, r0, r3
 8007cc4:	eb02 0805 	add.w	r8, r2, r5
 8007cc8:	e6b6      	b.n	8007a38 <forward_conv2d+0x3c0>
 8007cca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007ccc:	2901      	cmp	r1, #1
 8007cce:	f47f ae39 	bne.w	8007944 <forward_conv2d+0x2cc>
 8007cd2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	d0bb      	beq.n	8007c52 <forward_conv2d+0x5da>
 8007cda:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8007cde:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007ce2:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8007ce6:	fbb1 f5f0 	udiv	r5, r1, r0
 8007cea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007cee:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8007cf2:	633d      	str	r5, [r7, #48]	; 0x30
 8007cf4:	1ad2      	subs	r2, r2, r3
 8007cf6:	1a8c      	subs	r4, r1, r2
 8007cf8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cfc:	00b2      	lsls	r2, r6, #2
 8007cfe:	fb02 f204 	mul.w	r2, r2, r4
 8007d02:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8007d06:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8007d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d0c:	0082      	lsls	r2, r0, #2
 8007d0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007d10:	00ca      	lsls	r2, r1, #3
 8007d12:	603a      	str	r2, [r7, #0]
 8007d14:	00aa      	lsls	r2, r5, #2
 8007d16:	60ba      	str	r2, [r7, #8]
 8007d18:	fb03 f206 	mul.w	r2, r3, r6
 8007d1c:	673a      	str	r2, [r7, #112]	; 0x70
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	fb02 f303 	mul.w	r3, r2, r3
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34
 8007d26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f2c0 8110 	blt.w	8007f6e <forward_conv2d+0x8f6>
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d52:	460a      	mov	r2, r1
 8007d54:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8007d58:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8007d5c:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8007d60:	4420      	add	r0, r4
 8007d62:	4408      	add	r0, r1
 8007d64:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8007d68:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8007d6c:	190c      	adds	r4, r1, r4
 8007d6e:	42ac      	cmp	r4, r5
 8007d70:	bf28      	it	cs
 8007d72:	462c      	movcs	r4, r5
 8007d74:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8007d78:	0080      	lsls	r0, r0, #2
 8007d7a:	1aa4      	subs	r4, r4, r2
 8007d7c:	2d00      	cmp	r5, #0
 8007d7e:	f000 80e7 	beq.w	8007f50 <forward_conv2d+0x8d8>
 8007d82:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007d86:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8007d8a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8007d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d92:	42b5      	cmp	r5, r6
 8007d94:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8007d98:	eba3 0204 	sub.w	r2, r3, r4
 8007d9c:	eba1 0104 	sub.w	r1, r1, r4
 8007da0:	bf08      	it	eq
 8007da2:	eef0 3a48 	vmoveq.f32	s7, s16
 8007da6:	462b      	mov	r3, r5
 8007da8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8007daa:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8007dae:	4428      	add	r0, r5
 8007db0:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8007db4:	fb05 6e00 	mla	lr, r5, r0, r6
 8007db8:	eb0e 000b 	add.w	r0, lr, fp
 8007dbc:	4586      	cmp	lr, r0
 8007dbe:	6238      	str	r0, [r7, #32]
 8007dc0:	f080 80a5 	bcs.w	8007f0e <forward_conv2d+0x896>
 8007dc4:	0092      	lsls	r2, r2, #2
 8007dc6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dcc:	fb0b f101 	mul.w	r1, fp, r1
 8007dd0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007dd4:	f024 0803 	bic.w	r8, r4, #3
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	f000 8098 	beq.w	8007f0e <forward_conv2d+0x896>
 8007dde:	f108 32ff 	add.w	r2, r8, #4294967295
 8007de2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007de4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007de8:	0892      	lsrs	r2, r2, #2
 8007dea:	3201      	adds	r2, #1
 8007dec:	4401      	add	r1, r0
 8007dee:	fb02 f00a 	mul.w	r0, r2, sl
 8007df2:	6578      	str	r0, [r7, #84]	; 0x54
 8007df4:	0110      	lsls	r0, r2, #4
 8007df6:	0092      	lsls	r2, r2, #2
 8007df8:	653a      	str	r2, [r7, #80]	; 0x50
 8007dfa:	1aca      	subs	r2, r1, r3
 8007dfc:	613a      	str	r2, [r7, #16]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	6678      	str	r0, [r7, #100]	; 0x64
 8007e02:	4413      	add	r3, r2
 8007e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0e:	4413      	add	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e20:	ecf3 6a01 	vldmia	r3!, {s13}
 8007e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007e32:	dd57      	ble.n	8007ee4 <forward_conv2d+0x86c>
 8007e34:	4676      	mov	r6, lr
 8007e36:	f04f 0c00 	mov.w	ip, #0
 8007e3a:	f1b8 0f00 	cmp.w	r8, #0
 8007e3e:	f340 8085 	ble.w	8007f4c <forward_conv2d+0x8d4>
 8007e42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007e46:	f109 0310 	add.w	r3, r9, #16
 8007e4a:	18b1      	adds	r1, r6, r2
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	4632      	mov	r2, r6
 8007e50:	eb02 050b 	add.w	r5, r2, fp
 8007e54:	ed95 7a00 	vldr	s14, [r5]
 8007e58:	ed53 7a03 	vldr	s15, [r3, #-12]
 8007e5c:	ed92 4a00 	vldr	s8, [r2]
 8007e60:	ed53 4a04 	vldr	s9, [r3, #-16]
 8007e64:	ed91 5a00 	vldr	s10, [r1]
 8007e68:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007e6c:	ed13 6a01 	vldr	s12, [r3, #-4]
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	eb01 050b 	add.w	r5, r1, fp
 8007e78:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e7c:	3004      	adds	r0, #4
 8007e7e:	4540      	cmp	r0, r8
 8007e80:	ed95 7a00 	vldr	s14, [r5]
 8007e84:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e88:	4452      	add	r2, sl
 8007e8a:	4451      	add	r1, sl
 8007e8c:	f103 0310 	add.w	r3, r3, #16
 8007e90:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007e94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007e98:	dbda      	blt.n	8007e50 <forward_conv2d+0x7d8>
 8007e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007e9e:	441e      	add	r6, r3
 8007ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ea2:	4499      	add	r9, r3
 8007ea4:	42a0      	cmp	r0, r4
 8007ea6:	da11      	bge.n	8007ecc <forward_conv2d+0x854>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4633      	mov	r3, r6
 8007eac:	4649      	mov	r1, r9
 8007eae:	edd3 7a00 	vldr	s15, [r3]
 8007eb2:	ecb1 7a01 	vldmia	r1!, {s14}
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	42a2      	cmp	r2, r4
 8007eba:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ebe:	445b      	add	r3, fp
 8007ec0:	d1f5      	bne.n	8007eae <forward_conv2d+0x836>
 8007ec2:	1a20      	subs	r0, r4, r0
 8007ec4:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8007ec8:	fb00 660b 	mla	r6, r0, fp, r6
 8007ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ed0:	441e      	add	r6, r3
 8007ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ed6:	4499      	add	r9, r3
 8007ed8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007edc:	f10c 0c01 	add.w	ip, ip, #1
 8007ee0:	4563      	cmp	r3, ip
 8007ee2:	d1aa      	bne.n	8007e3a <forward_conv2d+0x7c2>
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	4499      	add	r9, r3
 8007ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eea:	ece3 6a01 	vstmia	r3!, {s13}
 8007eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ef0:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d191      	bne.n	8007e1c <forward_conv2d+0x7a4>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	f10e 0e04 	add.w	lr, lr, #4
 8007f08:	459e      	cmp	lr, r3
 8007f0a:	f4ff af7d 	bcc.w	8007e08 <forward_conv2d+0x790>
 8007f0e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007f12:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f1a:	440a      	add	r2, r1
 8007f1c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007f20:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007f24:	4608      	mov	r0, r1
 8007f26:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007f2a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007f2e:	4410      	add	r0, r2
 8007f30:	1a8a      	subs	r2, r1, r2
 8007f32:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007f36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007f3a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8007f3e:	3301      	adds	r3, #1
 8007f40:	429a      	cmp	r2, r3
 8007f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f46:	f47f aefd 	bne.w	8007d44 <forward_conv2d+0x6cc>
 8007f4a:	e64f      	b.n	8007bec <forward_conv2d+0x574>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e7a9      	b.n	8007ea4 <forward_conv2d+0x82c>
 8007f50:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007f54:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	1b19      	subs	r1, r3, r4
 8007f5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f62:	eef0 3a48 	vmov.f32	s7, s16
 8007f66:	1b1a      	subs	r2, r3, r4
 8007f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f6c:	e71c      	b.n	8007da8 <forward_conv2d+0x730>
 8007f6e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f74:	460a      	mov	r2, r1
 8007f76:	440b      	add	r3, r1
 8007f78:	e6ec      	b.n	8007d54 <forward_conv2d+0x6dc>
 8007f7a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007f7c:	2801      	cmp	r0, #1
 8007f7e:	f47f ace1 	bne.w	8007944 <forward_conv2d+0x2cc>
 8007f82:	1ad2      	subs	r2, r2, r3
 8007f84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007f86:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8007f8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f90:	fb00 4101 	mla	r1, r0, r1, r4
 8007f94:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007f98:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8007f9c:	f080 8191 	bcs.w	80082c2 <forward_conv2d+0xc4a>
 8007fa0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007fa4:	2a00      	cmp	r2, #0
 8007fa6:	f43f ae21 	beq.w	8007bec <forward_conv2d+0x574>
 8007faa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fac:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fbc:	188b      	adds	r3, r1, r2
 8007fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8133 	beq.w	800824e <forward_conv2d+0xbd6>
 8007fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fec:	ed93 6a00 	vldr	s12, [r3]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ff6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 8101 	beq.w	8008202 <forward_conv2d+0xb8a>
 8008000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008004:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008008:	eb03 0802 	add.w	r8, r3, r2
 800800c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801c:	673b      	str	r3, [r7, #112]	; 0x70
 800801e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008022:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008026:	f04f 0b00 	mov.w	fp, #0
 800802a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800802e:	2b00      	cmp	r3, #0
 8008030:	f2c0 8104 	blt.w	800823c <forward_conv2d+0xbc4>
 8008034:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008038:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800803a:	2300      	movs	r3, #0
 800803c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008040:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008044:	eb02 0c04 	add.w	ip, r2, r4
 8008048:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800804c:	4540      	cmp	r0, r8
 800804e:	bf94      	ite	ls
 8008050:	ebc3 0300 	rsbls	r3, r3, r0
 8008054:	ebc3 0308 	rsbhi	r3, r3, r8
 8008058:	eba2 0903 	sub.w	r9, r2, r3
 800805c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008060:	1ac4      	subs	r4, r0, r3
 8008062:	fb03 f302 	mul.w	r3, r3, r2
 8008066:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800806a:	2a00      	cmp	r2, #0
 800806c:	f340 80e3 	ble.w	8008236 <forward_conv2d+0xbbe>
 8008070:	f023 050f 	bic.w	r5, r3, #15
 8008074:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8008078:	1e68      	subs	r0, r5, #1
 800807a:	0900      	lsrs	r0, r0, #4
 800807c:	3001      	adds	r0, #1
 800807e:	fb06 f204 	mul.w	r2, r6, r4
 8008082:	657a      	str	r2, [r7, #84]	; 0x54
 8008084:	0102      	lsls	r2, r0, #4
 8008086:	653a      	str	r2, [r7, #80]	; 0x50
 8008088:	fb06 f909 	mul.w	r9, r6, r9
 800808c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008090:	eef0 6a46 	vmov.f32	s13, s12
 8008094:	f04f 0e00 	mov.w	lr, #0
 8008098:	4662      	mov	r2, ip
 800809a:	2d00      	cmp	r5, #0
 800809c:	f340 80c9 	ble.w	8008232 <forward_conv2d+0xbba>
 80080a0:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80080a4:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80080a8:	2600      	movs	r6, #0
 80080aa:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80080ae:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80080b2:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 80080b6:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 80080ba:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 80080be:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80080c2:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80080c6:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80080ca:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80080ce:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80080d2:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80080d6:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80080da:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80080de:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80080e2:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80080e6:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80080ea:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80080ee:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80080f2:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80080f6:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80080fa:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 80080fe:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008102:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8008106:	ed50 3a04 	vldr	s7, [r0, #-16]
 800810a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800810e:	ed50 4a03 	vldr	s9, [r0, #-12]
 8008112:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008116:	ed50 5a02 	vldr	s11, [r0, #-8]
 800811a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800811e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008122:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8008126:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800812a:	3610      	adds	r6, #16
 800812c:	42ae      	cmp	r6, r5
 800812e:	ed14 fa01 	vldr	s30, [r4, #-4]
 8008132:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008136:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800813a:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800813e:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008142:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008146:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800814a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800814e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008152:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008156:	eee8 7a80 	vfma.f32	s15, s17, s0
 800815a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800815e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008162:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008166:	eee3 7a84 	vfma.f32	s15, s7, s8
 800816a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800816e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008172:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008176:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800817a:	db96      	blt.n	80080aa <forward_conv2d+0xa32>
 800817c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800817e:	4451      	add	r1, sl
 8008180:	4452      	add	r2, sl
 8008182:	4283      	cmp	r3, r0
 8008184:	dd0f      	ble.n	80081a6 <forward_conv2d+0xb2e>
 8008186:	4604      	mov	r4, r0
 8008188:	468c      	mov	ip, r1
 800818a:	4616      	mov	r6, r2
 800818c:	ecb6 7a01 	vldmia	r6!, {s14}
 8008190:	ecfc 7a01 	vldmia	ip!, {s15}
 8008194:	3401      	adds	r4, #1
 8008196:	42a3      	cmp	r3, r4
 8008198:	eee7 6a27 	vfma.f32	s13, s14, s15
 800819c:	d1f6      	bne.n	800818c <forward_conv2d+0xb14>
 800819e:	1a18      	subs	r0, r3, r0
 80081a0:	0080      	lsls	r0, r0, #2
 80081a2:	4402      	add	r2, r0
 80081a4:	4401      	add	r1, r0
 80081a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80081a8:	4402      	add	r2, r0
 80081aa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80081ae:	f10e 0e01 	add.w	lr, lr, #1
 80081b2:	4570      	cmp	r0, lr
 80081b4:	4449      	add	r1, r9
 80081b6:	f47f af70 	bne.w	800809a <forward_conv2d+0xa22>
 80081ba:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80081be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081c0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80081c4:	edc3 6a00 	vstr	s13, [r3]
 80081c8:	4608      	mov	r0, r1
 80081ca:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80081ce:	440b      	add	r3, r1
 80081d0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80081d4:	673b      	str	r3, [r7, #112]	; 0x70
 80081d6:	4410      	add	r0, r2
 80081d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081da:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80081de:	4608      	mov	r0, r1
 80081e0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80081e4:	4418      	add	r0, r3
 80081e6:	1acb      	subs	r3, r1, r3
 80081e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80081f0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80081f4:	f10b 0b01 	add.w	fp, fp, #1
 80081f8:	455b      	cmp	r3, fp
 80081fa:	eba8 0802 	sub.w	r8, r8, r2
 80081fe:	f47f af14 	bne.w	800802a <forward_conv2d+0x9b2>
 8008202:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800820c:	440a      	add	r2, r1
 800820e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008216:	3204      	adds	r2, #4
 8008218:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800821c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008220:	3301      	adds	r3, #1
 8008222:	429a      	cmp	r2, r3
 8008224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008228:	f47f aed9 	bne.w	8007fde <forward_conv2d+0x966>
 800822c:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 8008230:	e4dc      	b.n	8007bec <forward_conv2d+0x574>
 8008232:	2000      	movs	r0, #0
 8008234:	e7a5      	b.n	8008182 <forward_conv2d+0xb0a>
 8008236:	eef0 6a46 	vmov.f32	s13, s12
 800823a:	e7be      	b.n	80081ba <forward_conv2d+0xb42>
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008240:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008244:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008248:	eba8 0303 	sub.w	r3, r8, r3
 800824c:	e6f6      	b.n	800803c <forward_conv2d+0x9c4>
 800824e:	eeb0 6a48 	vmov.f32	s12, s16
 8008252:	e6d0      	b.n	8007ff6 <forward_conv2d+0x97e>
 8008254:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008258:	68ca      	ldr	r2, [r1, #12]
 800825a:	2a00      	cmp	r2, #0
 800825c:	f43f aaca 	beq.w	80077f4 <forward_conv2d+0x17c>
 8008260:	69b3      	ldr	r3, [r6, #24]
 8008262:	8818      	ldrh	r0, [r3, #0]
 8008264:	2803      	cmp	r0, #3
 8008266:	f240 819f 	bls.w	80085a8 <forward_conv2d+0xf30>
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	b32b      	cbz	r3, 80082bc <forward_conv2d+0xc44>
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	b31b      	cbz	r3, 80082bc <forward_conv2d+0xc44>
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	6889      	ldr	r1, [r1, #8]
 8008278:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008282:	9000      	str	r0, [sp, #0]
 8008284:	462b      	mov	r3, r5
 8008286:	4620      	mov	r0, r4
 8008288:	f7ff f9a6 	bl	80075d8 <ai_dict_decompress_f32>
 800828c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008290:	2c00      	cmp	r4, #0
 8008292:	bf18      	it	ne
 8008294:	4623      	movne	r3, r4
 8008296:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800829a:	f7ff baab 	b.w	80077f4 <forward_conv2d+0x17c>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f000 8185 	beq.w	80085ae <forward_conv2d+0xf36>
 80082a4:	6883      	ldr	r3, [r0, #8]
 80082a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082aa:	2301      	movs	r3, #1
 80082ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80082b8:	f7ff ba6d 	b.w	8007796 <forward_conv2d+0x11e>
 80082bc:	2300      	movs	r3, #0
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	deff      	udf	#255	; 0xff
 80082c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80082c6:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 80082ca:	320a      	adds	r2, #10
 80082cc:	f022 0207 	bic.w	r2, r2, #7
 80082d0:	ebad 0d02 	sub.w	sp, sp, r2
 80082d4:	aa02      	add	r2, sp, #8
 80082d6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082da:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80082de:	2a00      	cmp	r2, #0
 80082e0:	f000 814d 	beq.w	800857e <forward_conv2d+0xf06>
 80082e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082e6:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082f0:	657b      	str	r3, [r7, #84]	; 0x54
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082fa:	4413      	add	r3, r2
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800830a:	673b      	str	r3, [r7, #112]	; 0x70
 800830c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008310:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008314:	2300      	movs	r3, #0
 8008316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800831a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831c:	b13b      	cbz	r3, 800832e <forward_conv2d+0xcb6>
 800831e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008322:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008326:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800832a:	f000 fee9 	bl	8009100 <memcpy>
 800832e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8135 	beq.w	80085a2 <forward_conv2d+0xf2a>
 8008338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800833a:	ed93 6a00 	vldr	s12, [r3]
 800833e:	3304      	adds	r3, #4
 8008340:	673b      	str	r3, [r7, #112]	; 0x70
 8008342:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8101 	beq.w	800854e <forward_conv2d+0xed6>
 800834c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008350:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008354:	eb03 0802 	add.w	r8, r3, r2
 8008358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800836a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800836e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008372:	f04f 0b00 	mov.w	fp, #0
 8008376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800837a:	2b00      	cmp	r3, #0
 800837c:	f2c0 8108 	blt.w	8008590 <forward_conv2d+0xf18>
 8008380:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008386:	2300      	movs	r3, #0
 8008388:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800838c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008390:	eb02 0c04 	add.w	ip, r2, r4
 8008394:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008398:	4540      	cmp	r0, r8
 800839a:	bf94      	ite	ls
 800839c:	ebc3 0300 	rsbls	r3, r3, r0
 80083a0:	ebc3 0308 	rsbhi	r3, r3, r8
 80083a4:	eba2 0903 	sub.w	r9, r2, r3
 80083a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80083ac:	1ac4      	subs	r4, r0, r3
 80083ae:	fb03 f302 	mul.w	r3, r3, r2
 80083b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	f340 80e7 	ble.w	800858a <forward_conv2d+0xf12>
 80083bc:	f023 050f 	bic.w	r5, r3, #15
 80083c0:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 80083c4:	1e68      	subs	r0, r5, #1
 80083c6:	0900      	lsrs	r0, r0, #4
 80083c8:	3001      	adds	r0, #1
 80083ca:	fb06 f204 	mul.w	r2, r6, r4
 80083ce:	653a      	str	r2, [r7, #80]	; 0x50
 80083d0:	0102      	lsls	r2, r0, #4
 80083d2:	633a      	str	r2, [r7, #48]	; 0x30
 80083d4:	fb06 f909 	mul.w	r9, r6, r9
 80083d8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80083dc:	eef0 6a46 	vmov.f32	s13, s12
 80083e0:	f04f 0e00 	mov.w	lr, #0
 80083e4:	4662      	mov	r2, ip
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	f340 80cd 	ble.w	8008586 <forward_conv2d+0xf0e>
 80083ec:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80083f0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80083f4:	2600      	movs	r6, #0
 80083f6:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 80083fa:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80083fe:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008402:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008406:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800840a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800840e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008412:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 8008416:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800841a:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800841e:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 8008422:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008426:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800842a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800842e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008432:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8008436:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800843a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800843e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008442:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8008446:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800844a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800844e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8008452:	ed54 3a04 	vldr	s7, [r4, #-16]
 8008456:	ed10 4a04 	vldr	s8, [r0, #-16]
 800845a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800845e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008462:	ed54 5a02 	vldr	s11, [r4, #-8]
 8008466:	ed10 7a02 	vldr	s14, [r0, #-8]
 800846a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800846e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8008472:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008476:	3610      	adds	r6, #16
 8008478:	42b5      	cmp	r5, r6
 800847a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800847e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008482:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008486:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800848a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800848e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008492:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008496:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800849a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800849e:	eee9 7a89 	vfma.f32	s15, s19, s18
 80084a2:	eee8 7a80 	vfma.f32	s15, s17, s0
 80084a6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80084aa:	eee1 7a82 	vfma.f32	s15, s3, s4
 80084ae:	eee2 7a83 	vfma.f32	s15, s5, s6
 80084b2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80084b6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80084ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 80084be:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80084c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80084c6:	dc96      	bgt.n	80083f6 <forward_conv2d+0xd7e>
 80084c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ca:	4451      	add	r1, sl
 80084cc:	4452      	add	r2, sl
 80084ce:	4283      	cmp	r3, r0
 80084d0:	dd0f      	ble.n	80084f2 <forward_conv2d+0xe7a>
 80084d2:	4604      	mov	r4, r0
 80084d4:	468c      	mov	ip, r1
 80084d6:	4616      	mov	r6, r2
 80084d8:	ecb6 7a01 	vldmia	r6!, {s14}
 80084dc:	ecfc 7a01 	vldmia	ip!, {s15}
 80084e0:	3401      	adds	r4, #1
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80084e8:	d1f6      	bne.n	80084d8 <forward_conv2d+0xe60>
 80084ea:	1a18      	subs	r0, r3, r0
 80084ec:	0080      	lsls	r0, r0, #2
 80084ee:	4402      	add	r2, r0
 80084f0:	4401      	add	r1, r0
 80084f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80084f4:	4402      	add	r2, r0
 80084f6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80084fa:	f10e 0e01 	add.w	lr, lr, #1
 80084fe:	4570      	cmp	r0, lr
 8008500:	4449      	add	r1, r9
 8008502:	f47f af70 	bne.w	80083e6 <forward_conv2d+0xd6e>
 8008506:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800850a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008510:	edc3 6a00 	vstr	s13, [r3]
 8008514:	4608      	mov	r0, r1
 8008516:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800851a:	440b      	add	r3, r1
 800851c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008522:	4410      	add	r0, r2
 8008524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008526:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800852a:	4608      	mov	r0, r1
 800852c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008530:	4418      	add	r0, r3
 8008532:	1acb      	subs	r3, r1, r3
 8008534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008538:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800853c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8008540:	f10b 0b01 	add.w	fp, fp, #1
 8008544:	455b      	cmp	r3, fp
 8008546:	eba8 0802 	sub.w	r8, r8, r2
 800854a:	f47f af14 	bne.w	8008376 <forward_conv2d+0xcfe>
 800854e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008552:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800855a:	440a      	add	r2, r1
 800855c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008560:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008564:	3204      	adds	r2, #4
 8008566:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800856a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800856e:	3301      	adds	r3, #1
 8008570:	429a      	cmp	r2, r3
 8008572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008576:	f47f aed0 	bne.w	800831a <forward_conv2d+0xca2>
 800857a:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800857e:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 8008582:	f7ff bb33 	b.w	8007bec <forward_conv2d+0x574>
 8008586:	2000      	movs	r0, #0
 8008588:	e7a1      	b.n	80084ce <forward_conv2d+0xe56>
 800858a:	eef0 6a46 	vmov.f32	s13, s12
 800858e:	e7ba      	b.n	8008506 <forward_conv2d+0xe8e>
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008594:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008598:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800859c:	eba8 0303 	sub.w	r3, r8, r3
 80085a0:	e6f2      	b.n	8008388 <forward_conv2d+0xd10>
 80085a2:	eeb0 6a48 	vmov.f32	s12, s16
 80085a6:	e6cc      	b.n	8008342 <forward_conv2d+0xcca>
 80085a8:	2300      	movs	r3, #0
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	deff      	udf	#255	; 0xff
 80085ae:	4603      	mov	r3, r0
 80085b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085b8:	2301      	movs	r3, #1
 80085ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80085c2:	f7ff b8e8 	b.w	8007796 <forward_conv2d+0x11e>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d0f2      	beq.n	80085b0 <forward_conv2d+0xf38>
 80085ca:	6882      	ldr	r2, [r0, #8]
 80085cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085d0:	2301      	movs	r3, #1
 80085d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085d6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80085da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80085de:	f7ff b8da 	b.w	8007796 <forward_conv2d+0x11e>
 80085e2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80085e6:	f7ff b8b7 	b.w	8007758 <forward_conv2d+0xe0>
 80085ea:	3318      	adds	r3, #24
 80085ec:	d007      	beq.n	80085fe <forward_conv2d+0xf86>
 80085ee:	462a      	mov	r2, r5
 80085f0:	462c      	mov	r4, r5
 80085f2:	462b      	mov	r3, r5
 80085f4:	f7ff b86a 	b.w	80076cc <forward_conv2d+0x54>
 80085f8:	2300      	movs	r3, #0
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	deff      	udf	#255	; 0xff
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	deff      	udf	#255	; 0xff
 8008602:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8008606:	f7ff b850 	b.w	80076aa <forward_conv2d+0x32>
 800860a:	2300      	movs	r3, #0
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	deff      	udf	#255	; 0xff
 8008610:	6853      	ldr	r3, [r2, #4]
 8008612:	deff      	udf	#255	; 0xff
 8008614:	2200      	movs	r2, #0
 8008616:	f7ff b858 	b.w	80076ca <forward_conv2d+0x52>
 800861a:	bf00      	nop

0800861c <forward_dense>:
 800861c:	6983      	ldr	r3, [r0, #24]
 800861e:	881a      	ldrh	r2, [r3, #0]
 8008620:	2a00      	cmp	r2, #0
 8008622:	f000 80b5 	beq.w	8008790 <forward_dense+0x174>
 8008626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	ed2d 8b10 	vpush	{d8-d15}
 800862e:	685f      	ldr	r7, [r3, #4]
 8008630:	687e      	ldr	r6, [r7, #4]
 8008632:	b091      	sub	sp, #68	; 0x44
 8008634:	b106      	cbz	r6, 8008638 <forward_dense+0x1c>
 8008636:	6836      	ldr	r6, [r6, #0]
 8008638:	2a01      	cmp	r2, #1
 800863a:	f240 80a6 	bls.w	800878a <forward_dense+0x16e>
 800863e:	693d      	ldr	r5, [r7, #16]
 8008640:	b105      	cbz	r5, 8008644 <forward_dense+0x28>
 8008642:	682d      	ldr	r5, [r5, #0]
 8008644:	2a02      	cmp	r2, #2
 8008646:	f000 80a5 	beq.w	8008794 <forward_dense+0x178>
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 821b 	beq.w	8008a88 <forward_dense+0x46c>
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	9106      	str	r1, [sp, #24]
 8008656:	f117 0118 	adds.w	r1, r7, #24
 800865a:	f000 80c9 	beq.w	80087f0 <forward_dense+0x1d4>
 800865e:	8b39      	ldrh	r1, [r7, #24]
 8008660:	2901      	cmp	r1, #1
 8008662:	f240 820e 	bls.w	8008a82 <forward_dense+0x466>
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 80c4 	beq.w	80087f4 <forward_dense+0x1d8>
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	9b06      	ldr	r3, [sp, #24]
 8008672:	68ec      	ldr	r4, [r5, #12]
 8008674:	6998      	ldr	r0, [r3, #24]
 8008676:	68f1      	ldr	r1, [r6, #12]
 8008678:	6803      	ldr	r3, [r0, #0]
 800867a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800867e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8008682:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8008686:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800868a:	fa49 f101 	asr.w	r1, r9, r1
 800868e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008690:	2a03      	cmp	r2, #3
 8008692:	fb0e f10c 	mul.w	r1, lr, ip
 8008696:	6864      	ldr	r4, [r4, #4]
 8008698:	9108      	str	r1, [sp, #32]
 800869a:	f000 81de 	beq.w	8008a5a <forward_dense+0x43e>
 800869e:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80086a0:	b117      	cbz	r7, 80086a8 <forward_dense+0x8c>
 80086a2:	683f      	ldr	r7, [r7, #0]
 80086a4:	b107      	cbz	r7, 80086a8 <forward_dense+0x8c>
 80086a6:	69bf      	ldr	r7, [r7, #24]
 80086a8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	f000 81d7 	beq.w	8008a60 <forward_dense+0x444>
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	f000 81d4 	beq.w	8008a60 <forward_dense+0x444>
 80086b8:	f04f 0a00 	mov.w	sl, #0
 80086bc:	69ab      	ldr	r3, [r5, #24]
 80086be:	69b2      	ldr	r2, [r6, #24]
 80086c0:	6899      	ldr	r1, [r3, #8]
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	9104      	str	r1, [sp, #16]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	6897      	ldr	r7, [r2, #8]
 80086ca:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80086ce:	00a3      	lsls	r3, r4, #2
 80086d0:	9309      	str	r3, [sp, #36]	; 0x24
 80086d2:	18ce      	adds	r6, r1, r3
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d052      	beq.n	8008780 <forward_dense+0x164>
 80086da:	f1a8 0310 	sub.w	r3, r8, #16
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	3301      	adds	r3, #1
 80086e2:	019b      	lsls	r3, r3, #6
 80086e4:	930c      	str	r3, [sp, #48]	; 0x30
 80086e6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80086ea:	930a      	str	r3, [sp, #40]	; 0x28
 80086ec:	2300      	movs	r3, #0
 80086ee:	9305      	str	r3, [sp, #20]
 80086f0:	eddf aace 	vldr	s21, [pc, #824]	; 8008a2c <forward_dense+0x410>
 80086f4:	f008 030f 	and.w	r3, r8, #15
 80086f8:	930d      	str	r3, [sp, #52]	; 0x34
 80086fa:	9b06      	ldr	r3, [sp, #24]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	689d      	ldr	r5, [r3, #8]
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 818f 	beq.w	8008a26 <forward_dense+0x40a>
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	689c      	ldr	r4, [r3, #8]
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	f1ba 0f00 	cmp.w	sl, #0
 8008712:	d071      	beq.n	80087f8 <forward_dense+0x1dc>
 8008714:	42b3      	cmp	r3, r6
 8008716:	d229      	bcs.n	800876c <forward_dense+0x150>
 8008718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800871a:	469b      	mov	fp, r3
 800871c:	ab0f      	add	r3, sp, #60	; 0x3c
 800871e:	9303      	str	r3, [sp, #12]
 8008720:	2a04      	cmp	r2, #4
 8008722:	4633      	mov	r3, r6
 8008724:	4646      	mov	r6, r8
 8008726:	4698      	mov	r8, r3
 8008728:	d037      	beq.n	800879a <forward_dense+0x17e>
 800872a:	2c00      	cmp	r4, #0
 800872c:	f000 8180 	beq.w	8008a30 <forward_dense+0x414>
 8008730:	f8d4 c000 	ldr.w	ip, [r4]
 8008734:	9803      	ldr	r0, [sp, #12]
 8008736:	9600      	str	r6, [sp, #0]
 8008738:	463b      	mov	r3, r7
 800873a:	4629      	mov	r1, r5
 800873c:	4652      	mov	r2, sl
 800873e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008742:	f7fe fdbd 	bl	80072c0 <ai_dict8_dot_array_f32>
 8008746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008748:	f84b 3b04 	str.w	r3, [fp], #4
 800874c:	45c3      	cmp	fp, r8
 800874e:	f104 0404 	add.w	r4, r4, #4
 8008752:	444d      	add	r5, r9
 8008754:	d3e9      	bcc.n	800872a <forward_dense+0x10e>
 8008756:	4643      	mov	r3, r8
 8008758:	46b0      	mov	r8, r6
 800875a:	461e      	mov	r6, r3
 800875c:	9a04      	ldr	r2, [sp, #16]
 800875e:	43d3      	mvns	r3, r2
 8008760:	4433      	add	r3, r6
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	3304      	adds	r3, #4
 8008768:	18d3      	adds	r3, r2, r3
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	4417      	add	r7, r2
 8008772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008774:	4416      	add	r6, r2
 8008776:	9a08      	ldr	r2, [sp, #32]
 8008778:	3301      	adds	r3, #1
 800877a:	4293      	cmp	r3, r2
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	d1bc      	bne.n	80086fa <forward_dense+0xde>
 8008780:	b011      	add	sp, #68	; 0x44
 8008782:	ecbd 8b10 	vpop	{d8-d15}
 8008786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878a:	2300      	movs	r3, #0
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	deff      	udf	#255	; 0xff
 8008790:	6853      	ldr	r3, [r2, #4]
 8008792:	deff      	udf	#255	; 0xff
 8008794:	2300      	movs	r3, #0
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	deff      	udf	#255	; 0xff
 800879a:	b1a4      	cbz	r4, 80087c6 <forward_dense+0x1aa>
 800879c:	f8d4 c000 	ldr.w	ip, [r4]
 80087a0:	9803      	ldr	r0, [sp, #12]
 80087a2:	9600      	str	r6, [sp, #0]
 80087a4:	463b      	mov	r3, r7
 80087a6:	4629      	mov	r1, r5
 80087a8:	4652      	mov	r2, sl
 80087aa:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80087ae:	f7fe fe55 	bl	800745c <ai_dict4_dot_array_f32>
 80087b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b4:	f84b 3b04 	str.w	r3, [fp], #4
 80087b8:	45c3      	cmp	fp, r8
 80087ba:	f104 0404 	add.w	r4, r4, #4
 80087be:	444d      	add	r5, r9
 80087c0:	d2c9      	bcs.n	8008756 <forward_dense+0x13a>
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	d1ea      	bne.n	800879c <forward_dense+0x180>
 80087c6:	4634      	mov	r4, r6
 80087c8:	4646      	mov	r6, r8
 80087ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087ce:	9400      	str	r4, [sp, #0]
 80087d0:	463b      	mov	r3, r7
 80087d2:	4629      	mov	r1, r5
 80087d4:	4652      	mov	r2, sl
 80087d6:	4640      	mov	r0, r8
 80087d8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80087dc:	f7fe fe3e 	bl	800745c <ai_dict4_dot_array_f32>
 80087e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087e2:	f84b 3b04 	str.w	r3, [fp], #4
 80087e6:	45b3      	cmp	fp, r6
 80087e8:	444d      	add	r5, r9
 80087ea:	d3f0      	bcc.n	80087ce <forward_dense+0x1b2>
 80087ec:	46a0      	mov	r8, r4
 80087ee:	e7b5      	b.n	800875c <forward_dense+0x140>
 80087f0:	9107      	str	r1, [sp, #28]
 80087f2:	e73d      	b.n	8008670 <forward_dense+0x54>
 80087f4:	9307      	str	r3, [sp, #28]
 80087f6:	e73b      	b.n	8008670 <forward_dense+0x54>
 80087f8:	42b3      	cmp	r3, r6
 80087fa:	d2b7      	bcs.n	800876c <forward_dense+0x150>
 80087fc:	4618      	mov	r0, r3
 80087fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008800:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8008804:	eb07 0c03 	add.w	ip, r7, r3
 8008808:	469e      	mov	lr, r3
 800880a:	2c00      	cmp	r4, #0
 800880c:	f000 80ff 	beq.w	8008a0e <forward_dense+0x3f2>
 8008810:	f1b8 0f0f 	cmp.w	r8, #15
 8008814:	edd4 fa00 	vldr	s31, [r4]
 8008818:	eddf 6a84 	vldr	s13, [pc, #528]	; 8008a2c <forward_dense+0x410>
 800881c:	f104 0404 	add.w	r4, r4, #4
 8008820:	f240 80fd 	bls.w	8008a1e <forward_dense+0x402>
 8008824:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008828:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800882c:	4641      	mov	r1, r8
 800882e:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8008832:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008836:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800883a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800883e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8008842:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8008846:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800884a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800884e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8008852:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8008856:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800885a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800885e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8008862:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8008866:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800886a:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800886e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8008872:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8008876:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800887a:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800887e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8008882:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8008886:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800888a:	ed12 4a04 	vldr	s8, [r2, #-16]
 800888e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008892:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008896:	ed52 5a03 	vldr	s11, [r2, #-12]
 800889a:	ed13 6a02 	vldr	s12, [r3, #-8]
 800889e:	ed12 7a02 	vldr	s14, [r2, #-8]
 80088a2:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80088a6:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80088aa:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80088ae:	3910      	subs	r1, #16
 80088b0:	290f      	cmp	r1, #15
 80088b2:	ed52 ea01 	vldr	s29, [r2, #-4]
 80088b6:	ed13 ea01 	vldr	s28, [r3, #-4]
 80088ba:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80088be:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80088c2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80088c6:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80088ca:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80088ce:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80088d2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80088d6:	eee8 7a88 	vfma.f32	s15, s17, s16
 80088da:	eee0 7a20 	vfma.f32	s15, s0, s1
 80088de:	eee1 7a21 	vfma.f32	s15, s2, s3
 80088e2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80088e6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088ea:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088ee:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088f2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80088f6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80088fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80088fe:	d896      	bhi.n	800882e <forward_dense+0x212>
 8008900:	eb05 010e 	add.w	r1, r5, lr
 8008904:	465b      	mov	r3, fp
 8008906:	4662      	mov	r2, ip
 8008908:	2b00      	cmp	r3, #0
 800890a:	d075      	beq.n	80089f8 <forward_dense+0x3dc>
 800890c:	ed91 7a00 	vldr	s14, [r1]
 8008910:	edd2 7a00 	vldr	s15, [r2]
 8008914:	2b01      	cmp	r3, #1
 8008916:	eee7 6a27 	vfma.f32	s13, s14, s15
 800891a:	d06d      	beq.n	80089f8 <forward_dense+0x3dc>
 800891c:	ed91 7a01 	vldr	s14, [r1, #4]
 8008920:	edd2 7a01 	vldr	s15, [r2, #4]
 8008924:	2b02      	cmp	r3, #2
 8008926:	eee7 6a27 	vfma.f32	s13, s14, s15
 800892a:	d065      	beq.n	80089f8 <forward_dense+0x3dc>
 800892c:	ed91 7a02 	vldr	s14, [r1, #8]
 8008930:	edd2 7a02 	vldr	s15, [r2, #8]
 8008934:	2b03      	cmp	r3, #3
 8008936:	eee7 6a27 	vfma.f32	s13, s14, s15
 800893a:	d05d      	beq.n	80089f8 <forward_dense+0x3dc>
 800893c:	ed91 7a03 	vldr	s14, [r1, #12]
 8008940:	edd2 7a03 	vldr	s15, [r2, #12]
 8008944:	2b04      	cmp	r3, #4
 8008946:	eee7 6a27 	vfma.f32	s13, s14, s15
 800894a:	d055      	beq.n	80089f8 <forward_dense+0x3dc>
 800894c:	ed91 7a04 	vldr	s14, [r1, #16]
 8008950:	edd2 7a04 	vldr	s15, [r2, #16]
 8008954:	2b05      	cmp	r3, #5
 8008956:	eee7 6a27 	vfma.f32	s13, s14, s15
 800895a:	d04d      	beq.n	80089f8 <forward_dense+0x3dc>
 800895c:	ed91 7a05 	vldr	s14, [r1, #20]
 8008960:	edd2 7a05 	vldr	s15, [r2, #20]
 8008964:	2b06      	cmp	r3, #6
 8008966:	eee7 6a27 	vfma.f32	s13, s14, s15
 800896a:	d045      	beq.n	80089f8 <forward_dense+0x3dc>
 800896c:	ed91 7a06 	vldr	s14, [r1, #24]
 8008970:	edd2 7a06 	vldr	s15, [r2, #24]
 8008974:	2b07      	cmp	r3, #7
 8008976:	eee7 6a27 	vfma.f32	s13, s14, s15
 800897a:	d03d      	beq.n	80089f8 <forward_dense+0x3dc>
 800897c:	ed91 7a07 	vldr	s14, [r1, #28]
 8008980:	edd2 7a07 	vldr	s15, [r2, #28]
 8008984:	2b08      	cmp	r3, #8
 8008986:	eee7 6a27 	vfma.f32	s13, s14, s15
 800898a:	d035      	beq.n	80089f8 <forward_dense+0x3dc>
 800898c:	ed91 7a08 	vldr	s14, [r1, #32]
 8008990:	edd2 7a08 	vldr	s15, [r2, #32]
 8008994:	2b09      	cmp	r3, #9
 8008996:	eee7 6a27 	vfma.f32	s13, s14, s15
 800899a:	d02d      	beq.n	80089f8 <forward_dense+0x3dc>
 800899c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80089a0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80089a4:	2b0a      	cmp	r3, #10
 80089a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089aa:	d025      	beq.n	80089f8 <forward_dense+0x3dc>
 80089ac:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80089b0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089ba:	d01d      	beq.n	80089f8 <forward_dense+0x3dc>
 80089bc:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80089c0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80089c4:	2b0c      	cmp	r3, #12
 80089c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089ca:	d015      	beq.n	80089f8 <forward_dense+0x3dc>
 80089cc:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80089d0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80089d4:	2b0d      	cmp	r3, #13
 80089d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089da:	d00d      	beq.n	80089f8 <forward_dense+0x3dc>
 80089dc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80089e0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80089e4:	2b0e      	cmp	r3, #14
 80089e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089ea:	d005      	beq.n	80089f8 <forward_dense+0x3dc>
 80089ec:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80089f0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80089f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089f8:	444d      	add	r5, r9
 80089fa:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80089fe:	ece0 6a01 	vstmia	r0!, {s13}
 8008a02:	42b0      	cmp	r0, r6
 8008a04:	f4bf aeaa 	bcs.w	800875c <forward_dense+0x140>
 8008a08:	2c00      	cmp	r4, #0
 8008a0a:	f47f af01 	bne.w	8008810 <forward_dense+0x1f4>
 8008a0e:	f1b8 0f0f 	cmp.w	r8, #15
 8008a12:	eef0 fa6a 	vmov.f32	s31, s21
 8008a16:	eddf 6a05 	vldr	s13, [pc, #20]	; 8008a2c <forward_dense+0x410>
 8008a1a:	f63f af03 	bhi.w	8008824 <forward_dense+0x208>
 8008a1e:	4643      	mov	r3, r8
 8008a20:	4629      	mov	r1, r5
 8008a22:	463a      	mov	r2, r7
 8008a24:	e770      	b.n	8008908 <forward_dense+0x2ec>
 8008a26:	461c      	mov	r4, r3
 8008a28:	e670      	b.n	800870c <forward_dense+0xf0>
 8008a2a:	bf00      	nop
 8008a2c:	00000000 	.word	0x00000000
 8008a30:	4634      	mov	r4, r6
 8008a32:	4646      	mov	r6, r8
 8008a34:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a38:	9400      	str	r4, [sp, #0]
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4652      	mov	r2, sl
 8008a40:	4640      	mov	r0, r8
 8008a42:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008a46:	f7fe fc3b 	bl	80072c0 <ai_dict8_dot_array_f32>
 8008a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a4c:	f84b 3b04 	str.w	r3, [fp], #4
 8008a50:	455e      	cmp	r6, fp
 8008a52:	444d      	add	r5, r9
 8008a54:	d8f0      	bhi.n	8008a38 <forward_dense+0x41c>
 8008a56:	46a0      	mov	r8, r4
 8008a58:	e680      	b.n	800875c <forward_dense+0x140>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	deff      	udf	#255	; 0xff
 8008a60:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008a64:	2f00      	cmp	r7, #0
 8008a66:	f43f ae29 	beq.w	80086bc <forward_dense+0xa0>
 8008a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a6e:	f000 faf3 	bl	8009058 <ai_array_get_byte_size>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4602      	mov	r2, r0
 8008a76:	4651      	mov	r1, sl
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fb41 	bl	8009100 <memcpy>
 8008a7e:	4682      	mov	sl, r0
 8008a80:	e61c      	b.n	80086bc <forward_dense+0xa0>
 8008a82:	2300      	movs	r3, #0
 8008a84:	9307      	str	r3, [sp, #28]
 8008a86:	e5f3      	b.n	8008670 <forward_dense+0x54>
 8008a88:	9306      	str	r3, [sp, #24]
 8008a8a:	e5e4      	b.n	8008656 <forward_dense+0x3a>

08008a8c <nl_func_relu_array_f32>:
 8008a8c:	b410      	push	{r4}
 8008a8e:	698c      	ldr	r4, [r1, #24]
 8008a90:	6981      	ldr	r1, [r0, #24]
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	6889      	ldr	r1, [r1, #8]
 8008a96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008a9a:	3a01      	subs	r2, #1
 8008a9c:	0092      	lsls	r2, r2, #2
 8008a9e:	189b      	adds	r3, r3, r2
 8008aa0:	d216      	bcs.n	8008ad0 <nl_func_relu_array_f32+0x44>
 8008aa2:	3204      	adds	r2, #4
 8008aa4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008ad8 <nl_func_relu_array_f32+0x4c>
 8008aa8:	4411      	add	r1, r2
 8008aaa:	3304      	adds	r3, #4
 8008aac:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab8:	bfb8      	it	lt
 8008aba:	eef0 7a47 	vmovlt.f32	s15, s14
 8008abe:	ed61 7a01 	vstmdb	r1!, {s15}
 8008ac2:	68a0      	ldr	r0, [r4, #8]
 8008ac4:	f1a3 0208 	sub.w	r2, r3, #8
 8008ac8:	4290      	cmp	r0, r2
 8008aca:	f1a3 0304 	sub.w	r3, r3, #4
 8008ace:	d9ed      	bls.n	8008aac <nl_func_relu_array_f32+0x20>
 8008ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	00000000 	.word	0x00000000

08008adc <nl_func_sm_array_f32>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	ed2d 8b04 	vpush	{d8-d9}
 8008ae4:	b089      	sub	sp, #36	; 0x24
 8008ae6:	698f      	ldr	r7, [r1, #24]
 8008ae8:	6984      	ldr	r4, [r0, #24]
 8008aea:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8008aee:	68bd      	ldr	r5, [r7, #8]
 8008af0:	9402      	str	r4, [sp, #8]
 8008af2:	4626      	mov	r6, r4
 8008af4:	4696      	mov	lr, r2
 8008af6:	eba2 020c 	sub.w	r2, r2, ip
 8008afa:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8008afe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	68b6      	ldr	r6, [r6, #8]
 8008b04:	ebae 0e04 	sub.w	lr, lr, r4
 8008b08:	4295      	cmp	r5, r2
 8008b0a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8008b0e:	d354      	bcc.n	8008bba <nl_func_sm_array_f32+0xde>
 8008b10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008b14:	f1cc 0200 	rsb	r2, ip, #0
 8008b18:	00a4      	lsls	r4, r4, #2
 8008b1a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	9204      	str	r2, [sp, #16]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4262      	negs	r2, r4
 8008b26:	9205      	str	r2, [sp, #20]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008b2e:	9b02      	ldr	r3, [sp, #8]
 8008b30:	9a07      	ldr	r2, [sp, #28]
 8008b32:	60bd      	str	r5, [r7, #8]
 8008b34:	609e      	str	r6, [r3, #8]
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	6992      	ldr	r2, [r2, #24]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	6894      	ldr	r4, [r2, #8]
 8008b3e:	9a03      	ldr	r2, [sp, #12]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	2a01      	cmp	r2, #1
 8008b44:	ed93 8a00 	vldr	s16, [r3]
 8008b48:	d940      	bls.n	8008bcc <nl_func_sm_array_f32+0xf0>
 8008b4a:	9901      	ldr	r1, [sp, #4]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	eb03 0b01 	add.w	fp, r3, r1
 8008b52:	ecf2 7a01 	vldmia	r2!, {s15}
 8008b56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5e:	bfb8      	it	lt
 8008b60:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008b64:	4593      	cmp	fp, r2
 8008b66:	d1f4      	bne.n	8008b52 <nl_func_sm_array_f32+0x76>
 8008b68:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8008bd8 <nl_func_sm_array_f32+0xfc>
 8008b6c:	469a      	mov	sl, r3
 8008b6e:	46a1      	mov	r9, r4
 8008b70:	46a0      	mov	r8, r4
 8008b72:	ecba 0a01 	vldmia	sl!, {s0}
 8008b76:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008b7a:	f003 f81d 	bl	800bbb8 <expf>
 8008b7e:	45d3      	cmp	fp, sl
 8008b80:	eca8 0a01 	vstmia	r8!, {s0}
 8008b84:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008b88:	d1f3      	bne.n	8008b72 <nl_func_sm_array_f32+0x96>
 8008b8a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b92:	d00b      	beq.n	8008bac <nl_func_sm_array_f32+0xd0>
 8008b94:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	441c      	add	r4, r3
 8008b9c:	edd9 7a00 	vldr	s15, [r9]
 8008ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ba4:	ece9 7a01 	vstmia	r9!, {s15}
 8008ba8:	454c      	cmp	r4, r9
 8008baa:	d1f7      	bne.n	8008b9c <nl_func_sm_array_f32+0xc0>
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	441d      	add	r5, r3
 8008bb2:	9b05      	ldr	r3, [sp, #20]
 8008bb4:	42aa      	cmp	r2, r5
 8008bb6:	441e      	add	r6, r3
 8008bb8:	d9b9      	bls.n	8008b2e <nl_func_sm_array_f32+0x52>
 8008bba:	60ba      	str	r2, [r7, #8]
 8008bbc:	9a02      	ldr	r2, [sp, #8]
 8008bbe:	68d3      	ldr	r3, [r2, #12]
 8008bc0:	6093      	str	r3, [r2, #8]
 8008bc2:	b009      	add	sp, #36	; 0x24
 8008bc4:	ecbd 8b04 	vpop	{d8-d9}
 8008bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bcc:	2a00      	cmp	r2, #0
 8008bce:	d0ed      	beq.n	8008bac <nl_func_sm_array_f32+0xd0>
 8008bd0:	9a01      	ldr	r2, [sp, #4]
 8008bd2:	eb03 0b02 	add.w	fp, r3, r2
 8008bd6:	e7c7      	b.n	8008b68 <nl_func_sm_array_f32+0x8c>
 8008bd8:	00000000 	.word	0x00000000

08008bdc <nl_func_relu_generic_array_f32>:
 8008bdc:	b430      	push	{r4, r5}
 8008bde:	6989      	ldr	r1, [r1, #24]
 8008be0:	6980      	ldr	r0, [r0, #24]
 8008be2:	edd3 6a02 	vldr	s13, [r3, #8]
 8008be6:	688c      	ldr	r4, [r1, #8]
 8008be8:	6880      	ldr	r0, [r0, #8]
 8008bea:	ed93 7a00 	vldr	s14, [r3]
 8008bee:	ed93 6a01 	vldr	s12, [r3, #4]
 8008bf2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008bfc:	0092      	lsls	r2, r2, #2
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	4410      	add	r0, r2
 8008c04:	4422      	add	r2, r4
 8008c06:	d421      	bmi.n	8008c4c <nl_func_relu_generic_array_f32+0x70>
 8008c08:	4294      	cmp	r4, r2
 8008c0a:	d83d      	bhi.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008c0c:	1d13      	adds	r3, r2, #4
 8008c0e:	1d02      	adds	r2, r0, #4
 8008c10:	e010      	b.n	8008c34 <nl_func_relu_generic_array_f32+0x58>
 8008c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008c1e:	d501      	bpl.n	8008c24 <nl_func_relu_generic_array_f32+0x48>
 8008c20:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008c24:	ed62 7a01 	vstmdb	r2!, {s15}
 8008c28:	6888      	ldr	r0, [r1, #8]
 8008c2a:	f1a3 0408 	sub.w	r4, r3, #8
 8008c2e:	4284      	cmp	r4, r0
 8008c30:	462b      	mov	r3, r5
 8008c32:	d329      	bcc.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008c34:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008c38:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c40:	f1a3 0504 	sub.w	r5, r3, #4
 8008c44:	d4e5      	bmi.n	8008c12 <nl_func_relu_generic_array_f32+0x36>
 8008c46:	eef0 7a66 	vmov.f32	s15, s13
 8008c4a:	e7eb      	b.n	8008c24 <nl_func_relu_generic_array_f32+0x48>
 8008c4c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c54:	d01a      	beq.n	8008c8c <nl_func_relu_generic_array_f32+0xb0>
 8008c56:	4294      	cmp	r4, r2
 8008c58:	d816      	bhi.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008c5a:	1d13      	adds	r3, r2, #4
 8008c5c:	1d02      	adds	r2, r0, #4
 8008c5e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008c62:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c6a:	f1a3 0408 	sub.w	r4, r3, #8
 8008c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c72:	f1a3 0004 	sub.w	r0, r3, #4
 8008c76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	d51e      	bpl.n	8008cbc <nl_func_relu_generic_array_f32+0xe0>
 8008c7e:	ed62 6a01 	vstmdb	r2!, {s13}
 8008c82:	688b      	ldr	r3, [r1, #8]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d91e      	bls.n	8008cc6 <nl_func_relu_generic_array_f32+0xea>
 8008c88:	bc30      	pop	{r4, r5}
 8008c8a:	4770      	bx	lr
 8008c8c:	4294      	cmp	r4, r2
 8008c8e:	d8fb      	bhi.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008c90:	1d13      	adds	r3, r2, #4
 8008c92:	2500      	movs	r5, #0
 8008c94:	1d02      	adds	r2, r0, #4
 8008c96:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c9e:	f1a3 0408 	sub.w	r4, r3, #8
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	f1a3 0004 	sub.w	r0, r3, #4
 8008caa:	4623      	mov	r3, r4
 8008cac:	db0d      	blt.n	8008cca <nl_func_relu_generic_array_f32+0xee>
 8008cae:	ed62 7a01 	vstmdb	r2!, {s15}
 8008cb2:	688b      	ldr	r3, [r1, #8]
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	d8e7      	bhi.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	e7ec      	b.n	8008c96 <nl_func_relu_generic_array_f32+0xba>
 8008cbc:	ed62 7a01 	vstmdb	r2!, {s15}
 8008cc0:	688c      	ldr	r4, [r1, #8]
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d8e0      	bhi.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	e7c9      	b.n	8008c5e <nl_func_relu_generic_array_f32+0x82>
 8008cca:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008cce:	688c      	ldr	r4, [r1, #8]
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	d8d9      	bhi.n	8008c88 <nl_func_relu_generic_array_f32+0xac>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	e7de      	b.n	8008c96 <nl_func_relu_generic_array_f32+0xba>

08008cd8 <forward_relu>:
 8008cd8:	6982      	ldr	r2, [r0, #24]
 8008cda:	8813      	ldrh	r3, [r2, #0]
 8008cdc:	b333      	cbz	r3, 8008d2c <forward_relu+0x54>
 8008cde:	6852      	ldr	r2, [r2, #4]
 8008ce0:	6851      	ldr	r1, [r2, #4]
 8008ce2:	b101      	cbz	r1, 8008ce6 <forward_relu+0xe>
 8008ce4:	6809      	ldr	r1, [r1, #0]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d91d      	bls.n	8008d26 <forward_relu+0x4e>
 8008cea:	b4f0      	push	{r4, r5, r6, r7}
 8008cec:	6917      	ldr	r7, [r2, #16]
 8008cee:	b107      	cbz	r7, 8008cf2 <forward_relu+0x1a>
 8008cf0:	683f      	ldr	r7, [r7, #0]
 8008cf2:	688c      	ldr	r4, [r1, #8]
 8008cf4:	69c3      	ldr	r3, [r0, #28]
 8008cf6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d044      	beq.n	8008d88 <forward_relu+0xb0>
 8008cfe:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8008d02:	2d01      	cmp	r5, #1
 8008d04:	d014      	beq.n	8008d30 <forward_relu+0x58>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d074      	beq.n	8008df4 <forward_relu+0x11c>
 8008d0a:	68ce      	ldr	r6, [r1, #12]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008d12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d16:	42a6      	cmp	r6, r4
 8008d18:	fb05 f202 	mul.w	r2, r5, r2
 8008d1c:	d1f9      	bne.n	8008d12 <forward_relu+0x3a>
 8008d1e:	4638      	mov	r0, r7
 8008d20:	bcf0      	pop	{r4, r5, r6, r7}
 8008d22:	f7ff bf5b 	b.w	8008bdc <nl_func_relu_generic_array_f32>
 8008d26:	2300      	movs	r3, #0
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	deff      	udf	#255	; 0xff
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	deff      	udf	#255	; 0xff
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	6988      	ldr	r0, [r1, #24]
 8008d34:	6896      	ldr	r6, [r2, #8]
 8008d36:	ed93 7a00 	vldr	s14, [r3]
 8008d3a:	6882      	ldr	r2, [r0, #8]
 8008d3c:	b184      	cbz	r4, 8008d60 <forward_relu+0x88>
 8008d3e:	68cf      	ldr	r7, [r1, #12]
 8008d40:	462b      	mov	r3, r5
 8008d42:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8008d46:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008d4a:	42a7      	cmp	r7, r4
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	d1f9      	bne.n	8008d46 <forward_relu+0x6e>
 8008d52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d56:	3b01      	subs	r3, #1
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	18d2      	adds	r2, r2, r3
 8008d5c:	441e      	add	r6, r3
 8008d5e:	d23f      	bcs.n	8008de0 <forward_relu+0x108>
 8008d60:	1d13      	adds	r3, r2, #4
 8008d62:	2500      	movs	r5, #0
 8008d64:	1d32      	adds	r2, r6, #4
 8008d66:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d72:	f1a3 0104 	sub.w	r1, r3, #4
 8008d76:	d835      	bhi.n	8008de4 <forward_relu+0x10c>
 8008d78:	ed62 7a01 	vstmdb	r2!, {s15}
 8008d7c:	6884      	ldr	r4, [r0, #8]
 8008d7e:	3b08      	subs	r3, #8
 8008d80:	429c      	cmp	r4, r3
 8008d82:	d82d      	bhi.n	8008de0 <forward_relu+0x108>
 8008d84:	460b      	mov	r3, r1
 8008d86:	e7ee      	b.n	8008d66 <forward_relu+0x8e>
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	698d      	ldr	r5, [r1, #24]
 8008d8c:	6898      	ldr	r0, [r3, #8]
 8008d8e:	68ab      	ldr	r3, [r5, #8]
 8008d90:	b184      	cbz	r4, 8008db4 <forward_relu+0xdc>
 8008d92:	68ce      	ldr	r6, [r1, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008d9a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008d9e:	42a6      	cmp	r6, r4
 8008da0:	fb01 f202 	mul.w	r2, r1, r2
 8008da4:	d1f9      	bne.n	8008d9a <forward_relu+0xc2>
 8008da6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008daa:	3a01      	subs	r2, #1
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	189b      	adds	r3, r3, r2
 8008db0:	4410      	add	r0, r2
 8008db2:	d215      	bcs.n	8008de0 <forward_relu+0x108>
 8008db4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008df8 <forward_relu+0x120>
 8008db8:	3304      	adds	r3, #4
 8008dba:	1d01      	adds	r1, r0, #4
 8008dbc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc8:	bfb8      	it	lt
 8008dca:	eef0 7a47 	vmovlt.f32	s15, s14
 8008dce:	ed61 7a01 	vstmdb	r1!, {s15}
 8008dd2:	68a8      	ldr	r0, [r5, #8]
 8008dd4:	f1a3 0208 	sub.w	r2, r3, #8
 8008dd8:	4290      	cmp	r0, r2
 8008dda:	f1a3 0304 	sub.w	r3, r3, #4
 8008dde:	d9ed      	bls.n	8008dbc <forward_relu+0xe4>
 8008de0:	bcf0      	pop	{r4, r5, r6, r7}
 8008de2:	4770      	bx	lr
 8008de4:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008de8:	6884      	ldr	r4, [r0, #8]
 8008dea:	3b08      	subs	r3, #8
 8008dec:	429c      	cmp	r4, r3
 8008dee:	d8f7      	bhi.n	8008de0 <forward_relu+0x108>
 8008df0:	460b      	mov	r3, r1
 8008df2:	e7b8      	b.n	8008d66 <forward_relu+0x8e>
 8008df4:	2201      	movs	r2, #1
 8008df6:	e792      	b.n	8008d1e <forward_relu+0x46>
 8008df8:	00000000 	.word	0x00000000

08008dfc <forward_sm>:
 8008dfc:	6982      	ldr	r2, [r0, #24]
 8008dfe:	8813      	ldrh	r3, [r2, #0]
 8008e00:	b32b      	cbz	r3, 8008e4e <forward_sm+0x52>
 8008e02:	6852      	ldr	r2, [r2, #4]
 8008e04:	6851      	ldr	r1, [r2, #4]
 8008e06:	b101      	cbz	r1, 8008e0a <forward_sm+0xe>
 8008e08:	6809      	ldr	r1, [r1, #0]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d91c      	bls.n	8008e48 <forward_sm+0x4c>
 8008e0e:	6913      	ldr	r3, [r2, #16]
 8008e10:	b1c3      	cbz	r3, 8008e44 <forward_sm+0x48>
 8008e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	688c      	ldr	r4, [r1, #8]
 8008e18:	68c3      	ldr	r3, [r0, #12]
 8008e1a:	68ce      	ldr	r6, [r1, #12]
 8008e1c:	685f      	ldr	r7, [r3, #4]
 8008e1e:	6873      	ldr	r3, [r6, #4]
 8008e20:	0a24      	lsrs	r4, r4, #8
 8008e22:	b083      	sub	sp, #12
 8008e24:	d015      	beq.n	8008e52 <forward_sm+0x56>
 8008e26:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e30:	42a6      	cmp	r6, r4
 8008e32:	fb05 f202 	mul.w	r2, r5, r2
 8008e36:	d1f9      	bne.n	8008e2c <forward_sm+0x30>
 8008e38:	e9cd 3700 	strd	r3, r7, [sp]
 8008e3c:	f7ff fe4e 	bl	8008adc <nl_func_sm_array_f32>
 8008e40:	b003      	add	sp, #12
 8008e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	deff      	udf	#255	; 0xff
 8008e48:	2300      	movs	r3, #0
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	deff      	udf	#255	; 0xff
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	deff      	udf	#255	; 0xff
 8008e52:	2201      	movs	r2, #1
 8008e54:	e9cd 3700 	strd	r3, r7, [sp]
 8008e58:	f7ff fe40 	bl	8008adc <nl_func_sm_array_f32>
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e60 <ai_check_custom_types>:
 8008e60:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <ai_check_custom_types+0x50>)
 8008e62:	b082      	sub	sp, #8
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	b118      	cbz	r0, 8008e72 <ai_check_custom_types+0x12>
 8008e6a:	7803      	ldrb	r3, [r0, #0]
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d002      	beq.n	8008e76 <ai_check_custom_types+0x16>
 8008e70:	2000      	movs	r0, #0
 8008e72:	b002      	add	sp, #8
 8008e74:	4770      	bx	lr
 8008e76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <ai_check_custom_types+0x28>
 8008e7e:	2001      	movs	r0, #1
 8008e80:	f080 0001 	eor.w	r0, r0, #1
 8008e84:	b002      	add	sp, #8
 8008e86:	4770      	bx	lr
 8008e88:	7842      	ldrb	r2, [r0, #1]
 8008e8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	f100 0001 	add.w	r0, r0, #1
 8008e94:	d1f3      	bne.n	8008e7e <ai_check_custom_types+0x1e>
 8008e96:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008e9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d1ed      	bne.n	8008e7e <ai_check_custom_types+0x1e>
 8008ea2:	7842      	ldrb	r2, [r0, #1]
 8008ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d1e8      	bne.n	8008e7e <ai_check_custom_types+0x1e>
 8008eac:	2000      	movs	r0, #0
 8008eae:	e7e7      	b.n	8008e80 <ai_check_custom_types+0x20>
 8008eb0:	0800bf98 	.word	0x0800bf98

08008eb4 <ai_layers_init_all>:
 8008eb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008eb6:	b17a      	cbz	r2, 8008ed8 <ai_layers_init_all+0x24>
 8008eb8:	6913      	ldr	r3, [r2, #16]
 8008eba:	60d0      	str	r0, [r2, #12]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	f04f 0201 	mov.w	r2, #1
 8008ec2:	d009      	beq.n	8008ed8 <ai_layers_init_all+0x24>
 8008ec4:	b143      	cbz	r3, 8008ed8 <ai_layers_init_all+0x24>
 8008ec6:	6919      	ldr	r1, [r3, #16]
 8008ec8:	60d8      	str	r0, [r3, #12]
 8008eca:	4299      	cmp	r1, r3
 8008ecc:	f102 0201 	add.w	r2, r2, #1
 8008ed0:	d002      	beq.n	8008ed8 <ai_layers_init_all+0x24>
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f6      	bne.n	8008ec6 <ai_layers_init_all+0x12>
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4770      	bx	lr

08008edc <ai_layers_post_init_all>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008ee0:	b18c      	cbz	r4, 8008f06 <ai_layers_post_init_all+0x2a>
 8008ee2:	2500      	movs	r5, #0
 8008ee4:	6863      	ldr	r3, [r4, #4]
 8008ee6:	f013 0f01 	tst.w	r3, #1
 8008eea:	4620      	mov	r0, r4
 8008eec:	d003      	beq.n	8008ef6 <ai_layers_post_init_all+0x1a>
 8008eee:	6a23      	ldr	r3, [r4, #32]
 8008ef0:	b10b      	cbz	r3, 8008ef6 <ai_layers_post_init_all+0x1a>
 8008ef2:	4798      	blx	r3
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d002      	beq.n	8008f02 <ai_layers_post_init_all+0x26>
 8008efc:	461c      	mov	r4, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f0      	bne.n	8008ee4 <ai_layers_post_init_all+0x8>
 8008f02:	4628      	mov	r0, r5
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	4625      	mov	r5, r4
 8008f08:	e7fb      	b.n	8008f02 <ai_layers_post_init_all+0x26>
 8008f0a:	bf00      	nop

08008f0c <ai_layers_forward_all>:
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8008f12:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008f14:	4604      	mov	r4, r0
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d02c      	beq.n	8008f74 <ai_layers_forward_all+0x68>
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	d03f      	beq.n	8008f9e <ai_layers_forward_all+0x92>
 8008f1e:	6385      	str	r5, [r0, #56]	; 0x38
 8008f20:	4629      	mov	r1, r5
 8008f22:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008f24:	2001      	movs	r0, #1
 8008f26:	47b8      	blx	r7
 8008f28:	2600      	movs	r6, #0
 8008f2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f2c:	46b0      	mov	r8, r6
 8008f2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f30:	2002      	movs	r0, #2
 8008f32:	47b8      	blx	r7
 8008f34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008f36:	696b      	ldr	r3, [r5, #20]
 8008f38:	4628      	mov	r0, r5
 8008f3a:	4798      	blx	r3
 8008f3c:	692b      	ldr	r3, [r5, #16]
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	f04f 0003 	mov.w	r0, #3
 8008f44:	4619      	mov	r1, r3
 8008f46:	d009      	beq.n	8008f5c <ai_layers_forward_all+0x50>
 8008f48:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f4c:	47b8      	blx	r7
 8008f4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f50:	3601      	adds	r6, #1
 8008f52:	2900      	cmp	r1, #0
 8008f54:	d1eb      	bne.n	8008f2e <ai_layers_forward_all+0x22>
 8008f56:	4630      	mov	r0, r6
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8008f62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f64:	47b8      	blx	r7
 8008f66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f68:	3601      	adds	r6, #1
 8008f6a:	2900      	cmp	r1, #0
 8008f6c:	d1df      	bne.n	8008f2e <ai_layers_forward_all+0x22>
 8008f6e:	4630      	mov	r0, r6
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	b19d      	cbz	r5, 8008f9e <ai_layers_forward_all+0x92>
 8008f76:	6385      	str	r5, [r0, #56]	; 0x38
 8008f78:	463e      	mov	r6, r7
 8008f7a:	696b      	ldr	r3, [r5, #20]
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	4798      	blx	r3
 8008f80:	692b      	ldr	r3, [r5, #16]
 8008f82:	42ab      	cmp	r3, r5
 8008f84:	f106 0601 	add.w	r6, r6, #1
 8008f88:	d004      	beq.n	8008f94 <ai_layers_forward_all+0x88>
 8008f8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f8c:	461d      	mov	r5, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f3      	bne.n	8008f7a <ai_layers_forward_all+0x6e>
 8008f92:	e7e0      	b.n	8008f56 <ai_layers_forward_all+0x4a>
 8008f94:	2300      	movs	r3, #0
 8008f96:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f98:	4630      	mov	r0, r6
 8008f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9e:	462e      	mov	r6, r5
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa6:	bf00      	nop

08008fa8 <ai_array_to_buffer_fmt>:
 8008fa8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d029      	beq.n	8009004 <ai_array_to_buffer_fmt+0x5c>
 8008fb0:	4a22      	ldr	r2, [pc, #136]	; (800903c <ai_array_to_buffer_fmt+0x94>)
 8008fb2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d010      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008fba:	dd13      	ble.n	8008fe4 <ai_array_to_buffer_fmt+0x3c>
 8008fbc:	4a20      	ldr	r2, [pc, #128]	; (8009040 <ai_array_to_buffer_fmt+0x98>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00c      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008fc2:	dc27      	bgt.n	8009014 <ai_array_to_buffer_fmt+0x6c>
 8008fc4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d007      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008fcc:	3207      	adds	r2, #7
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d004      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008fd2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d000      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008fda:	2340      	movs	r3, #64	; 0x40
 8008fdc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008fe0:	4318      	orrs	r0, r3
 8008fe2:	4770      	bx	lr
 8008fe4:	4a17      	ldr	r2, [pc, #92]	; (8009044 <ai_array_to_buffer_fmt+0x9c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d0f8      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008fea:	dd1e      	ble.n	800902a <ai_array_to_buffer_fmt+0x82>
 8008fec:	4a16      	ldr	r2, [pc, #88]	; (8009048 <ai_array_to_buffer_fmt+0xa0>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d0f4      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008ff2:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d0f0      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8008ffa:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d1eb      	bne.n	8008fda <ai_array_to_buffer_fmt+0x32>
 8009002:	e7eb      	b.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8009004:	4b11      	ldr	r3, [pc, #68]	; (800904c <ai_array_to_buffer_fmt+0xa4>)
 8009006:	4003      	ands	r3, r0
 8009008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800900c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009010:	4318      	orrs	r0, r3
 8009012:	4770      	bx	lr
 8009014:	4a0e      	ldr	r2, [pc, #56]	; (8009050 <ai_array_to_buffer_fmt+0xa8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d0e0      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 800901a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800901e:	4293      	cmp	r3, r2
 8009020:	d0dc      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8009022:	4a0c      	ldr	r2, [pc, #48]	; (8009054 <ai_array_to_buffer_fmt+0xac>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d1d8      	bne.n	8008fda <ai_array_to_buffer_fmt+0x32>
 8009028:	e7d8      	b.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 800902a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800902e:	4293      	cmp	r3, r2
 8009030:	d0d4      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 8009032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009036:	4293      	cmp	r3, r2
 8009038:	d0d0      	beq.n	8008fdc <ai_array_to_buffer_fmt+0x34>
 800903a:	e7ce      	b.n	8008fda <ai_array_to_buffer_fmt+0x32>
 800903c:	00060440 	.word	0x00060440
 8009040:	00840840 	.word	0x00840840
 8009044:	00040447 	.word	0x00040447
 8009048:	0004084f 	.word	0x0004084f
 800904c:	00803fff 	.word	0x00803fff
 8009050:	00841040 	.word	0x00841040
 8009054:	0084084f 	.word	0x0084084f

08009058 <ai_array_get_byte_size>:
 8009058:	b1c1      	cbz	r1, 800908c <ai_array_get_byte_size+0x34>
 800905a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800905e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009062:	4413      	add	r3, r2
 8009064:	fb01 f103 	mul.w	r1, r1, r3
 8009068:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800906c:	3107      	adds	r1, #7
 800906e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009072:	f021 0107 	bic.w	r1, r1, #7
 8009076:	2804      	cmp	r0, #4
 8009078:	fa21 f102 	lsr.w	r1, r1, r2
 800907c:	d008      	beq.n	8009090 <ai_array_get_byte_size+0x38>
 800907e:	2808      	cmp	r0, #8
 8009080:	d101      	bne.n	8009086 <ai_array_get_byte_size+0x2e>
 8009082:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009086:	3107      	adds	r1, #7
 8009088:	08c8      	lsrs	r0, r1, #3
 800908a:	4770      	bx	lr
 800908c:	4608      	mov	r0, r1
 800908e:	4770      	bx	lr
 8009090:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009094:	3107      	adds	r1, #7
 8009096:	08c8      	lsrs	r0, r1, #3
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop

0800909c <__errno>:
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <__errno+0x8>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	200007e8 	.word	0x200007e8

080090a8 <__libc_init_array>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4d0d      	ldr	r5, [pc, #52]	; (80090e0 <__libc_init_array+0x38>)
 80090ac:	4c0d      	ldr	r4, [pc, #52]	; (80090e4 <__libc_init_array+0x3c>)
 80090ae:	1b64      	subs	r4, r4, r5
 80090b0:	10a4      	asrs	r4, r4, #2
 80090b2:	2600      	movs	r6, #0
 80090b4:	42a6      	cmp	r6, r4
 80090b6:	d109      	bne.n	80090cc <__libc_init_array+0x24>
 80090b8:	4d0b      	ldr	r5, [pc, #44]	; (80090e8 <__libc_init_array+0x40>)
 80090ba:	4c0c      	ldr	r4, [pc, #48]	; (80090ec <__libc_init_array+0x44>)
 80090bc:	f002 fed6 	bl	800be6c <_init>
 80090c0:	1b64      	subs	r4, r4, r5
 80090c2:	10a4      	asrs	r4, r4, #2
 80090c4:	2600      	movs	r6, #0
 80090c6:	42a6      	cmp	r6, r4
 80090c8:	d105      	bne.n	80090d6 <__libc_init_array+0x2e>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d0:	4798      	blx	r3
 80090d2:	3601      	adds	r6, #1
 80090d4:	e7ee      	b.n	80090b4 <__libc_init_array+0xc>
 80090d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090da:	4798      	blx	r3
 80090dc:	3601      	adds	r6, #1
 80090de:	e7f2      	b.n	80090c6 <__libc_init_array+0x1e>
 80090e0:	080180dc 	.word	0x080180dc
 80090e4:	080180dc 	.word	0x080180dc
 80090e8:	080180dc 	.word	0x080180dc
 80090ec:	080180e0 	.word	0x080180e0

080090f0 <malloc>:
 80090f0:	4b02      	ldr	r3, [pc, #8]	; (80090fc <malloc+0xc>)
 80090f2:	4601      	mov	r1, r0
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f000 b869 	b.w	80091cc <_malloc_r>
 80090fa:	bf00      	nop
 80090fc:	200007e8 	.word	0x200007e8

08009100 <memcpy>:
 8009100:	440a      	add	r2, r1
 8009102:	4291      	cmp	r1, r2
 8009104:	f100 33ff 	add.w	r3, r0, #4294967295
 8009108:	d100      	bne.n	800910c <memcpy+0xc>
 800910a:	4770      	bx	lr
 800910c:	b510      	push	{r4, lr}
 800910e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009116:	4291      	cmp	r1, r2
 8009118:	d1f9      	bne.n	800910e <memcpy+0xe>
 800911a:	bd10      	pop	{r4, pc}

0800911c <memset>:
 800911c:	4402      	add	r2, r0
 800911e:	4603      	mov	r3, r0
 8009120:	4293      	cmp	r3, r2
 8009122:	d100      	bne.n	8009126 <memset+0xa>
 8009124:	4770      	bx	lr
 8009126:	f803 1b01 	strb.w	r1, [r3], #1
 800912a:	e7f9      	b.n	8009120 <memset+0x4>

0800912c <_free_r>:
 800912c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800912e:	2900      	cmp	r1, #0
 8009130:	d048      	beq.n	80091c4 <_free_r+0x98>
 8009132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009136:	9001      	str	r0, [sp, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f1a1 0404 	sub.w	r4, r1, #4
 800913e:	bfb8      	it	lt
 8009140:	18e4      	addlt	r4, r4, r3
 8009142:	f001 ff01 	bl	800af48 <__malloc_lock>
 8009146:	4a20      	ldr	r2, [pc, #128]	; (80091c8 <_free_r+0x9c>)
 8009148:	9801      	ldr	r0, [sp, #4]
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	4615      	mov	r5, r2
 800914e:	b933      	cbnz	r3, 800915e <_free_r+0x32>
 8009150:	6063      	str	r3, [r4, #4]
 8009152:	6014      	str	r4, [r2, #0]
 8009154:	b003      	add	sp, #12
 8009156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800915a:	f001 befb 	b.w	800af54 <__malloc_unlock>
 800915e:	42a3      	cmp	r3, r4
 8009160:	d90b      	bls.n	800917a <_free_r+0x4e>
 8009162:	6821      	ldr	r1, [r4, #0]
 8009164:	1862      	adds	r2, r4, r1
 8009166:	4293      	cmp	r3, r2
 8009168:	bf04      	itt	eq
 800916a:	681a      	ldreq	r2, [r3, #0]
 800916c:	685b      	ldreq	r3, [r3, #4]
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	bf04      	itt	eq
 8009172:	1852      	addeq	r2, r2, r1
 8009174:	6022      	streq	r2, [r4, #0]
 8009176:	602c      	str	r4, [r5, #0]
 8009178:	e7ec      	b.n	8009154 <_free_r+0x28>
 800917a:	461a      	mov	r2, r3
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b10b      	cbz	r3, 8009184 <_free_r+0x58>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x4e>
 8009184:	6811      	ldr	r1, [r2, #0]
 8009186:	1855      	adds	r5, r2, r1
 8009188:	42a5      	cmp	r5, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x78>
 800918c:	6824      	ldr	r4, [r4, #0]
 800918e:	4421      	add	r1, r4
 8009190:	1854      	adds	r4, r2, r1
 8009192:	42a3      	cmp	r3, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	d1dd      	bne.n	8009154 <_free_r+0x28>
 8009198:	681c      	ldr	r4, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	6053      	str	r3, [r2, #4]
 800919e:	4421      	add	r1, r4
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	e7d7      	b.n	8009154 <_free_r+0x28>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x80>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	e7d3      	b.n	8009154 <_free_r+0x28>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1949      	addeq	r1, r1, r5
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	6054      	str	r4, [r2, #4]
 80091c2:	e7c7      	b.n	8009154 <_free_r+0x28>
 80091c4:	b003      	add	sp, #12
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	20000a80 	.word	0x20000a80

080091cc <_malloc_r>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	1ccd      	adds	r5, r1, #3
 80091d0:	f025 0503 	bic.w	r5, r5, #3
 80091d4:	3508      	adds	r5, #8
 80091d6:	2d0c      	cmp	r5, #12
 80091d8:	bf38      	it	cc
 80091da:	250c      	movcc	r5, #12
 80091dc:	2d00      	cmp	r5, #0
 80091de:	4606      	mov	r6, r0
 80091e0:	db01      	blt.n	80091e6 <_malloc_r+0x1a>
 80091e2:	42a9      	cmp	r1, r5
 80091e4:	d903      	bls.n	80091ee <_malloc_r+0x22>
 80091e6:	230c      	movs	r3, #12
 80091e8:	6033      	str	r3, [r6, #0]
 80091ea:	2000      	movs	r0, #0
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ee:	f001 feab 	bl	800af48 <__malloc_lock>
 80091f2:	4921      	ldr	r1, [pc, #132]	; (8009278 <_malloc_r+0xac>)
 80091f4:	680a      	ldr	r2, [r1, #0]
 80091f6:	4614      	mov	r4, r2
 80091f8:	b99c      	cbnz	r4, 8009222 <_malloc_r+0x56>
 80091fa:	4f20      	ldr	r7, [pc, #128]	; (800927c <_malloc_r+0xb0>)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	b923      	cbnz	r3, 800920a <_malloc_r+0x3e>
 8009200:	4621      	mov	r1, r4
 8009202:	4630      	mov	r0, r6
 8009204:	f000 fd34 	bl	8009c70 <_sbrk_r>
 8009208:	6038      	str	r0, [r7, #0]
 800920a:	4629      	mov	r1, r5
 800920c:	4630      	mov	r0, r6
 800920e:	f000 fd2f 	bl	8009c70 <_sbrk_r>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	d123      	bne.n	800925e <_malloc_r+0x92>
 8009216:	230c      	movs	r3, #12
 8009218:	6033      	str	r3, [r6, #0]
 800921a:	4630      	mov	r0, r6
 800921c:	f001 fe9a 	bl	800af54 <__malloc_unlock>
 8009220:	e7e3      	b.n	80091ea <_malloc_r+0x1e>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	1b5b      	subs	r3, r3, r5
 8009226:	d417      	bmi.n	8009258 <_malloc_r+0x8c>
 8009228:	2b0b      	cmp	r3, #11
 800922a:	d903      	bls.n	8009234 <_malloc_r+0x68>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	441c      	add	r4, r3
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	e004      	b.n	800923e <_malloc_r+0x72>
 8009234:	6863      	ldr	r3, [r4, #4]
 8009236:	42a2      	cmp	r2, r4
 8009238:	bf0c      	ite	eq
 800923a:	600b      	streq	r3, [r1, #0]
 800923c:	6053      	strne	r3, [r2, #4]
 800923e:	4630      	mov	r0, r6
 8009240:	f001 fe88 	bl	800af54 <__malloc_unlock>
 8009244:	f104 000b 	add.w	r0, r4, #11
 8009248:	1d23      	adds	r3, r4, #4
 800924a:	f020 0007 	bic.w	r0, r0, #7
 800924e:	1ac2      	subs	r2, r0, r3
 8009250:	d0cc      	beq.n	80091ec <_malloc_r+0x20>
 8009252:	1a1b      	subs	r3, r3, r0
 8009254:	50a3      	str	r3, [r4, r2]
 8009256:	e7c9      	b.n	80091ec <_malloc_r+0x20>
 8009258:	4622      	mov	r2, r4
 800925a:	6864      	ldr	r4, [r4, #4]
 800925c:	e7cc      	b.n	80091f8 <_malloc_r+0x2c>
 800925e:	1cc4      	adds	r4, r0, #3
 8009260:	f024 0403 	bic.w	r4, r4, #3
 8009264:	42a0      	cmp	r0, r4
 8009266:	d0e3      	beq.n	8009230 <_malloc_r+0x64>
 8009268:	1a21      	subs	r1, r4, r0
 800926a:	4630      	mov	r0, r6
 800926c:	f000 fd00 	bl	8009c70 <_sbrk_r>
 8009270:	3001      	adds	r0, #1
 8009272:	d1dd      	bne.n	8009230 <_malloc_r+0x64>
 8009274:	e7cf      	b.n	8009216 <_malloc_r+0x4a>
 8009276:	bf00      	nop
 8009278:	20000a80 	.word	0x20000a80
 800927c:	20000a84 	.word	0x20000a84

08009280 <__cvt>:
 8009280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	ec55 4b10 	vmov	r4, r5, d0
 8009288:	2d00      	cmp	r5, #0
 800928a:	460e      	mov	r6, r1
 800928c:	4619      	mov	r1, r3
 800928e:	462b      	mov	r3, r5
 8009290:	bfbb      	ittet	lt
 8009292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009296:	461d      	movlt	r5, r3
 8009298:	2300      	movge	r3, #0
 800929a:	232d      	movlt	r3, #45	; 0x2d
 800929c:	700b      	strb	r3, [r1, #0]
 800929e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092a4:	4691      	mov	r9, r2
 80092a6:	f023 0820 	bic.w	r8, r3, #32
 80092aa:	bfbc      	itt	lt
 80092ac:	4622      	movlt	r2, r4
 80092ae:	4614      	movlt	r4, r2
 80092b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092b4:	d005      	beq.n	80092c2 <__cvt+0x42>
 80092b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092ba:	d100      	bne.n	80092be <__cvt+0x3e>
 80092bc:	3601      	adds	r6, #1
 80092be:	2102      	movs	r1, #2
 80092c0:	e000      	b.n	80092c4 <__cvt+0x44>
 80092c2:	2103      	movs	r1, #3
 80092c4:	ab03      	add	r3, sp, #12
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	ab02      	add	r3, sp, #8
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	ec45 4b10 	vmov	d0, r4, r5
 80092d0:	4653      	mov	r3, sl
 80092d2:	4632      	mov	r2, r6
 80092d4:	f000 fe28 	bl	8009f28 <_dtoa_r>
 80092d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092dc:	4607      	mov	r7, r0
 80092de:	d102      	bne.n	80092e6 <__cvt+0x66>
 80092e0:	f019 0f01 	tst.w	r9, #1
 80092e4:	d022      	beq.n	800932c <__cvt+0xac>
 80092e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092ea:	eb07 0906 	add.w	r9, r7, r6
 80092ee:	d110      	bne.n	8009312 <__cvt+0x92>
 80092f0:	783b      	ldrb	r3, [r7, #0]
 80092f2:	2b30      	cmp	r3, #48	; 0x30
 80092f4:	d10a      	bne.n	800930c <__cvt+0x8c>
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009302:	b918      	cbnz	r0, 800930c <__cvt+0x8c>
 8009304:	f1c6 0601 	rsb	r6, r6, #1
 8009308:	f8ca 6000 	str.w	r6, [sl]
 800930c:	f8da 3000 	ldr.w	r3, [sl]
 8009310:	4499      	add	r9, r3
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f7 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800931e:	b108      	cbz	r0, 8009324 <__cvt+0xa4>
 8009320:	f8cd 900c 	str.w	r9, [sp, #12]
 8009324:	2230      	movs	r2, #48	; 0x30
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	454b      	cmp	r3, r9
 800932a:	d307      	bcc.n	800933c <__cvt+0xbc>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009330:	1bdb      	subs	r3, r3, r7
 8009332:	4638      	mov	r0, r7
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	b004      	add	sp, #16
 8009338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933c:	1c59      	adds	r1, r3, #1
 800933e:	9103      	str	r1, [sp, #12]
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	e7f0      	b.n	8009326 <__cvt+0xa6>

08009344 <__exponent>:
 8009344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009346:	4603      	mov	r3, r0
 8009348:	2900      	cmp	r1, #0
 800934a:	bfb8      	it	lt
 800934c:	4249      	neglt	r1, r1
 800934e:	f803 2b02 	strb.w	r2, [r3], #2
 8009352:	bfb4      	ite	lt
 8009354:	222d      	movlt	r2, #45	; 0x2d
 8009356:	222b      	movge	r2, #43	; 0x2b
 8009358:	2909      	cmp	r1, #9
 800935a:	7042      	strb	r2, [r0, #1]
 800935c:	dd2a      	ble.n	80093b4 <__exponent+0x70>
 800935e:	f10d 0407 	add.w	r4, sp, #7
 8009362:	46a4      	mov	ip, r4
 8009364:	270a      	movs	r7, #10
 8009366:	46a6      	mov	lr, r4
 8009368:	460a      	mov	r2, r1
 800936a:	fb91 f6f7 	sdiv	r6, r1, r7
 800936e:	fb07 1516 	mls	r5, r7, r6, r1
 8009372:	3530      	adds	r5, #48	; 0x30
 8009374:	2a63      	cmp	r2, #99	; 0x63
 8009376:	f104 34ff 	add.w	r4, r4, #4294967295
 800937a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800937e:	4631      	mov	r1, r6
 8009380:	dcf1      	bgt.n	8009366 <__exponent+0x22>
 8009382:	3130      	adds	r1, #48	; 0x30
 8009384:	f1ae 0502 	sub.w	r5, lr, #2
 8009388:	f804 1c01 	strb.w	r1, [r4, #-1]
 800938c:	1c44      	adds	r4, r0, #1
 800938e:	4629      	mov	r1, r5
 8009390:	4561      	cmp	r1, ip
 8009392:	d30a      	bcc.n	80093aa <__exponent+0x66>
 8009394:	f10d 0209 	add.w	r2, sp, #9
 8009398:	eba2 020e 	sub.w	r2, r2, lr
 800939c:	4565      	cmp	r5, ip
 800939e:	bf88      	it	hi
 80093a0:	2200      	movhi	r2, #0
 80093a2:	4413      	add	r3, r2
 80093a4:	1a18      	subs	r0, r3, r0
 80093a6:	b003      	add	sp, #12
 80093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093b2:	e7ed      	b.n	8009390 <__exponent+0x4c>
 80093b4:	2330      	movs	r3, #48	; 0x30
 80093b6:	3130      	adds	r1, #48	; 0x30
 80093b8:	7083      	strb	r3, [r0, #2]
 80093ba:	70c1      	strb	r1, [r0, #3]
 80093bc:	1d03      	adds	r3, r0, #4
 80093be:	e7f1      	b.n	80093a4 <__exponent+0x60>

080093c0 <_printf_float>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	ed2d 8b02 	vpush	{d8}
 80093c8:	b08d      	sub	sp, #52	; 0x34
 80093ca:	460c      	mov	r4, r1
 80093cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093d0:	4616      	mov	r6, r2
 80093d2:	461f      	mov	r7, r3
 80093d4:	4605      	mov	r5, r0
 80093d6:	f001 fd4b 	bl	800ae70 <_localeconv_r>
 80093da:	f8d0 a000 	ldr.w	sl, [r0]
 80093de:	4650      	mov	r0, sl
 80093e0:	f7f6 fef6 	bl	80001d0 <strlen>
 80093e4:	2300      	movs	r3, #0
 80093e6:	930a      	str	r3, [sp, #40]	; 0x28
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093f4:	3307      	adds	r3, #7
 80093f6:	f023 0307 	bic.w	r3, r3, #7
 80093fa:	f103 0208 	add.w	r2, r3, #8
 80093fe:	f8c8 2000 	str.w	r2, [r8]
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800940a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800940e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009412:	9307      	str	r3, [sp, #28]
 8009414:	f8cd 8018 	str.w	r8, [sp, #24]
 8009418:	ee08 0a10 	vmov	s16, r0
 800941c:	4b9f      	ldr	r3, [pc, #636]	; (800969c <_printf_float+0x2dc>)
 800941e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009422:	f04f 32ff 	mov.w	r2, #4294967295
 8009426:	f7f7 fb81 	bl	8000b2c <__aeabi_dcmpun>
 800942a:	bb88      	cbnz	r0, 8009490 <_printf_float+0xd0>
 800942c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009430:	4b9a      	ldr	r3, [pc, #616]	; (800969c <_printf_float+0x2dc>)
 8009432:	f04f 32ff 	mov.w	r2, #4294967295
 8009436:	f7f7 fb5b 	bl	8000af0 <__aeabi_dcmple>
 800943a:	bb48      	cbnz	r0, 8009490 <_printf_float+0xd0>
 800943c:	2200      	movs	r2, #0
 800943e:	2300      	movs	r3, #0
 8009440:	4640      	mov	r0, r8
 8009442:	4649      	mov	r1, r9
 8009444:	f7f7 fb4a 	bl	8000adc <__aeabi_dcmplt>
 8009448:	b110      	cbz	r0, 8009450 <_printf_float+0x90>
 800944a:	232d      	movs	r3, #45	; 0x2d
 800944c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009450:	4b93      	ldr	r3, [pc, #588]	; (80096a0 <_printf_float+0x2e0>)
 8009452:	4894      	ldr	r0, [pc, #592]	; (80096a4 <_printf_float+0x2e4>)
 8009454:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009458:	bf94      	ite	ls
 800945a:	4698      	movls	r8, r3
 800945c:	4680      	movhi	r8, r0
 800945e:	2303      	movs	r3, #3
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	9b05      	ldr	r3, [sp, #20]
 8009464:	f023 0204 	bic.w	r2, r3, #4
 8009468:	6022      	str	r2, [r4, #0]
 800946a:	f04f 0900 	mov.w	r9, #0
 800946e:	9700      	str	r7, [sp, #0]
 8009470:	4633      	mov	r3, r6
 8009472:	aa0b      	add	r2, sp, #44	; 0x2c
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f9d8 	bl	800982c <_printf_common>
 800947c:	3001      	adds	r0, #1
 800947e:	f040 8090 	bne.w	80095a2 <_printf_float+0x1e2>
 8009482:	f04f 30ff 	mov.w	r0, #4294967295
 8009486:	b00d      	add	sp, #52	; 0x34
 8009488:	ecbd 8b02 	vpop	{d8}
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f7f7 fb48 	bl	8000b2c <__aeabi_dcmpun>
 800949c:	b140      	cbz	r0, 80094b0 <_printf_float+0xf0>
 800949e:	464b      	mov	r3, r9
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bfbc      	itt	lt
 80094a4:	232d      	movlt	r3, #45	; 0x2d
 80094a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094aa:	487f      	ldr	r0, [pc, #508]	; (80096a8 <_printf_float+0x2e8>)
 80094ac:	4b7f      	ldr	r3, [pc, #508]	; (80096ac <_printf_float+0x2ec>)
 80094ae:	e7d1      	b.n	8009454 <_printf_float+0x94>
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094b6:	9206      	str	r2, [sp, #24]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	d13f      	bne.n	800953c <_printf_float+0x17c>
 80094bc:	2306      	movs	r3, #6
 80094be:	6063      	str	r3, [r4, #4]
 80094c0:	9b05      	ldr	r3, [sp, #20]
 80094c2:	6861      	ldr	r1, [r4, #4]
 80094c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094c8:	2300      	movs	r3, #0
 80094ca:	9303      	str	r3, [sp, #12]
 80094cc:	ab0a      	add	r3, sp, #40	; 0x28
 80094ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094d2:	ab09      	add	r3, sp, #36	; 0x24
 80094d4:	ec49 8b10 	vmov	d0, r8, r9
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	6022      	str	r2, [r4, #0]
 80094dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094e0:	4628      	mov	r0, r5
 80094e2:	f7ff fecd 	bl	8009280 <__cvt>
 80094e6:	9b06      	ldr	r3, [sp, #24]
 80094e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ea:	2b47      	cmp	r3, #71	; 0x47
 80094ec:	4680      	mov	r8, r0
 80094ee:	d108      	bne.n	8009502 <_printf_float+0x142>
 80094f0:	1cc8      	adds	r0, r1, #3
 80094f2:	db02      	blt.n	80094fa <_printf_float+0x13a>
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	4299      	cmp	r1, r3
 80094f8:	dd41      	ble.n	800957e <_printf_float+0x1be>
 80094fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80094fe:	fa5f fb8b 	uxtb.w	fp, fp
 8009502:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009506:	d820      	bhi.n	800954a <_printf_float+0x18a>
 8009508:	3901      	subs	r1, #1
 800950a:	465a      	mov	r2, fp
 800950c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009510:	9109      	str	r1, [sp, #36]	; 0x24
 8009512:	f7ff ff17 	bl	8009344 <__exponent>
 8009516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009518:	1813      	adds	r3, r2, r0
 800951a:	2a01      	cmp	r2, #1
 800951c:	4681      	mov	r9, r0
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	dc02      	bgt.n	8009528 <_printf_float+0x168>
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	07d2      	lsls	r2, r2, #31
 8009526:	d501      	bpl.n	800952c <_printf_float+0x16c>
 8009528:	3301      	adds	r3, #1
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009530:	2b00      	cmp	r3, #0
 8009532:	d09c      	beq.n	800946e <_printf_float+0xae>
 8009534:	232d      	movs	r3, #45	; 0x2d
 8009536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800953a:	e798      	b.n	800946e <_printf_float+0xae>
 800953c:	9a06      	ldr	r2, [sp, #24]
 800953e:	2a47      	cmp	r2, #71	; 0x47
 8009540:	d1be      	bne.n	80094c0 <_printf_float+0x100>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1bc      	bne.n	80094c0 <_printf_float+0x100>
 8009546:	2301      	movs	r3, #1
 8009548:	e7b9      	b.n	80094be <_printf_float+0xfe>
 800954a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800954e:	d118      	bne.n	8009582 <_printf_float+0x1c2>
 8009550:	2900      	cmp	r1, #0
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	dd0b      	ble.n	800956e <_printf_float+0x1ae>
 8009556:	6121      	str	r1, [r4, #16]
 8009558:	b913      	cbnz	r3, 8009560 <_printf_float+0x1a0>
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	07d0      	lsls	r0, r2, #31
 800955e:	d502      	bpl.n	8009566 <_printf_float+0x1a6>
 8009560:	3301      	adds	r3, #1
 8009562:	440b      	add	r3, r1
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	65a1      	str	r1, [r4, #88]	; 0x58
 8009568:	f04f 0900 	mov.w	r9, #0
 800956c:	e7de      	b.n	800952c <_printf_float+0x16c>
 800956e:	b913      	cbnz	r3, 8009576 <_printf_float+0x1b6>
 8009570:	6822      	ldr	r2, [r4, #0]
 8009572:	07d2      	lsls	r2, r2, #31
 8009574:	d501      	bpl.n	800957a <_printf_float+0x1ba>
 8009576:	3302      	adds	r3, #2
 8009578:	e7f4      	b.n	8009564 <_printf_float+0x1a4>
 800957a:	2301      	movs	r3, #1
 800957c:	e7f2      	b.n	8009564 <_printf_float+0x1a4>
 800957e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009584:	4299      	cmp	r1, r3
 8009586:	db05      	blt.n	8009594 <_printf_float+0x1d4>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	6121      	str	r1, [r4, #16]
 800958c:	07d8      	lsls	r0, r3, #31
 800958e:	d5ea      	bpl.n	8009566 <_printf_float+0x1a6>
 8009590:	1c4b      	adds	r3, r1, #1
 8009592:	e7e7      	b.n	8009564 <_printf_float+0x1a4>
 8009594:	2900      	cmp	r1, #0
 8009596:	bfd4      	ite	le
 8009598:	f1c1 0202 	rsble	r2, r1, #2
 800959c:	2201      	movgt	r2, #1
 800959e:	4413      	add	r3, r2
 80095a0:	e7e0      	b.n	8009564 <_printf_float+0x1a4>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	055a      	lsls	r2, r3, #21
 80095a6:	d407      	bmi.n	80095b8 <_printf_float+0x1f8>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	4642      	mov	r2, r8
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	d12c      	bne.n	8009610 <_printf_float+0x250>
 80095b6:	e764      	b.n	8009482 <_printf_float+0xc2>
 80095b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095bc:	f240 80e0 	bls.w	8009780 <_printf_float+0x3c0>
 80095c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095c4:	2200      	movs	r2, #0
 80095c6:	2300      	movs	r3, #0
 80095c8:	f7f7 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d034      	beq.n	800963a <_printf_float+0x27a>
 80095d0:	4a37      	ldr	r2, [pc, #220]	; (80096b0 <_printf_float+0x2f0>)
 80095d2:	2301      	movs	r3, #1
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	f43f af51 	beq.w	8009482 <_printf_float+0xc2>
 80095e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095e4:	429a      	cmp	r2, r3
 80095e6:	db02      	blt.n	80095ee <_printf_float+0x22e>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	07d8      	lsls	r0, r3, #31
 80095ec:	d510      	bpl.n	8009610 <_printf_float+0x250>
 80095ee:	ee18 3a10 	vmov	r3, s16
 80095f2:	4652      	mov	r2, sl
 80095f4:	4631      	mov	r1, r6
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b8      	blx	r7
 80095fa:	3001      	adds	r0, #1
 80095fc:	f43f af41 	beq.w	8009482 <_printf_float+0xc2>
 8009600:	f04f 0800 	mov.w	r8, #0
 8009604:	f104 091a 	add.w	r9, r4, #26
 8009608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960a:	3b01      	subs	r3, #1
 800960c:	4543      	cmp	r3, r8
 800960e:	dc09      	bgt.n	8009624 <_printf_float+0x264>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	079b      	lsls	r3, r3, #30
 8009614:	f100 8105 	bmi.w	8009822 <_printf_float+0x462>
 8009618:	68e0      	ldr	r0, [r4, #12]
 800961a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800961c:	4298      	cmp	r0, r3
 800961e:	bfb8      	it	lt
 8009620:	4618      	movlt	r0, r3
 8009622:	e730      	b.n	8009486 <_printf_float+0xc6>
 8009624:	2301      	movs	r3, #1
 8009626:	464a      	mov	r2, r9
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47b8      	blx	r7
 800962e:	3001      	adds	r0, #1
 8009630:	f43f af27 	beq.w	8009482 <_printf_float+0xc2>
 8009634:	f108 0801 	add.w	r8, r8, #1
 8009638:	e7e6      	b.n	8009608 <_printf_float+0x248>
 800963a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	dc39      	bgt.n	80096b4 <_printf_float+0x2f4>
 8009640:	4a1b      	ldr	r2, [pc, #108]	; (80096b0 <_printf_float+0x2f0>)
 8009642:	2301      	movs	r3, #1
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f af19 	beq.w	8009482 <_printf_float+0xc2>
 8009650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009654:	4313      	orrs	r3, r2
 8009656:	d102      	bne.n	800965e <_printf_float+0x29e>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	07d9      	lsls	r1, r3, #31
 800965c:	d5d8      	bpl.n	8009610 <_printf_float+0x250>
 800965e:	ee18 3a10 	vmov	r3, s16
 8009662:	4652      	mov	r2, sl
 8009664:	4631      	mov	r1, r6
 8009666:	4628      	mov	r0, r5
 8009668:	47b8      	blx	r7
 800966a:	3001      	adds	r0, #1
 800966c:	f43f af09 	beq.w	8009482 <_printf_float+0xc2>
 8009670:	f04f 0900 	mov.w	r9, #0
 8009674:	f104 0a1a 	add.w	sl, r4, #26
 8009678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967a:	425b      	negs	r3, r3
 800967c:	454b      	cmp	r3, r9
 800967e:	dc01      	bgt.n	8009684 <_printf_float+0x2c4>
 8009680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009682:	e792      	b.n	80095aa <_printf_float+0x1ea>
 8009684:	2301      	movs	r3, #1
 8009686:	4652      	mov	r2, sl
 8009688:	4631      	mov	r1, r6
 800968a:	4628      	mov	r0, r5
 800968c:	47b8      	blx	r7
 800968e:	3001      	adds	r0, #1
 8009690:	f43f aef7 	beq.w	8009482 <_printf_float+0xc2>
 8009694:	f109 0901 	add.w	r9, r9, #1
 8009698:	e7ee      	b.n	8009678 <_printf_float+0x2b8>
 800969a:	bf00      	nop
 800969c:	7fefffff 	.word	0x7fefffff
 80096a0:	08017ce0 	.word	0x08017ce0
 80096a4:	08017ce4 	.word	0x08017ce4
 80096a8:	08017cec 	.word	0x08017cec
 80096ac:	08017ce8 	.word	0x08017ce8
 80096b0:	08017cf0 	.word	0x08017cf0
 80096b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096b8:	429a      	cmp	r2, r3
 80096ba:	bfa8      	it	ge
 80096bc:	461a      	movge	r2, r3
 80096be:	2a00      	cmp	r2, #0
 80096c0:	4691      	mov	r9, r2
 80096c2:	dc37      	bgt.n	8009734 <_printf_float+0x374>
 80096c4:	f04f 0b00 	mov.w	fp, #0
 80096c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096cc:	f104 021a 	add.w	r2, r4, #26
 80096d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096d2:	9305      	str	r3, [sp, #20]
 80096d4:	eba3 0309 	sub.w	r3, r3, r9
 80096d8:	455b      	cmp	r3, fp
 80096da:	dc33      	bgt.n	8009744 <_printf_float+0x384>
 80096dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096e0:	429a      	cmp	r2, r3
 80096e2:	db3b      	blt.n	800975c <_printf_float+0x39c>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	07da      	lsls	r2, r3, #31
 80096e8:	d438      	bmi.n	800975c <_printf_float+0x39c>
 80096ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	eba2 0901 	sub.w	r9, r2, r1
 80096f6:	4599      	cmp	r9, r3
 80096f8:	bfa8      	it	ge
 80096fa:	4699      	movge	r9, r3
 80096fc:	f1b9 0f00 	cmp.w	r9, #0
 8009700:	dc35      	bgt.n	800976e <_printf_float+0x3ae>
 8009702:	f04f 0800 	mov.w	r8, #0
 8009706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800970a:	f104 0a1a 	add.w	sl, r4, #26
 800970e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	eba3 0309 	sub.w	r3, r3, r9
 8009718:	4543      	cmp	r3, r8
 800971a:	f77f af79 	ble.w	8009610 <_printf_float+0x250>
 800971e:	2301      	movs	r3, #1
 8009720:	4652      	mov	r2, sl
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	f43f aeaa 	beq.w	8009482 <_printf_float+0xc2>
 800972e:	f108 0801 	add.w	r8, r8, #1
 8009732:	e7ec      	b.n	800970e <_printf_float+0x34e>
 8009734:	4613      	mov	r3, r2
 8009736:	4631      	mov	r1, r6
 8009738:	4642      	mov	r2, r8
 800973a:	4628      	mov	r0, r5
 800973c:	47b8      	blx	r7
 800973e:	3001      	adds	r0, #1
 8009740:	d1c0      	bne.n	80096c4 <_printf_float+0x304>
 8009742:	e69e      	b.n	8009482 <_printf_float+0xc2>
 8009744:	2301      	movs	r3, #1
 8009746:	4631      	mov	r1, r6
 8009748:	4628      	mov	r0, r5
 800974a:	9205      	str	r2, [sp, #20]
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f ae97 	beq.w	8009482 <_printf_float+0xc2>
 8009754:	9a05      	ldr	r2, [sp, #20]
 8009756:	f10b 0b01 	add.w	fp, fp, #1
 800975a:	e7b9      	b.n	80096d0 <_printf_float+0x310>
 800975c:	ee18 3a10 	vmov	r3, s16
 8009760:	4652      	mov	r2, sl
 8009762:	4631      	mov	r1, r6
 8009764:	4628      	mov	r0, r5
 8009766:	47b8      	blx	r7
 8009768:	3001      	adds	r0, #1
 800976a:	d1be      	bne.n	80096ea <_printf_float+0x32a>
 800976c:	e689      	b.n	8009482 <_printf_float+0xc2>
 800976e:	9a05      	ldr	r2, [sp, #20]
 8009770:	464b      	mov	r3, r9
 8009772:	4442      	add	r2, r8
 8009774:	4631      	mov	r1, r6
 8009776:	4628      	mov	r0, r5
 8009778:	47b8      	blx	r7
 800977a:	3001      	adds	r0, #1
 800977c:	d1c1      	bne.n	8009702 <_printf_float+0x342>
 800977e:	e680      	b.n	8009482 <_printf_float+0xc2>
 8009780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009782:	2a01      	cmp	r2, #1
 8009784:	dc01      	bgt.n	800978a <_printf_float+0x3ca>
 8009786:	07db      	lsls	r3, r3, #31
 8009788:	d538      	bpl.n	80097fc <_printf_float+0x43c>
 800978a:	2301      	movs	r3, #1
 800978c:	4642      	mov	r2, r8
 800978e:	4631      	mov	r1, r6
 8009790:	4628      	mov	r0, r5
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	f43f ae74 	beq.w	8009482 <_printf_float+0xc2>
 800979a:	ee18 3a10 	vmov	r3, s16
 800979e:	4652      	mov	r2, sl
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f ae6b 	beq.w	8009482 <_printf_float+0xc2>
 80097ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097b0:	2200      	movs	r2, #0
 80097b2:	2300      	movs	r3, #0
 80097b4:	f7f7 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 80097b8:	b9d8      	cbnz	r0, 80097f2 <_printf_float+0x432>
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	f108 0201 	add.w	r2, r8, #1
 80097c0:	3b01      	subs	r3, #1
 80097c2:	4631      	mov	r1, r6
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	d10e      	bne.n	80097ea <_printf_float+0x42a>
 80097cc:	e659      	b.n	8009482 <_printf_float+0xc2>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4652      	mov	r2, sl
 80097d2:	4631      	mov	r1, r6
 80097d4:	4628      	mov	r0, r5
 80097d6:	47b8      	blx	r7
 80097d8:	3001      	adds	r0, #1
 80097da:	f43f ae52 	beq.w	8009482 <_printf_float+0xc2>
 80097de:	f108 0801 	add.w	r8, r8, #1
 80097e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e4:	3b01      	subs	r3, #1
 80097e6:	4543      	cmp	r3, r8
 80097e8:	dcf1      	bgt.n	80097ce <_printf_float+0x40e>
 80097ea:	464b      	mov	r3, r9
 80097ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097f0:	e6dc      	b.n	80095ac <_printf_float+0x1ec>
 80097f2:	f04f 0800 	mov.w	r8, #0
 80097f6:	f104 0a1a 	add.w	sl, r4, #26
 80097fa:	e7f2      	b.n	80097e2 <_printf_float+0x422>
 80097fc:	2301      	movs	r3, #1
 80097fe:	4642      	mov	r2, r8
 8009800:	e7df      	b.n	80097c2 <_printf_float+0x402>
 8009802:	2301      	movs	r3, #1
 8009804:	464a      	mov	r2, r9
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	f43f ae38 	beq.w	8009482 <_printf_float+0xc2>
 8009812:	f108 0801 	add.w	r8, r8, #1
 8009816:	68e3      	ldr	r3, [r4, #12]
 8009818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800981a:	1a5b      	subs	r3, r3, r1
 800981c:	4543      	cmp	r3, r8
 800981e:	dcf0      	bgt.n	8009802 <_printf_float+0x442>
 8009820:	e6fa      	b.n	8009618 <_printf_float+0x258>
 8009822:	f04f 0800 	mov.w	r8, #0
 8009826:	f104 0919 	add.w	r9, r4, #25
 800982a:	e7f4      	b.n	8009816 <_printf_float+0x456>

0800982c <_printf_common>:
 800982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	4616      	mov	r6, r2
 8009832:	4699      	mov	r9, r3
 8009834:	688a      	ldr	r2, [r1, #8]
 8009836:	690b      	ldr	r3, [r1, #16]
 8009838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800983c:	4293      	cmp	r3, r2
 800983e:	bfb8      	it	lt
 8009840:	4613      	movlt	r3, r2
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009848:	4607      	mov	r7, r0
 800984a:	460c      	mov	r4, r1
 800984c:	b10a      	cbz	r2, 8009852 <_printf_common+0x26>
 800984e:	3301      	adds	r3, #1
 8009850:	6033      	str	r3, [r6, #0]
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	0699      	lsls	r1, r3, #26
 8009856:	bf42      	ittt	mi
 8009858:	6833      	ldrmi	r3, [r6, #0]
 800985a:	3302      	addmi	r3, #2
 800985c:	6033      	strmi	r3, [r6, #0]
 800985e:	6825      	ldr	r5, [r4, #0]
 8009860:	f015 0506 	ands.w	r5, r5, #6
 8009864:	d106      	bne.n	8009874 <_printf_common+0x48>
 8009866:	f104 0a19 	add.w	sl, r4, #25
 800986a:	68e3      	ldr	r3, [r4, #12]
 800986c:	6832      	ldr	r2, [r6, #0]
 800986e:	1a9b      	subs	r3, r3, r2
 8009870:	42ab      	cmp	r3, r5
 8009872:	dc26      	bgt.n	80098c2 <_printf_common+0x96>
 8009874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009878:	1e13      	subs	r3, r2, #0
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	bf18      	it	ne
 800987e:	2301      	movne	r3, #1
 8009880:	0692      	lsls	r2, r2, #26
 8009882:	d42b      	bmi.n	80098dc <_printf_common+0xb0>
 8009884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009888:	4649      	mov	r1, r9
 800988a:	4638      	mov	r0, r7
 800988c:	47c0      	blx	r8
 800988e:	3001      	adds	r0, #1
 8009890:	d01e      	beq.n	80098d0 <_printf_common+0xa4>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	68e5      	ldr	r5, [r4, #12]
 8009896:	6832      	ldr	r2, [r6, #0]
 8009898:	f003 0306 	and.w	r3, r3, #6
 800989c:	2b04      	cmp	r3, #4
 800989e:	bf08      	it	eq
 80098a0:	1aad      	subeq	r5, r5, r2
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	6922      	ldr	r2, [r4, #16]
 80098a6:	bf0c      	ite	eq
 80098a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098ac:	2500      	movne	r5, #0
 80098ae:	4293      	cmp	r3, r2
 80098b0:	bfc4      	itt	gt
 80098b2:	1a9b      	subgt	r3, r3, r2
 80098b4:	18ed      	addgt	r5, r5, r3
 80098b6:	2600      	movs	r6, #0
 80098b8:	341a      	adds	r4, #26
 80098ba:	42b5      	cmp	r5, r6
 80098bc:	d11a      	bne.n	80098f4 <_printf_common+0xc8>
 80098be:	2000      	movs	r0, #0
 80098c0:	e008      	b.n	80098d4 <_printf_common+0xa8>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4652      	mov	r2, sl
 80098c6:	4649      	mov	r1, r9
 80098c8:	4638      	mov	r0, r7
 80098ca:	47c0      	blx	r8
 80098cc:	3001      	adds	r0, #1
 80098ce:	d103      	bne.n	80098d8 <_printf_common+0xac>
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d8:	3501      	adds	r5, #1
 80098da:	e7c6      	b.n	800986a <_printf_common+0x3e>
 80098dc:	18e1      	adds	r1, r4, r3
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	2030      	movs	r0, #48	; 0x30
 80098e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098e6:	4422      	add	r2, r4
 80098e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098f0:	3302      	adds	r3, #2
 80098f2:	e7c7      	b.n	8009884 <_printf_common+0x58>
 80098f4:	2301      	movs	r3, #1
 80098f6:	4622      	mov	r2, r4
 80098f8:	4649      	mov	r1, r9
 80098fa:	4638      	mov	r0, r7
 80098fc:	47c0      	blx	r8
 80098fe:	3001      	adds	r0, #1
 8009900:	d0e6      	beq.n	80098d0 <_printf_common+0xa4>
 8009902:	3601      	adds	r6, #1
 8009904:	e7d9      	b.n	80098ba <_printf_common+0x8e>
	...

08009908 <_printf_i>:
 8009908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	460c      	mov	r4, r1
 800990e:	4691      	mov	r9, r2
 8009910:	7e27      	ldrb	r7, [r4, #24]
 8009912:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009914:	2f78      	cmp	r7, #120	; 0x78
 8009916:	4680      	mov	r8, r0
 8009918:	469a      	mov	sl, r3
 800991a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800991e:	d807      	bhi.n	8009930 <_printf_i+0x28>
 8009920:	2f62      	cmp	r7, #98	; 0x62
 8009922:	d80a      	bhi.n	800993a <_printf_i+0x32>
 8009924:	2f00      	cmp	r7, #0
 8009926:	f000 80d8 	beq.w	8009ada <_printf_i+0x1d2>
 800992a:	2f58      	cmp	r7, #88	; 0x58
 800992c:	f000 80a3 	beq.w	8009a76 <_printf_i+0x16e>
 8009930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009938:	e03a      	b.n	80099b0 <_printf_i+0xa8>
 800993a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800993e:	2b15      	cmp	r3, #21
 8009940:	d8f6      	bhi.n	8009930 <_printf_i+0x28>
 8009942:	a001      	add	r0, pc, #4	; (adr r0, 8009948 <_printf_i+0x40>)
 8009944:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009948:	080099a1 	.word	0x080099a1
 800994c:	080099b5 	.word	0x080099b5
 8009950:	08009931 	.word	0x08009931
 8009954:	08009931 	.word	0x08009931
 8009958:	08009931 	.word	0x08009931
 800995c:	08009931 	.word	0x08009931
 8009960:	080099b5 	.word	0x080099b5
 8009964:	08009931 	.word	0x08009931
 8009968:	08009931 	.word	0x08009931
 800996c:	08009931 	.word	0x08009931
 8009970:	08009931 	.word	0x08009931
 8009974:	08009ac1 	.word	0x08009ac1
 8009978:	080099e5 	.word	0x080099e5
 800997c:	08009aa3 	.word	0x08009aa3
 8009980:	08009931 	.word	0x08009931
 8009984:	08009931 	.word	0x08009931
 8009988:	08009ae3 	.word	0x08009ae3
 800998c:	08009931 	.word	0x08009931
 8009990:	080099e5 	.word	0x080099e5
 8009994:	08009931 	.word	0x08009931
 8009998:	08009931 	.word	0x08009931
 800999c:	08009aab 	.word	0x08009aab
 80099a0:	680b      	ldr	r3, [r1, #0]
 80099a2:	1d1a      	adds	r2, r3, #4
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	600a      	str	r2, [r1, #0]
 80099a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b0:	2301      	movs	r3, #1
 80099b2:	e0a3      	b.n	8009afc <_printf_i+0x1f4>
 80099b4:	6825      	ldr	r5, [r4, #0]
 80099b6:	6808      	ldr	r0, [r1, #0]
 80099b8:	062e      	lsls	r6, r5, #24
 80099ba:	f100 0304 	add.w	r3, r0, #4
 80099be:	d50a      	bpl.n	80099d6 <_printf_i+0xce>
 80099c0:	6805      	ldr	r5, [r0, #0]
 80099c2:	600b      	str	r3, [r1, #0]
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	da03      	bge.n	80099d0 <_printf_i+0xc8>
 80099c8:	232d      	movs	r3, #45	; 0x2d
 80099ca:	426d      	negs	r5, r5
 80099cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d0:	485e      	ldr	r0, [pc, #376]	; (8009b4c <_printf_i+0x244>)
 80099d2:	230a      	movs	r3, #10
 80099d4:	e019      	b.n	8009a0a <_printf_i+0x102>
 80099d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80099da:	6805      	ldr	r5, [r0, #0]
 80099dc:	600b      	str	r3, [r1, #0]
 80099de:	bf18      	it	ne
 80099e0:	b22d      	sxthne	r5, r5
 80099e2:	e7ef      	b.n	80099c4 <_printf_i+0xbc>
 80099e4:	680b      	ldr	r3, [r1, #0]
 80099e6:	6825      	ldr	r5, [r4, #0]
 80099e8:	1d18      	adds	r0, r3, #4
 80099ea:	6008      	str	r0, [r1, #0]
 80099ec:	0628      	lsls	r0, r5, #24
 80099ee:	d501      	bpl.n	80099f4 <_printf_i+0xec>
 80099f0:	681d      	ldr	r5, [r3, #0]
 80099f2:	e002      	b.n	80099fa <_printf_i+0xf2>
 80099f4:	0669      	lsls	r1, r5, #25
 80099f6:	d5fb      	bpl.n	80099f0 <_printf_i+0xe8>
 80099f8:	881d      	ldrh	r5, [r3, #0]
 80099fa:	4854      	ldr	r0, [pc, #336]	; (8009b4c <_printf_i+0x244>)
 80099fc:	2f6f      	cmp	r7, #111	; 0x6f
 80099fe:	bf0c      	ite	eq
 8009a00:	2308      	moveq	r3, #8
 8009a02:	230a      	movne	r3, #10
 8009a04:	2100      	movs	r1, #0
 8009a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a0a:	6866      	ldr	r6, [r4, #4]
 8009a0c:	60a6      	str	r6, [r4, #8]
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	bfa2      	ittt	ge
 8009a12:	6821      	ldrge	r1, [r4, #0]
 8009a14:	f021 0104 	bicge.w	r1, r1, #4
 8009a18:	6021      	strge	r1, [r4, #0]
 8009a1a:	b90d      	cbnz	r5, 8009a20 <_printf_i+0x118>
 8009a1c:	2e00      	cmp	r6, #0
 8009a1e:	d04d      	beq.n	8009abc <_printf_i+0x1b4>
 8009a20:	4616      	mov	r6, r2
 8009a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a26:	fb03 5711 	mls	r7, r3, r1, r5
 8009a2a:	5dc7      	ldrb	r7, [r0, r7]
 8009a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a30:	462f      	mov	r7, r5
 8009a32:	42bb      	cmp	r3, r7
 8009a34:	460d      	mov	r5, r1
 8009a36:	d9f4      	bls.n	8009a22 <_printf_i+0x11a>
 8009a38:	2b08      	cmp	r3, #8
 8009a3a:	d10b      	bne.n	8009a54 <_printf_i+0x14c>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	07df      	lsls	r7, r3, #31
 8009a40:	d508      	bpl.n	8009a54 <_printf_i+0x14c>
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	6861      	ldr	r1, [r4, #4]
 8009a46:	4299      	cmp	r1, r3
 8009a48:	bfde      	ittt	le
 8009a4a:	2330      	movle	r3, #48	; 0x30
 8009a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a54:	1b92      	subs	r2, r2, r6
 8009a56:	6122      	str	r2, [r4, #16]
 8009a58:	f8cd a000 	str.w	sl, [sp]
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	aa03      	add	r2, sp, #12
 8009a60:	4621      	mov	r1, r4
 8009a62:	4640      	mov	r0, r8
 8009a64:	f7ff fee2 	bl	800982c <_printf_common>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d14c      	bne.n	8009b06 <_printf_i+0x1fe>
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b004      	add	sp, #16
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a76:	4835      	ldr	r0, [pc, #212]	; (8009b4c <_printf_i+0x244>)
 8009a78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	680e      	ldr	r6, [r1, #0]
 8009a80:	061f      	lsls	r7, r3, #24
 8009a82:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a86:	600e      	str	r6, [r1, #0]
 8009a88:	d514      	bpl.n	8009ab4 <_printf_i+0x1ac>
 8009a8a:	07d9      	lsls	r1, r3, #31
 8009a8c:	bf44      	itt	mi
 8009a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a92:	6023      	strmi	r3, [r4, #0]
 8009a94:	b91d      	cbnz	r5, 8009a9e <_printf_i+0x196>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	f023 0320 	bic.w	r3, r3, #32
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	e7b0      	b.n	8009a04 <_printf_i+0xfc>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	f043 0320 	orr.w	r3, r3, #32
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	2378      	movs	r3, #120	; 0x78
 8009aac:	4828      	ldr	r0, [pc, #160]	; (8009b50 <_printf_i+0x248>)
 8009aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ab2:	e7e3      	b.n	8009a7c <_printf_i+0x174>
 8009ab4:	065e      	lsls	r6, r3, #25
 8009ab6:	bf48      	it	mi
 8009ab8:	b2ad      	uxthmi	r5, r5
 8009aba:	e7e6      	b.n	8009a8a <_printf_i+0x182>
 8009abc:	4616      	mov	r6, r2
 8009abe:	e7bb      	b.n	8009a38 <_printf_i+0x130>
 8009ac0:	680b      	ldr	r3, [r1, #0]
 8009ac2:	6826      	ldr	r6, [r4, #0]
 8009ac4:	6960      	ldr	r0, [r4, #20]
 8009ac6:	1d1d      	adds	r5, r3, #4
 8009ac8:	600d      	str	r5, [r1, #0]
 8009aca:	0635      	lsls	r5, r6, #24
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	d501      	bpl.n	8009ad4 <_printf_i+0x1cc>
 8009ad0:	6018      	str	r0, [r3, #0]
 8009ad2:	e002      	b.n	8009ada <_printf_i+0x1d2>
 8009ad4:	0671      	lsls	r1, r6, #25
 8009ad6:	d5fb      	bpl.n	8009ad0 <_printf_i+0x1c8>
 8009ad8:	8018      	strh	r0, [r3, #0]
 8009ada:	2300      	movs	r3, #0
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	4616      	mov	r6, r2
 8009ae0:	e7ba      	b.n	8009a58 <_printf_i+0x150>
 8009ae2:	680b      	ldr	r3, [r1, #0]
 8009ae4:	1d1a      	adds	r2, r3, #4
 8009ae6:	600a      	str	r2, [r1, #0]
 8009ae8:	681e      	ldr	r6, [r3, #0]
 8009aea:	6862      	ldr	r2, [r4, #4]
 8009aec:	2100      	movs	r1, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7f6 fb76 	bl	80001e0 <memchr>
 8009af4:	b108      	cbz	r0, 8009afa <_printf_i+0x1f2>
 8009af6:	1b80      	subs	r0, r0, r6
 8009af8:	6060      	str	r0, [r4, #4]
 8009afa:	6863      	ldr	r3, [r4, #4]
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	2300      	movs	r3, #0
 8009b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b04:	e7a8      	b.n	8009a58 <_printf_i+0x150>
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	4632      	mov	r2, r6
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	47d0      	blx	sl
 8009b10:	3001      	adds	r0, #1
 8009b12:	d0ab      	beq.n	8009a6c <_printf_i+0x164>
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	079b      	lsls	r3, r3, #30
 8009b18:	d413      	bmi.n	8009b42 <_printf_i+0x23a>
 8009b1a:	68e0      	ldr	r0, [r4, #12]
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	4298      	cmp	r0, r3
 8009b20:	bfb8      	it	lt
 8009b22:	4618      	movlt	r0, r3
 8009b24:	e7a4      	b.n	8009a70 <_printf_i+0x168>
 8009b26:	2301      	movs	r3, #1
 8009b28:	4632      	mov	r2, r6
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	47d0      	blx	sl
 8009b30:	3001      	adds	r0, #1
 8009b32:	d09b      	beq.n	8009a6c <_printf_i+0x164>
 8009b34:	3501      	adds	r5, #1
 8009b36:	68e3      	ldr	r3, [r4, #12]
 8009b38:	9903      	ldr	r1, [sp, #12]
 8009b3a:	1a5b      	subs	r3, r3, r1
 8009b3c:	42ab      	cmp	r3, r5
 8009b3e:	dcf2      	bgt.n	8009b26 <_printf_i+0x21e>
 8009b40:	e7eb      	b.n	8009b1a <_printf_i+0x212>
 8009b42:	2500      	movs	r5, #0
 8009b44:	f104 0619 	add.w	r6, r4, #25
 8009b48:	e7f5      	b.n	8009b36 <_printf_i+0x22e>
 8009b4a:	bf00      	nop
 8009b4c:	08017cf2 	.word	0x08017cf2
 8009b50:	08017d03 	.word	0x08017d03

08009b54 <iprintf>:
 8009b54:	b40f      	push	{r0, r1, r2, r3}
 8009b56:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <iprintf+0x2c>)
 8009b58:	b513      	push	{r0, r1, r4, lr}
 8009b5a:	681c      	ldr	r4, [r3, #0]
 8009b5c:	b124      	cbz	r4, 8009b68 <iprintf+0x14>
 8009b5e:	69a3      	ldr	r3, [r4, #24]
 8009b60:	b913      	cbnz	r3, 8009b68 <iprintf+0x14>
 8009b62:	4620      	mov	r0, r4
 8009b64:	f001 f8e6 	bl	800ad34 <__sinit>
 8009b68:	ab05      	add	r3, sp, #20
 8009b6a:	9a04      	ldr	r2, [sp, #16]
 8009b6c:	68a1      	ldr	r1, [r4, #8]
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	4620      	mov	r0, r4
 8009b72:	f001 fdab 	bl	800b6cc <_vfiprintf_r>
 8009b76:	b002      	add	sp, #8
 8009b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b7c:	b004      	add	sp, #16
 8009b7e:	4770      	bx	lr
 8009b80:	200007e8 	.word	0x200007e8

08009b84 <_puts_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	460e      	mov	r6, r1
 8009b88:	4605      	mov	r5, r0
 8009b8a:	b118      	cbz	r0, 8009b94 <_puts_r+0x10>
 8009b8c:	6983      	ldr	r3, [r0, #24]
 8009b8e:	b90b      	cbnz	r3, 8009b94 <_puts_r+0x10>
 8009b90:	f001 f8d0 	bl	800ad34 <__sinit>
 8009b94:	69ab      	ldr	r3, [r5, #24]
 8009b96:	68ac      	ldr	r4, [r5, #8]
 8009b98:	b913      	cbnz	r3, 8009ba0 <_puts_r+0x1c>
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f001 f8ca 	bl	800ad34 <__sinit>
 8009ba0:	4b2c      	ldr	r3, [pc, #176]	; (8009c54 <_puts_r+0xd0>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d120      	bne.n	8009be8 <_puts_r+0x64>
 8009ba6:	686c      	ldr	r4, [r5, #4]
 8009ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009baa:	07db      	lsls	r3, r3, #31
 8009bac:	d405      	bmi.n	8009bba <_puts_r+0x36>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	0598      	lsls	r0, r3, #22
 8009bb2:	d402      	bmi.n	8009bba <_puts_r+0x36>
 8009bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb6:	f001 f960 	bl	800ae7a <__retarget_lock_acquire_recursive>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	0719      	lsls	r1, r3, #28
 8009bbe:	d51d      	bpl.n	8009bfc <_puts_r+0x78>
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	b1db      	cbz	r3, 8009bfc <_puts_r+0x78>
 8009bc4:	3e01      	subs	r6, #1
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	60a3      	str	r3, [r4, #8]
 8009bd0:	bb39      	cbnz	r1, 8009c22 <_puts_r+0x9e>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da38      	bge.n	8009c48 <_puts_r+0xc4>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	210a      	movs	r1, #10
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 f858 	bl	8009c90 <__swbuf_r>
 8009be0:	3001      	adds	r0, #1
 8009be2:	d011      	beq.n	8009c08 <_puts_r+0x84>
 8009be4:	250a      	movs	r5, #10
 8009be6:	e011      	b.n	8009c0c <_puts_r+0x88>
 8009be8:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <_puts_r+0xd4>)
 8009bea:	429c      	cmp	r4, r3
 8009bec:	d101      	bne.n	8009bf2 <_puts_r+0x6e>
 8009bee:	68ac      	ldr	r4, [r5, #8]
 8009bf0:	e7da      	b.n	8009ba8 <_puts_r+0x24>
 8009bf2:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <_puts_r+0xd8>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	bf08      	it	eq
 8009bf8:	68ec      	ldreq	r4, [r5, #12]
 8009bfa:	e7d5      	b.n	8009ba8 <_puts_r+0x24>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 f898 	bl	8009d34 <__swsetup_r>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d0dd      	beq.n	8009bc4 <_puts_r+0x40>
 8009c08:	f04f 35ff 	mov.w	r5, #4294967295
 8009c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d405      	bmi.n	8009c1e <_puts_r+0x9a>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	059b      	lsls	r3, r3, #22
 8009c16:	d402      	bmi.n	8009c1e <_puts_r+0x9a>
 8009c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c1a:	f001 f92f 	bl	800ae7c <__retarget_lock_release_recursive>
 8009c1e:	4628      	mov	r0, r5
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da04      	bge.n	8009c30 <_puts_r+0xac>
 8009c26:	69a2      	ldr	r2, [r4, #24]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	dc06      	bgt.n	8009c3a <_puts_r+0xb6>
 8009c2c:	290a      	cmp	r1, #10
 8009c2e:	d004      	beq.n	8009c3a <_puts_r+0xb6>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	6022      	str	r2, [r4, #0]
 8009c36:	7019      	strb	r1, [r3, #0]
 8009c38:	e7c5      	b.n	8009bc6 <_puts_r+0x42>
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 f827 	bl	8009c90 <__swbuf_r>
 8009c42:	3001      	adds	r0, #1
 8009c44:	d1bf      	bne.n	8009bc6 <_puts_r+0x42>
 8009c46:	e7df      	b.n	8009c08 <_puts_r+0x84>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	250a      	movs	r5, #10
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	6022      	str	r2, [r4, #0]
 8009c50:	701d      	strb	r5, [r3, #0]
 8009c52:	e7db      	b.n	8009c0c <_puts_r+0x88>
 8009c54:	08017dc8 	.word	0x08017dc8
 8009c58:	08017de8 	.word	0x08017de8
 8009c5c:	08017da8 	.word	0x08017da8

08009c60 <puts>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <puts+0xc>)
 8009c62:	4601      	mov	r1, r0
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f7ff bf8d 	b.w	8009b84 <_puts_r>
 8009c6a:	bf00      	nop
 8009c6c:	200007e8 	.word	0x200007e8

08009c70 <_sbrk_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d06      	ldr	r5, [pc, #24]	; (8009c8c <_sbrk_r+0x1c>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7f7 fece 	bl	8001a1c <_sbrk>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_sbrk_r+0x1a>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_sbrk_r+0x1a>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	20001348 	.word	0x20001348

08009c90 <__swbuf_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	4605      	mov	r5, r0
 8009c98:	b118      	cbz	r0, 8009ca2 <__swbuf_r+0x12>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <__swbuf_r+0x12>
 8009c9e:	f001 f849 	bl	800ad34 <__sinit>
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <__swbuf_r+0x98>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d12b      	bne.n	8009d00 <__swbuf_r+0x70>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	d52f      	bpl.n	8009d14 <__swbuf_r+0x84>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b36b      	cbz	r3, 8009d14 <__swbuf_r+0x84>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	b2f6      	uxtb	r6, r6
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	4637      	mov	r7, r6
 8009cc6:	dc04      	bgt.n	8009cd2 <__swbuf_r+0x42>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 ff9e 	bl	800ac0c <_fflush_r>
 8009cd0:	bb30      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	701e      	strb	r6, [r3, #0]
 8009ce0:	6963      	ldr	r3, [r4, #20]
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	4283      	cmp	r3, r0
 8009ce6:	d004      	beq.n	8009cf2 <__swbuf_r+0x62>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d506      	bpl.n	8009cfc <__swbuf_r+0x6c>
 8009cee:	2e0a      	cmp	r6, #10
 8009cf0:	d104      	bne.n	8009cfc <__swbuf_r+0x6c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 ff89 	bl	800ac0c <_fflush_r>
 8009cfa:	b988      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <__swbuf_r+0x9c>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swbuf_r+0x7a>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7cf      	b.n	8009caa <__swbuf_r+0x1a>
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <__swbuf_r+0xa0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7ca      	b.n	8009caa <__swbuf_r+0x1a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f80c 	bl	8009d34 <__swsetup_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0cb      	beq.n	8009cb8 <__swbuf_r+0x28>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295
 8009d24:	e7ea      	b.n	8009cfc <__swbuf_r+0x6c>
 8009d26:	bf00      	nop
 8009d28:	08017dc8 	.word	0x08017dc8
 8009d2c:	08017de8 	.word	0x08017de8
 8009d30:	08017da8 	.word	0x08017da8

08009d34 <__swsetup_r>:
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <__swsetup_r+0xcc>)
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	b125      	cbz	r5, 8009d4a <__swsetup_r+0x16>
 8009d40:	69ab      	ldr	r3, [r5, #24]
 8009d42:	b913      	cbnz	r3, 8009d4a <__swsetup_r+0x16>
 8009d44:	4628      	mov	r0, r5
 8009d46:	f000 fff5 	bl	800ad34 <__sinit>
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	; (8009e04 <__swsetup_r+0xd0>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	d10f      	bne.n	8009d70 <__swsetup_r+0x3c>
 8009d50:	686c      	ldr	r4, [r5, #4]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d58:	0719      	lsls	r1, r3, #28
 8009d5a:	d42c      	bmi.n	8009db6 <__swsetup_r+0x82>
 8009d5c:	06dd      	lsls	r5, r3, #27
 8009d5e:	d411      	bmi.n	8009d84 <__swsetup_r+0x50>
 8009d60:	2309      	movs	r3, #9
 8009d62:	6033      	str	r3, [r6, #0]
 8009d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e03e      	b.n	8009dee <__swsetup_r+0xba>
 8009d70:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <__swsetup_r+0xd4>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <__swsetup_r+0x46>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7eb      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <__swsetup_r+0xd8>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7e6      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d84:	0758      	lsls	r0, r3, #29
 8009d86:	d512      	bpl.n	8009dae <__swsetup_r+0x7a>
 8009d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d8a:	b141      	cbz	r1, 8009d9e <__swsetup_r+0x6a>
 8009d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d90:	4299      	cmp	r1, r3
 8009d92:	d002      	beq.n	8009d9a <__swsetup_r+0x66>
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff f9c9 	bl	800912c <_free_r>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f043 0308 	orr.w	r3, r3, #8
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	b94b      	cbnz	r3, 8009dce <__swsetup_r+0x9a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc4:	d003      	beq.n	8009dce <__swsetup_r+0x9a>
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f001 f87d 	bl	800aec8 <__smakebuf_r>
 8009dce:	89a0      	ldrh	r0, [r4, #12]
 8009dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd4:	f010 0301 	ands.w	r3, r0, #1
 8009dd8:	d00a      	beq.n	8009df0 <__swsetup_r+0xbc>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60a3      	str	r3, [r4, #8]
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	425b      	negs	r3, r3
 8009de2:	61a3      	str	r3, [r4, #24]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	b943      	cbnz	r3, 8009dfa <__swsetup_r+0xc6>
 8009de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dec:	d1ba      	bne.n	8009d64 <__swsetup_r+0x30>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	0781      	lsls	r1, r0, #30
 8009df2:	bf58      	it	pl
 8009df4:	6963      	ldrpl	r3, [r4, #20]
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	e7f4      	b.n	8009de4 <__swsetup_r+0xb0>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e7f7      	b.n	8009dee <__swsetup_r+0xba>
 8009dfe:	bf00      	nop
 8009e00:	200007e8 	.word	0x200007e8
 8009e04:	08017dc8 	.word	0x08017dc8
 8009e08:	08017de8 	.word	0x08017de8
 8009e0c:	08017da8 	.word	0x08017da8

08009e10 <quorem>:
 8009e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	6903      	ldr	r3, [r0, #16]
 8009e16:	690c      	ldr	r4, [r1, #16]
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	f2c0 8081 	blt.w	8009f22 <quorem+0x112>
 8009e20:	3c01      	subs	r4, #1
 8009e22:	f101 0814 	add.w	r8, r1, #20
 8009e26:	f100 0514 	add.w	r5, r0, #20
 8009e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e48:	d331      	bcc.n	8009eae <quorem+0x9e>
 8009e4a:	f04f 0e00 	mov.w	lr, #0
 8009e4e:	4640      	mov	r0, r8
 8009e50:	46ac      	mov	ip, r5
 8009e52:	46f2      	mov	sl, lr
 8009e54:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e58:	b293      	uxth	r3, r2
 8009e5a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ebaa 0303 	sub.w	r3, sl, r3
 8009e68:	0c12      	lsrs	r2, r2, #16
 8009e6a:	f8dc a000 	ldr.w	sl, [ip]
 8009e6e:	fb06 e202 	mla	r2, r6, r2, lr
 8009e72:	fa13 f38a 	uxtah	r3, r3, sl
 8009e76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e7a:	fa1f fa82 	uxth.w	sl, r2
 8009e7e:	f8dc 2000 	ldr.w	r2, [ip]
 8009e82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009e86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e90:	4581      	cmp	r9, r0
 8009e92:	f84c 3b04 	str.w	r3, [ip], #4
 8009e96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e9a:	d2db      	bcs.n	8009e54 <quorem+0x44>
 8009e9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ea0:	b92b      	cbnz	r3, 8009eae <quorem+0x9e>
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	d32e      	bcc.n	8009f0a <quorem+0xfa>
 8009eac:	613c      	str	r4, [r7, #16]
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f001 fad4 	bl	800b45c <__mcmp>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	db24      	blt.n	8009f02 <quorem+0xf2>
 8009eb8:	3601      	adds	r6, #1
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f04f 0c00 	mov.w	ip, #0
 8009ec0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ec4:	f8d0 e000 	ldr.w	lr, [r0]
 8009ec8:	b293      	uxth	r3, r2
 8009eca:	ebac 0303 	sub.w	r3, ip, r3
 8009ece:	0c12      	lsrs	r2, r2, #16
 8009ed0:	fa13 f38e 	uxtah	r3, r3, lr
 8009ed4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee2:	45c1      	cmp	r9, r8
 8009ee4:	f840 3b04 	str.w	r3, [r0], #4
 8009ee8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eec:	d2e8      	bcs.n	8009ec0 <quorem+0xb0>
 8009eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ef6:	b922      	cbnz	r2, 8009f02 <quorem+0xf2>
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	429d      	cmp	r5, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	d30a      	bcc.n	8009f16 <quorem+0x106>
 8009f00:	613c      	str	r4, [r7, #16]
 8009f02:	4630      	mov	r0, r6
 8009f04:	b003      	add	sp, #12
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	3b04      	subs	r3, #4
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	d1cc      	bne.n	8009eac <quorem+0x9c>
 8009f12:	3c01      	subs	r4, #1
 8009f14:	e7c7      	b.n	8009ea6 <quorem+0x96>
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	d1f0      	bne.n	8009f00 <quorem+0xf0>
 8009f1e:	3c01      	subs	r4, #1
 8009f20:	e7eb      	b.n	8009efa <quorem+0xea>
 8009f22:	2000      	movs	r0, #0
 8009f24:	e7ee      	b.n	8009f04 <quorem+0xf4>
	...

08009f28 <_dtoa_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	ed2d 8b02 	vpush	{d8}
 8009f30:	ec57 6b10 	vmov	r6, r7, d0
 8009f34:	b095      	sub	sp, #84	; 0x54
 8009f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f3c:	9105      	str	r1, [sp, #20]
 8009f3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f42:	4604      	mov	r4, r0
 8009f44:	9209      	str	r2, [sp, #36]	; 0x24
 8009f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f48:	b975      	cbnz	r5, 8009f68 <_dtoa_r+0x40>
 8009f4a:	2010      	movs	r0, #16
 8009f4c:	f7ff f8d0 	bl	80090f0 <malloc>
 8009f50:	4602      	mov	r2, r0
 8009f52:	6260      	str	r0, [r4, #36]	; 0x24
 8009f54:	b920      	cbnz	r0, 8009f60 <_dtoa_r+0x38>
 8009f56:	4bb2      	ldr	r3, [pc, #712]	; (800a220 <_dtoa_r+0x2f8>)
 8009f58:	21ea      	movs	r1, #234	; 0xea
 8009f5a:	48b2      	ldr	r0, [pc, #712]	; (800a224 <_dtoa_r+0x2fc>)
 8009f5c:	f001 fd3c 	bl	800b9d8 <__assert_func>
 8009f60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f64:	6005      	str	r5, [r0, #0]
 8009f66:	60c5      	str	r5, [r0, #12]
 8009f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f6a:	6819      	ldr	r1, [r3, #0]
 8009f6c:	b151      	cbz	r1, 8009f84 <_dtoa_r+0x5c>
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	604a      	str	r2, [r1, #4]
 8009f72:	2301      	movs	r3, #1
 8009f74:	4093      	lsls	r3, r2
 8009f76:	608b      	str	r3, [r1, #8]
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f001 f831 	bl	800afe0 <_Bfree>
 8009f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	1e3b      	subs	r3, r7, #0
 8009f86:	bfb9      	ittee	lt
 8009f88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f8c:	9303      	strlt	r3, [sp, #12]
 8009f8e:	2300      	movge	r3, #0
 8009f90:	f8c8 3000 	strge.w	r3, [r8]
 8009f94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009f98:	4ba3      	ldr	r3, [pc, #652]	; (800a228 <_dtoa_r+0x300>)
 8009f9a:	bfbc      	itt	lt
 8009f9c:	2201      	movlt	r2, #1
 8009f9e:	f8c8 2000 	strlt.w	r2, [r8]
 8009fa2:	ea33 0309 	bics.w	r3, r3, r9
 8009fa6:	d11b      	bne.n	8009fe0 <_dtoa_r+0xb8>
 8009fa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009faa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fb4:	4333      	orrs	r3, r6
 8009fb6:	f000 857a 	beq.w	800aaae <_dtoa_r+0xb86>
 8009fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fbc:	b963      	cbnz	r3, 8009fd8 <_dtoa_r+0xb0>
 8009fbe:	4b9b      	ldr	r3, [pc, #620]	; (800a22c <_dtoa_r+0x304>)
 8009fc0:	e024      	b.n	800a00c <_dtoa_r+0xe4>
 8009fc2:	4b9b      	ldr	r3, [pc, #620]	; (800a230 <_dtoa_r+0x308>)
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	9800      	ldr	r0, [sp, #0]
 8009fce:	b015      	add	sp, #84	; 0x54
 8009fd0:	ecbd 8b02 	vpop	{d8}
 8009fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	4b94      	ldr	r3, [pc, #592]	; (800a22c <_dtoa_r+0x304>)
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	3303      	adds	r3, #3
 8009fde:	e7f3      	b.n	8009fc8 <_dtoa_r+0xa0>
 8009fe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	ec51 0b17 	vmov	r0, r1, d7
 8009fea:	2300      	movs	r3, #0
 8009fec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ff0:	f7f6 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	b158      	cbz	r0, 800a010 <_dtoa_r+0xe8>
 8009ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8551 	beq.w	800aaa8 <_dtoa_r+0xb80>
 800a006:	488b      	ldr	r0, [pc, #556]	; (800a234 <_dtoa_r+0x30c>)
 800a008:	6018      	str	r0, [r3, #0]
 800a00a:	1e43      	subs	r3, r0, #1
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	e7dd      	b.n	8009fcc <_dtoa_r+0xa4>
 800a010:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a014:	aa12      	add	r2, sp, #72	; 0x48
 800a016:	a913      	add	r1, sp, #76	; 0x4c
 800a018:	4620      	mov	r0, r4
 800a01a:	f001 fac3 	bl	800b5a4 <__d2b>
 800a01e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a022:	4683      	mov	fp, r0
 800a024:	2d00      	cmp	r5, #0
 800a026:	d07c      	beq.n	800a122 <_dtoa_r+0x1fa>
 800a028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a02e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a032:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a036:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a03a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a03e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a042:	4b7d      	ldr	r3, [pc, #500]	; (800a238 <_dtoa_r+0x310>)
 800a044:	2200      	movs	r2, #0
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 f91d 	bl	8000288 <__aeabi_dsub>
 800a04e:	a36e      	add	r3, pc, #440	; (adr r3, 800a208 <_dtoa_r+0x2e0>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 fad0 	bl	80005f8 <__aeabi_dmul>
 800a058:	a36d      	add	r3, pc, #436	; (adr r3, 800a210 <_dtoa_r+0x2e8>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 f915 	bl	800028c <__adddf3>
 800a062:	4606      	mov	r6, r0
 800a064:	4628      	mov	r0, r5
 800a066:	460f      	mov	r7, r1
 800a068:	f7f6 fa5c 	bl	8000524 <__aeabi_i2d>
 800a06c:	a36a      	add	r3, pc, #424	; (adr r3, 800a218 <_dtoa_r+0x2f0>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4630      	mov	r0, r6
 800a07c:	4639      	mov	r1, r7
 800a07e:	f7f6 f905 	bl	800028c <__adddf3>
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	f7f6 fd67 	bl	8000b58 <__aeabi_d2iz>
 800a08a:	2200      	movs	r2, #0
 800a08c:	4682      	mov	sl, r0
 800a08e:	2300      	movs	r3, #0
 800a090:	4630      	mov	r0, r6
 800a092:	4639      	mov	r1, r7
 800a094:	f7f6 fd22 	bl	8000adc <__aeabi_dcmplt>
 800a098:	b148      	cbz	r0, 800a0ae <_dtoa_r+0x186>
 800a09a:	4650      	mov	r0, sl
 800a09c:	f7f6 fa42 	bl	8000524 <__aeabi_i2d>
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	463b      	mov	r3, r7
 800a0a4:	f7f6 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0a8:	b908      	cbnz	r0, 800a0ae <_dtoa_r+0x186>
 800a0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ae:	f1ba 0f16 	cmp.w	sl, #22
 800a0b2:	d854      	bhi.n	800a15e <_dtoa_r+0x236>
 800a0b4:	4b61      	ldr	r3, [pc, #388]	; (800a23c <_dtoa_r+0x314>)
 800a0b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0c2:	f7f6 fd0b 	bl	8000adc <__aeabi_dcmplt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d04b      	beq.n	800a162 <_dtoa_r+0x23a>
 800a0ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	930e      	str	r3, [sp, #56]	; 0x38
 800a0d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0d4:	1b5d      	subs	r5, r3, r5
 800a0d6:	1e6b      	subs	r3, r5, #1
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	bf43      	ittte	mi
 800a0dc:	2300      	movmi	r3, #0
 800a0de:	f1c5 0801 	rsbmi	r8, r5, #1
 800a0e2:	9304      	strmi	r3, [sp, #16]
 800a0e4:	f04f 0800 	movpl.w	r8, #0
 800a0e8:	f1ba 0f00 	cmp.w	sl, #0
 800a0ec:	db3b      	blt.n	800a166 <_dtoa_r+0x23e>
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a0f4:	4453      	add	r3, sl
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	9b05      	ldr	r3, [sp, #20]
 800a0fe:	2b09      	cmp	r3, #9
 800a100:	d869      	bhi.n	800a1d6 <_dtoa_r+0x2ae>
 800a102:	2b05      	cmp	r3, #5
 800a104:	bfc4      	itt	gt
 800a106:	3b04      	subgt	r3, #4
 800a108:	9305      	strgt	r3, [sp, #20]
 800a10a:	9b05      	ldr	r3, [sp, #20]
 800a10c:	f1a3 0302 	sub.w	r3, r3, #2
 800a110:	bfcc      	ite	gt
 800a112:	2500      	movgt	r5, #0
 800a114:	2501      	movle	r5, #1
 800a116:	2b03      	cmp	r3, #3
 800a118:	d869      	bhi.n	800a1ee <_dtoa_r+0x2c6>
 800a11a:	e8df f003 	tbb	[pc, r3]
 800a11e:	4e2c      	.short	0x4e2c
 800a120:	5a4c      	.short	0x5a4c
 800a122:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a126:	441d      	add	r5, r3
 800a128:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	bfc1      	itttt	gt
 800a130:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a134:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a138:	fa09 f303 	lslgt.w	r3, r9, r3
 800a13c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a140:	bfda      	itte	le
 800a142:	f1c3 0320 	rsble	r3, r3, #32
 800a146:	fa06 f003 	lslle.w	r0, r6, r3
 800a14a:	4318      	orrgt	r0, r3
 800a14c:	f7f6 f9da 	bl	8000504 <__aeabi_ui2d>
 800a150:	2301      	movs	r3, #1
 800a152:	4606      	mov	r6, r0
 800a154:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a158:	3d01      	subs	r5, #1
 800a15a:	9310      	str	r3, [sp, #64]	; 0x40
 800a15c:	e771      	b.n	800a042 <_dtoa_r+0x11a>
 800a15e:	2301      	movs	r3, #1
 800a160:	e7b6      	b.n	800a0d0 <_dtoa_r+0x1a8>
 800a162:	900e      	str	r0, [sp, #56]	; 0x38
 800a164:	e7b5      	b.n	800a0d2 <_dtoa_r+0x1aa>
 800a166:	f1ca 0300 	rsb	r3, sl, #0
 800a16a:	9306      	str	r3, [sp, #24]
 800a16c:	2300      	movs	r3, #0
 800a16e:	eba8 080a 	sub.w	r8, r8, sl
 800a172:	930d      	str	r3, [sp, #52]	; 0x34
 800a174:	e7c2      	b.n	800a0fc <_dtoa_r+0x1d4>
 800a176:	2300      	movs	r3, #0
 800a178:	9308      	str	r3, [sp, #32]
 800a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dc39      	bgt.n	800a1f4 <_dtoa_r+0x2cc>
 800a180:	f04f 0901 	mov.w	r9, #1
 800a184:	f8cd 9004 	str.w	r9, [sp, #4]
 800a188:	464b      	mov	r3, r9
 800a18a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a18e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a190:	2200      	movs	r2, #0
 800a192:	6042      	str	r2, [r0, #4]
 800a194:	2204      	movs	r2, #4
 800a196:	f102 0614 	add.w	r6, r2, #20
 800a19a:	429e      	cmp	r6, r3
 800a19c:	6841      	ldr	r1, [r0, #4]
 800a19e:	d92f      	bls.n	800a200 <_dtoa_r+0x2d8>
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fedd 	bl	800af60 <_Balloc>
 800a1a6:	9000      	str	r0, [sp, #0]
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d14b      	bne.n	800a244 <_dtoa_r+0x31c>
 800a1ac:	4b24      	ldr	r3, [pc, #144]	; (800a240 <_dtoa_r+0x318>)
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1b4:	e6d1      	b.n	8009f5a <_dtoa_r+0x32>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e7de      	b.n	800a178 <_dtoa_r+0x250>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	9308      	str	r3, [sp, #32]
 800a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c0:	eb0a 0903 	add.w	r9, sl, r3
 800a1c4:	f109 0301 	add.w	r3, r9, #1
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	9301      	str	r3, [sp, #4]
 800a1cc:	bfb8      	it	lt
 800a1ce:	2301      	movlt	r3, #1
 800a1d0:	e7dd      	b.n	800a18e <_dtoa_r+0x266>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e7f2      	b.n	800a1bc <_dtoa_r+0x294>
 800a1d6:	2501      	movs	r5, #1
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9305      	str	r3, [sp, #20]
 800a1dc:	9508      	str	r5, [sp, #32]
 800a1de:	f04f 39ff 	mov.w	r9, #4294967295
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1e8:	2312      	movs	r3, #18
 800a1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ec:	e7cf      	b.n	800a18e <_dtoa_r+0x266>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	e7f4      	b.n	800a1de <_dtoa_r+0x2b6>
 800a1f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a1f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	e7c6      	b.n	800a18e <_dtoa_r+0x266>
 800a200:	3101      	adds	r1, #1
 800a202:	6041      	str	r1, [r0, #4]
 800a204:	0052      	lsls	r2, r2, #1
 800a206:	e7c6      	b.n	800a196 <_dtoa_r+0x26e>
 800a208:	636f4361 	.word	0x636f4361
 800a20c:	3fd287a7 	.word	0x3fd287a7
 800a210:	8b60c8b3 	.word	0x8b60c8b3
 800a214:	3fc68a28 	.word	0x3fc68a28
 800a218:	509f79fb 	.word	0x509f79fb
 800a21c:	3fd34413 	.word	0x3fd34413
 800a220:	08017d21 	.word	0x08017d21
 800a224:	08017d38 	.word	0x08017d38
 800a228:	7ff00000 	.word	0x7ff00000
 800a22c:	08017d1d 	.word	0x08017d1d
 800a230:	08017d14 	.word	0x08017d14
 800a234:	08017cf1 	.word	0x08017cf1
 800a238:	3ff80000 	.word	0x3ff80000
 800a23c:	08017e90 	.word	0x08017e90
 800a240:	08017d97 	.word	0x08017d97
 800a244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a246:	9a00      	ldr	r2, [sp, #0]
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	9b01      	ldr	r3, [sp, #4]
 800a24c:	2b0e      	cmp	r3, #14
 800a24e:	f200 80ad 	bhi.w	800a3ac <_dtoa_r+0x484>
 800a252:	2d00      	cmp	r5, #0
 800a254:	f000 80aa 	beq.w	800a3ac <_dtoa_r+0x484>
 800a258:	f1ba 0f00 	cmp.w	sl, #0
 800a25c:	dd36      	ble.n	800a2cc <_dtoa_r+0x3a4>
 800a25e:	4ac3      	ldr	r2, [pc, #780]	; (800a56c <_dtoa_r+0x644>)
 800a260:	f00a 030f 	and.w	r3, sl, #15
 800a264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a268:	ed93 7b00 	vldr	d7, [r3]
 800a26c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a270:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a274:	eeb0 8a47 	vmov.f32	s16, s14
 800a278:	eef0 8a67 	vmov.f32	s17, s15
 800a27c:	d016      	beq.n	800a2ac <_dtoa_r+0x384>
 800a27e:	4bbc      	ldr	r3, [pc, #752]	; (800a570 <_dtoa_r+0x648>)
 800a280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a288:	f7f6 fae0 	bl	800084c <__aeabi_ddiv>
 800a28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a290:	f007 070f 	and.w	r7, r7, #15
 800a294:	2503      	movs	r5, #3
 800a296:	4eb6      	ldr	r6, [pc, #728]	; (800a570 <_dtoa_r+0x648>)
 800a298:	b957      	cbnz	r7, 800a2b0 <_dtoa_r+0x388>
 800a29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a29e:	ec53 2b18 	vmov	r2, r3, d8
 800a2a2:	f7f6 fad3 	bl	800084c <__aeabi_ddiv>
 800a2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2aa:	e029      	b.n	800a300 <_dtoa_r+0x3d8>
 800a2ac:	2502      	movs	r5, #2
 800a2ae:	e7f2      	b.n	800a296 <_dtoa_r+0x36e>
 800a2b0:	07f9      	lsls	r1, r7, #31
 800a2b2:	d508      	bpl.n	800a2c6 <_dtoa_r+0x39e>
 800a2b4:	ec51 0b18 	vmov	r0, r1, d8
 800a2b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2bc:	f7f6 f99c 	bl	80005f8 <__aeabi_dmul>
 800a2c0:	ec41 0b18 	vmov	d8, r0, r1
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	107f      	asrs	r7, r7, #1
 800a2c8:	3608      	adds	r6, #8
 800a2ca:	e7e5      	b.n	800a298 <_dtoa_r+0x370>
 800a2cc:	f000 80a6 	beq.w	800a41c <_dtoa_r+0x4f4>
 800a2d0:	f1ca 0600 	rsb	r6, sl, #0
 800a2d4:	4ba5      	ldr	r3, [pc, #660]	; (800a56c <_dtoa_r+0x644>)
 800a2d6:	4fa6      	ldr	r7, [pc, #664]	; (800a570 <_dtoa_r+0x648>)
 800a2d8:	f006 020f 	and.w	r2, r6, #15
 800a2dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2e8:	f7f6 f986 	bl	80005f8 <__aeabi_dmul>
 800a2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f0:	1136      	asrs	r6, r6, #4
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2502      	movs	r5, #2
 800a2f6:	2e00      	cmp	r6, #0
 800a2f8:	f040 8085 	bne.w	800a406 <_dtoa_r+0x4de>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1d2      	bne.n	800a2a6 <_dtoa_r+0x37e>
 800a300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 808c 	beq.w	800a420 <_dtoa_r+0x4f8>
 800a308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a30c:	4b99      	ldr	r3, [pc, #612]	; (800a574 <_dtoa_r+0x64c>)
 800a30e:	2200      	movs	r2, #0
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f6 fbe2 	bl	8000adc <__aeabi_dcmplt>
 800a318:	2800      	cmp	r0, #0
 800a31a:	f000 8081 	beq.w	800a420 <_dtoa_r+0x4f8>
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d07d      	beq.n	800a420 <_dtoa_r+0x4f8>
 800a324:	f1b9 0f00 	cmp.w	r9, #0
 800a328:	dd3c      	ble.n	800a3a4 <_dtoa_r+0x47c>
 800a32a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a32e:	9307      	str	r3, [sp, #28]
 800a330:	2200      	movs	r2, #0
 800a332:	4b91      	ldr	r3, [pc, #580]	; (800a578 <_dtoa_r+0x650>)
 800a334:	4630      	mov	r0, r6
 800a336:	4639      	mov	r1, r7
 800a338:	f7f6 f95e 	bl	80005f8 <__aeabi_dmul>
 800a33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a340:	3501      	adds	r5, #1
 800a342:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a346:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a34a:	4628      	mov	r0, r5
 800a34c:	f7f6 f8ea 	bl	8000524 <__aeabi_i2d>
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	f7f6 f950 	bl	80005f8 <__aeabi_dmul>
 800a358:	4b88      	ldr	r3, [pc, #544]	; (800a57c <_dtoa_r+0x654>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	f7f5 ff96 	bl	800028c <__adddf3>
 800a360:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d15c      	bne.n	800a42a <_dtoa_r+0x502>
 800a370:	4b83      	ldr	r3, [pc, #524]	; (800a580 <_dtoa_r+0x658>)
 800a372:	2200      	movs	r2, #0
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f5 ff86 	bl	8000288 <__aeabi_dsub>
 800a37c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a380:	4606      	mov	r6, r0
 800a382:	460f      	mov	r7, r1
 800a384:	f7f6 fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 800a388:	2800      	cmp	r0, #0
 800a38a:	f040 8296 	bne.w	800a8ba <_dtoa_r+0x992>
 800a38e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a392:	4630      	mov	r0, r6
 800a394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f6 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f040 8288 	bne.w	800a8b4 <_dtoa_r+0x98c>
 800a3a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f2c0 8158 	blt.w	800a664 <_dtoa_r+0x73c>
 800a3b4:	f1ba 0f0e 	cmp.w	sl, #14
 800a3b8:	f300 8154 	bgt.w	800a664 <_dtoa_r+0x73c>
 800a3bc:	4b6b      	ldr	r3, [pc, #428]	; (800a56c <_dtoa_r+0x644>)
 800a3be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f280 80e3 	bge.w	800a594 <_dtoa_r+0x66c>
 800a3ce:	9b01      	ldr	r3, [sp, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f300 80df 	bgt.w	800a594 <_dtoa_r+0x66c>
 800a3d6:	f040 826d 	bne.w	800a8b4 <_dtoa_r+0x98c>
 800a3da:	4b69      	ldr	r3, [pc, #420]	; (800a580 <_dtoa_r+0x658>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 f909 	bl	80005f8 <__aeabi_dmul>
 800a3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ea:	f7f6 fb8b 	bl	8000b04 <__aeabi_dcmpge>
 800a3ee:	9e01      	ldr	r6, [sp, #4]
 800a3f0:	4637      	mov	r7, r6
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f040 8243 	bne.w	800a87e <_dtoa_r+0x956>
 800a3f8:	9d00      	ldr	r5, [sp, #0]
 800a3fa:	2331      	movs	r3, #49	; 0x31
 800a3fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a400:	f10a 0a01 	add.w	sl, sl, #1
 800a404:	e23f      	b.n	800a886 <_dtoa_r+0x95e>
 800a406:	07f2      	lsls	r2, r6, #31
 800a408:	d505      	bpl.n	800a416 <_dtoa_r+0x4ee>
 800a40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	3501      	adds	r5, #1
 800a414:	2301      	movs	r3, #1
 800a416:	1076      	asrs	r6, r6, #1
 800a418:	3708      	adds	r7, #8
 800a41a:	e76c      	b.n	800a2f6 <_dtoa_r+0x3ce>
 800a41c:	2502      	movs	r5, #2
 800a41e:	e76f      	b.n	800a300 <_dtoa_r+0x3d8>
 800a420:	9b01      	ldr	r3, [sp, #4]
 800a422:	f8cd a01c 	str.w	sl, [sp, #28]
 800a426:	930c      	str	r3, [sp, #48]	; 0x30
 800a428:	e78d      	b.n	800a346 <_dtoa_r+0x41e>
 800a42a:	9900      	ldr	r1, [sp, #0]
 800a42c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a42e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a430:	4b4e      	ldr	r3, [pc, #312]	; (800a56c <_dtoa_r+0x644>)
 800a432:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a436:	4401      	add	r1, r0
 800a438:	9102      	str	r1, [sp, #8]
 800a43a:	9908      	ldr	r1, [sp, #32]
 800a43c:	eeb0 8a47 	vmov.f32	s16, s14
 800a440:	eef0 8a67 	vmov.f32	s17, s15
 800a444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a448:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d045      	beq.n	800a4dc <_dtoa_r+0x5b4>
 800a450:	494c      	ldr	r1, [pc, #304]	; (800a584 <_dtoa_r+0x65c>)
 800a452:	2000      	movs	r0, #0
 800a454:	f7f6 f9fa 	bl	800084c <__aeabi_ddiv>
 800a458:	ec53 2b18 	vmov	r2, r3, d8
 800a45c:	f7f5 ff14 	bl	8000288 <__aeabi_dsub>
 800a460:	9d00      	ldr	r5, [sp, #0]
 800a462:	ec41 0b18 	vmov	d8, r0, r1
 800a466:	4639      	mov	r1, r7
 800a468:	4630      	mov	r0, r6
 800a46a:	f7f6 fb75 	bl	8000b58 <__aeabi_d2iz>
 800a46e:	900c      	str	r0, [sp, #48]	; 0x30
 800a470:	f7f6 f858 	bl	8000524 <__aeabi_i2d>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f5 ff04 	bl	8000288 <__aeabi_dsub>
 800a480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a482:	3330      	adds	r3, #48	; 0x30
 800a484:	f805 3b01 	strb.w	r3, [r5], #1
 800a488:	ec53 2b18 	vmov	r2, r3, d8
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	f7f6 fb24 	bl	8000adc <__aeabi_dcmplt>
 800a494:	2800      	cmp	r0, #0
 800a496:	d165      	bne.n	800a564 <_dtoa_r+0x63c>
 800a498:	4632      	mov	r2, r6
 800a49a:	463b      	mov	r3, r7
 800a49c:	4935      	ldr	r1, [pc, #212]	; (800a574 <_dtoa_r+0x64c>)
 800a49e:	2000      	movs	r0, #0
 800a4a0:	f7f5 fef2 	bl	8000288 <__aeabi_dsub>
 800a4a4:	ec53 2b18 	vmov	r2, r3, d8
 800a4a8:	f7f6 fb18 	bl	8000adc <__aeabi_dcmplt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f040 80b9 	bne.w	800a624 <_dtoa_r+0x6fc>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	429d      	cmp	r5, r3
 800a4b6:	f43f af75 	beq.w	800a3a4 <_dtoa_r+0x47c>
 800a4ba:	4b2f      	ldr	r3, [pc, #188]	; (800a578 <_dtoa_r+0x650>)
 800a4bc:	ec51 0b18 	vmov	r0, r1, d8
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f7f6 f899 	bl	80005f8 <__aeabi_dmul>
 800a4c6:	4b2c      	ldr	r3, [pc, #176]	; (800a578 <_dtoa_r+0x650>)
 800a4c8:	ec41 0b18 	vmov	d8, r0, r1
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460f      	mov	r7, r1
 800a4da:	e7c4      	b.n	800a466 <_dtoa_r+0x53e>
 800a4dc:	ec51 0b17 	vmov	r0, r1, d7
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	9b02      	ldr	r3, [sp, #8]
 800a4e6:	9d00      	ldr	r5, [sp, #0]
 800a4e8:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ea:	ec41 0b18 	vmov	d8, r0, r1
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7f6 fb31 	bl	8000b58 <__aeabi_d2iz>
 800a4f6:	9011      	str	r0, [sp, #68]	; 0x44
 800a4f8:	f7f6 f814 	bl	8000524 <__aeabi_i2d>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f5 fec0 	bl	8000288 <__aeabi_dsub>
 800a508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a50a:	3330      	adds	r3, #48	; 0x30
 800a50c:	f805 3b01 	strb.w	r3, [r5], #1
 800a510:	9b02      	ldr	r3, [sp, #8]
 800a512:	429d      	cmp	r5, r3
 800a514:	4606      	mov	r6, r0
 800a516:	460f      	mov	r7, r1
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	d134      	bne.n	800a588 <_dtoa_r+0x660>
 800a51e:	4b19      	ldr	r3, [pc, #100]	; (800a584 <_dtoa_r+0x65c>)
 800a520:	ec51 0b18 	vmov	r0, r1, d8
 800a524:	f7f5 feb2 	bl	800028c <__adddf3>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f6 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 800a534:	2800      	cmp	r0, #0
 800a536:	d175      	bne.n	800a624 <_dtoa_r+0x6fc>
 800a538:	ec53 2b18 	vmov	r2, r3, d8
 800a53c:	4911      	ldr	r1, [pc, #68]	; (800a584 <_dtoa_r+0x65c>)
 800a53e:	2000      	movs	r0, #0
 800a540:	f7f5 fea2 	bl	8000288 <__aeabi_dsub>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f6 fac6 	bl	8000adc <__aeabi_dcmplt>
 800a550:	2800      	cmp	r0, #0
 800a552:	f43f af27 	beq.w	800a3a4 <_dtoa_r+0x47c>
 800a556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a558:	1e6b      	subs	r3, r5, #1
 800a55a:	930c      	str	r3, [sp, #48]	; 0x30
 800a55c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a560:	2b30      	cmp	r3, #48	; 0x30
 800a562:	d0f8      	beq.n	800a556 <_dtoa_r+0x62e>
 800a564:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a568:	e04a      	b.n	800a600 <_dtoa_r+0x6d8>
 800a56a:	bf00      	nop
 800a56c:	08017e90 	.word	0x08017e90
 800a570:	08017e68 	.word	0x08017e68
 800a574:	3ff00000 	.word	0x3ff00000
 800a578:	40240000 	.word	0x40240000
 800a57c:	401c0000 	.word	0x401c0000
 800a580:	40140000 	.word	0x40140000
 800a584:	3fe00000 	.word	0x3fe00000
 800a588:	4baf      	ldr	r3, [pc, #700]	; (800a848 <_dtoa_r+0x920>)
 800a58a:	f7f6 f835 	bl	80005f8 <__aeabi_dmul>
 800a58e:	4606      	mov	r6, r0
 800a590:	460f      	mov	r7, r1
 800a592:	e7ac      	b.n	800a4ee <_dtoa_r+0x5c6>
 800a594:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a598:	9d00      	ldr	r5, [sp, #0]
 800a59a:	4642      	mov	r2, r8
 800a59c:	464b      	mov	r3, r9
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	f7f6 f953 	bl	800084c <__aeabi_ddiv>
 800a5a6:	f7f6 fad7 	bl	8000b58 <__aeabi_d2iz>
 800a5aa:	9002      	str	r0, [sp, #8]
 800a5ac:	f7f5 ffba 	bl	8000524 <__aeabi_i2d>
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	f7f6 f820 	bl	80005f8 <__aeabi_dmul>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f5 fe62 	bl	8000288 <__aeabi_dsub>
 800a5c4:	9e02      	ldr	r6, [sp, #8]
 800a5c6:	9f01      	ldr	r7, [sp, #4]
 800a5c8:	3630      	adds	r6, #48	; 0x30
 800a5ca:	f805 6b01 	strb.w	r6, [r5], #1
 800a5ce:	9e00      	ldr	r6, [sp, #0]
 800a5d0:	1bae      	subs	r6, r5, r6
 800a5d2:	42b7      	cmp	r7, r6
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	d137      	bne.n	800a64a <_dtoa_r+0x722>
 800a5da:	f7f5 fe57 	bl	800028c <__adddf3>
 800a5de:	4642      	mov	r2, r8
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	f7f6 fa97 	bl	8000b18 <__aeabi_dcmpgt>
 800a5ea:	b9c8      	cbnz	r0, 800a620 <_dtoa_r+0x6f8>
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f6 fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5f8:	b110      	cbz	r0, 800a600 <_dtoa_r+0x6d8>
 800a5fa:	9b02      	ldr	r3, [sp, #8]
 800a5fc:	07d9      	lsls	r1, r3, #31
 800a5fe:	d40f      	bmi.n	800a620 <_dtoa_r+0x6f8>
 800a600:	4620      	mov	r0, r4
 800a602:	4659      	mov	r1, fp
 800a604:	f000 fcec 	bl	800afe0 <_Bfree>
 800a608:	2300      	movs	r3, #0
 800a60a:	702b      	strb	r3, [r5, #0]
 800a60c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a60e:	f10a 0001 	add.w	r0, sl, #1
 800a612:	6018      	str	r0, [r3, #0]
 800a614:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a616:	2b00      	cmp	r3, #0
 800a618:	f43f acd8 	beq.w	8009fcc <_dtoa_r+0xa4>
 800a61c:	601d      	str	r5, [r3, #0]
 800a61e:	e4d5      	b.n	8009fcc <_dtoa_r+0xa4>
 800a620:	f8cd a01c 	str.w	sl, [sp, #28]
 800a624:	462b      	mov	r3, r5
 800a626:	461d      	mov	r5, r3
 800a628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a62c:	2a39      	cmp	r2, #57	; 0x39
 800a62e:	d108      	bne.n	800a642 <_dtoa_r+0x71a>
 800a630:	9a00      	ldr	r2, [sp, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d1f7      	bne.n	800a626 <_dtoa_r+0x6fe>
 800a636:	9a07      	ldr	r2, [sp, #28]
 800a638:	9900      	ldr	r1, [sp, #0]
 800a63a:	3201      	adds	r2, #1
 800a63c:	9207      	str	r2, [sp, #28]
 800a63e:	2230      	movs	r2, #48	; 0x30
 800a640:	700a      	strb	r2, [r1, #0]
 800a642:	781a      	ldrb	r2, [r3, #0]
 800a644:	3201      	adds	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
 800a648:	e78c      	b.n	800a564 <_dtoa_r+0x63c>
 800a64a:	4b7f      	ldr	r3, [pc, #508]	; (800a848 <_dtoa_r+0x920>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	2200      	movs	r2, #0
 800a654:	2300      	movs	r3, #0
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	f7f6 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d09b      	beq.n	800a59a <_dtoa_r+0x672>
 800a662:	e7cd      	b.n	800a600 <_dtoa_r+0x6d8>
 800a664:	9a08      	ldr	r2, [sp, #32]
 800a666:	2a00      	cmp	r2, #0
 800a668:	f000 80c4 	beq.w	800a7f4 <_dtoa_r+0x8cc>
 800a66c:	9a05      	ldr	r2, [sp, #20]
 800a66e:	2a01      	cmp	r2, #1
 800a670:	f300 80a8 	bgt.w	800a7c4 <_dtoa_r+0x89c>
 800a674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a676:	2a00      	cmp	r2, #0
 800a678:	f000 80a0 	beq.w	800a7bc <_dtoa_r+0x894>
 800a67c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a680:	9e06      	ldr	r6, [sp, #24]
 800a682:	4645      	mov	r5, r8
 800a684:	9a04      	ldr	r2, [sp, #16]
 800a686:	2101      	movs	r1, #1
 800a688:	441a      	add	r2, r3
 800a68a:	4620      	mov	r0, r4
 800a68c:	4498      	add	r8, r3
 800a68e:	9204      	str	r2, [sp, #16]
 800a690:	f000 fd62 	bl	800b158 <__i2b>
 800a694:	4607      	mov	r7, r0
 800a696:	2d00      	cmp	r5, #0
 800a698:	dd0b      	ble.n	800a6b2 <_dtoa_r+0x78a>
 800a69a:	9b04      	ldr	r3, [sp, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd08      	ble.n	800a6b2 <_dtoa_r+0x78a>
 800a6a0:	42ab      	cmp	r3, r5
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	bfa8      	it	ge
 800a6a6:	462b      	movge	r3, r5
 800a6a8:	eba8 0803 	sub.w	r8, r8, r3
 800a6ac:	1aed      	subs	r5, r5, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	9b06      	ldr	r3, [sp, #24]
 800a6b4:	b1fb      	cbz	r3, 800a6f6 <_dtoa_r+0x7ce>
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 809f 	beq.w	800a7fc <_dtoa_r+0x8d4>
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	dd11      	ble.n	800a6e6 <_dtoa_r+0x7be>
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fe02 	bl	800b2d0 <__pow5mult>
 800a6cc:	465a      	mov	r2, fp
 800a6ce:	4601      	mov	r1, r0
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fd56 	bl	800b184 <__multiply>
 800a6d8:	4659      	mov	r1, fp
 800a6da:	9007      	str	r0, [sp, #28]
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fc7f 	bl	800afe0 <_Bfree>
 800a6e2:	9b07      	ldr	r3, [sp, #28]
 800a6e4:	469b      	mov	fp, r3
 800a6e6:	9b06      	ldr	r3, [sp, #24]
 800a6e8:	1b9a      	subs	r2, r3, r6
 800a6ea:	d004      	beq.n	800a6f6 <_dtoa_r+0x7ce>
 800a6ec:	4659      	mov	r1, fp
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fdee 	bl	800b2d0 <__pow5mult>
 800a6f4:	4683      	mov	fp, r0
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fd2d 	bl	800b158 <__i2b>
 800a6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a700:	2b00      	cmp	r3, #0
 800a702:	4606      	mov	r6, r0
 800a704:	dd7c      	ble.n	800a800 <_dtoa_r+0x8d8>
 800a706:	461a      	mov	r2, r3
 800a708:	4601      	mov	r1, r0
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fde0 	bl	800b2d0 <__pow5mult>
 800a710:	9b05      	ldr	r3, [sp, #20]
 800a712:	2b01      	cmp	r3, #1
 800a714:	4606      	mov	r6, r0
 800a716:	dd76      	ble.n	800a806 <_dtoa_r+0x8de>
 800a718:	2300      	movs	r3, #0
 800a71a:	9306      	str	r3, [sp, #24]
 800a71c:	6933      	ldr	r3, [r6, #16]
 800a71e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a722:	6918      	ldr	r0, [r3, #16]
 800a724:	f000 fcc8 	bl	800b0b8 <__hi0bits>
 800a728:	f1c0 0020 	rsb	r0, r0, #32
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	4418      	add	r0, r3
 800a730:	f010 001f 	ands.w	r0, r0, #31
 800a734:	f000 8086 	beq.w	800a844 <_dtoa_r+0x91c>
 800a738:	f1c0 0320 	rsb	r3, r0, #32
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	dd7f      	ble.n	800a840 <_dtoa_r+0x918>
 800a740:	f1c0 001c 	rsb	r0, r0, #28
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	4403      	add	r3, r0
 800a748:	4480      	add	r8, r0
 800a74a:	4405      	add	r5, r0
 800a74c:	9304      	str	r3, [sp, #16]
 800a74e:	f1b8 0f00 	cmp.w	r8, #0
 800a752:	dd05      	ble.n	800a760 <_dtoa_r+0x838>
 800a754:	4659      	mov	r1, fp
 800a756:	4642      	mov	r2, r8
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 fe13 	bl	800b384 <__lshift>
 800a75e:	4683      	mov	fp, r0
 800a760:	9b04      	ldr	r3, [sp, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	dd05      	ble.n	800a772 <_dtoa_r+0x84a>
 800a766:	4631      	mov	r1, r6
 800a768:	461a      	mov	r2, r3
 800a76a:	4620      	mov	r0, r4
 800a76c:	f000 fe0a 	bl	800b384 <__lshift>
 800a770:	4606      	mov	r6, r0
 800a772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a774:	2b00      	cmp	r3, #0
 800a776:	d069      	beq.n	800a84c <_dtoa_r+0x924>
 800a778:	4631      	mov	r1, r6
 800a77a:	4658      	mov	r0, fp
 800a77c:	f000 fe6e 	bl	800b45c <__mcmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	da63      	bge.n	800a84c <_dtoa_r+0x924>
 800a784:	2300      	movs	r3, #0
 800a786:	4659      	mov	r1, fp
 800a788:	220a      	movs	r2, #10
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 fc4a 	bl	800b024 <__multadd>
 800a790:	9b08      	ldr	r3, [sp, #32]
 800a792:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a796:	4683      	mov	fp, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 818f 	beq.w	800aabc <_dtoa_r+0xb94>
 800a79e:	4639      	mov	r1, r7
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	220a      	movs	r2, #10
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 fc3d 	bl	800b024 <__multadd>
 800a7aa:	f1b9 0f00 	cmp.w	r9, #0
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	f300 808e 	bgt.w	800a8d0 <_dtoa_r+0x9a8>
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	dc50      	bgt.n	800a85c <_dtoa_r+0x934>
 800a7ba:	e089      	b.n	800a8d0 <_dtoa_r+0x9a8>
 800a7bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7c2:	e75d      	b.n	800a680 <_dtoa_r+0x758>
 800a7c4:	9b01      	ldr	r3, [sp, #4]
 800a7c6:	1e5e      	subs	r6, r3, #1
 800a7c8:	9b06      	ldr	r3, [sp, #24]
 800a7ca:	42b3      	cmp	r3, r6
 800a7cc:	bfbf      	itttt	lt
 800a7ce:	9b06      	ldrlt	r3, [sp, #24]
 800a7d0:	9606      	strlt	r6, [sp, #24]
 800a7d2:	1af2      	sublt	r2, r6, r3
 800a7d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a7d6:	bfb6      	itet	lt
 800a7d8:	189b      	addlt	r3, r3, r2
 800a7da:	1b9e      	subge	r6, r3, r6
 800a7dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	bfb8      	it	lt
 800a7e2:	2600      	movlt	r6, #0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	bfb5      	itete	lt
 800a7e8:	eba8 0503 	sublt.w	r5, r8, r3
 800a7ec:	9b01      	ldrge	r3, [sp, #4]
 800a7ee:	2300      	movlt	r3, #0
 800a7f0:	4645      	movge	r5, r8
 800a7f2:	e747      	b.n	800a684 <_dtoa_r+0x75c>
 800a7f4:	9e06      	ldr	r6, [sp, #24]
 800a7f6:	9f08      	ldr	r7, [sp, #32]
 800a7f8:	4645      	mov	r5, r8
 800a7fa:	e74c      	b.n	800a696 <_dtoa_r+0x76e>
 800a7fc:	9a06      	ldr	r2, [sp, #24]
 800a7fe:	e775      	b.n	800a6ec <_dtoa_r+0x7c4>
 800a800:	9b05      	ldr	r3, [sp, #20]
 800a802:	2b01      	cmp	r3, #1
 800a804:	dc18      	bgt.n	800a838 <_dtoa_r+0x910>
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	b9b3      	cbnz	r3, 800a838 <_dtoa_r+0x910>
 800a80a:	9b03      	ldr	r3, [sp, #12]
 800a80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a810:	b9a3      	cbnz	r3, 800a83c <_dtoa_r+0x914>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a818:	0d1b      	lsrs	r3, r3, #20
 800a81a:	051b      	lsls	r3, r3, #20
 800a81c:	b12b      	cbz	r3, 800a82a <_dtoa_r+0x902>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	3301      	adds	r3, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	f108 0801 	add.w	r8, r8, #1
 800a828:	2301      	movs	r3, #1
 800a82a:	9306      	str	r3, [sp, #24]
 800a82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f47f af74 	bne.w	800a71c <_dtoa_r+0x7f4>
 800a834:	2001      	movs	r0, #1
 800a836:	e779      	b.n	800a72c <_dtoa_r+0x804>
 800a838:	2300      	movs	r3, #0
 800a83a:	e7f6      	b.n	800a82a <_dtoa_r+0x902>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	e7f4      	b.n	800a82a <_dtoa_r+0x902>
 800a840:	d085      	beq.n	800a74e <_dtoa_r+0x826>
 800a842:	4618      	mov	r0, r3
 800a844:	301c      	adds	r0, #28
 800a846:	e77d      	b.n	800a744 <_dtoa_r+0x81c>
 800a848:	40240000 	.word	0x40240000
 800a84c:	9b01      	ldr	r3, [sp, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dc38      	bgt.n	800a8c4 <_dtoa_r+0x99c>
 800a852:	9b05      	ldr	r3, [sp, #20]
 800a854:	2b02      	cmp	r3, #2
 800a856:	dd35      	ble.n	800a8c4 <_dtoa_r+0x99c>
 800a858:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a85c:	f1b9 0f00 	cmp.w	r9, #0
 800a860:	d10d      	bne.n	800a87e <_dtoa_r+0x956>
 800a862:	4631      	mov	r1, r6
 800a864:	464b      	mov	r3, r9
 800a866:	2205      	movs	r2, #5
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fbdb 	bl	800b024 <__multadd>
 800a86e:	4601      	mov	r1, r0
 800a870:	4606      	mov	r6, r0
 800a872:	4658      	mov	r0, fp
 800a874:	f000 fdf2 	bl	800b45c <__mcmp>
 800a878:	2800      	cmp	r0, #0
 800a87a:	f73f adbd 	bgt.w	800a3f8 <_dtoa_r+0x4d0>
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	9d00      	ldr	r5, [sp, #0]
 800a882:	ea6f 0a03 	mvn.w	sl, r3
 800a886:	f04f 0800 	mov.w	r8, #0
 800a88a:	4631      	mov	r1, r6
 800a88c:	4620      	mov	r0, r4
 800a88e:	f000 fba7 	bl	800afe0 <_Bfree>
 800a892:	2f00      	cmp	r7, #0
 800a894:	f43f aeb4 	beq.w	800a600 <_dtoa_r+0x6d8>
 800a898:	f1b8 0f00 	cmp.w	r8, #0
 800a89c:	d005      	beq.n	800a8aa <_dtoa_r+0x982>
 800a89e:	45b8      	cmp	r8, r7
 800a8a0:	d003      	beq.n	800a8aa <_dtoa_r+0x982>
 800a8a2:	4641      	mov	r1, r8
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fb9b 	bl	800afe0 <_Bfree>
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fb97 	bl	800afe0 <_Bfree>
 800a8b2:	e6a5      	b.n	800a600 <_dtoa_r+0x6d8>
 800a8b4:	2600      	movs	r6, #0
 800a8b6:	4637      	mov	r7, r6
 800a8b8:	e7e1      	b.n	800a87e <_dtoa_r+0x956>
 800a8ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a8bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8c0:	4637      	mov	r7, r6
 800a8c2:	e599      	b.n	800a3f8 <_dtoa_r+0x4d0>
 800a8c4:	9b08      	ldr	r3, [sp, #32]
 800a8c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 80fd 	beq.w	800aaca <_dtoa_r+0xba2>
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	dd05      	ble.n	800a8e0 <_dtoa_r+0x9b8>
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 fd53 	bl	800b384 <__lshift>
 800a8de:	4607      	mov	r7, r0
 800a8e0:	9b06      	ldr	r3, [sp, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d05c      	beq.n	800a9a0 <_dtoa_r+0xa78>
 800a8e6:	6879      	ldr	r1, [r7, #4]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fb39 	bl	800af60 <_Balloc>
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	b928      	cbnz	r0, 800a8fe <_dtoa_r+0x9d6>
 800a8f2:	4b80      	ldr	r3, [pc, #512]	; (800aaf4 <_dtoa_r+0xbcc>)
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8fa:	f7ff bb2e 	b.w	8009f5a <_dtoa_r+0x32>
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	3202      	adds	r2, #2
 800a902:	0092      	lsls	r2, r2, #2
 800a904:	f107 010c 	add.w	r1, r7, #12
 800a908:	300c      	adds	r0, #12
 800a90a:	f7fe fbf9 	bl	8009100 <memcpy>
 800a90e:	2201      	movs	r2, #1
 800a910:	4629      	mov	r1, r5
 800a912:	4620      	mov	r0, r4
 800a914:	f000 fd36 	bl	800b384 <__lshift>
 800a918:	9b00      	ldr	r3, [sp, #0]
 800a91a:	3301      	adds	r3, #1
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	9b00      	ldr	r3, [sp, #0]
 800a920:	444b      	add	r3, r9
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	46b8      	mov	r8, r7
 800a92c:	9306      	str	r3, [sp, #24]
 800a92e:	4607      	mov	r7, r0
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	4631      	mov	r1, r6
 800a934:	3b01      	subs	r3, #1
 800a936:	4658      	mov	r0, fp
 800a938:	9302      	str	r3, [sp, #8]
 800a93a:	f7ff fa69 	bl	8009e10 <quorem>
 800a93e:	4603      	mov	r3, r0
 800a940:	3330      	adds	r3, #48	; 0x30
 800a942:	9004      	str	r0, [sp, #16]
 800a944:	4641      	mov	r1, r8
 800a946:	4658      	mov	r0, fp
 800a948:	9308      	str	r3, [sp, #32]
 800a94a:	f000 fd87 	bl	800b45c <__mcmp>
 800a94e:	463a      	mov	r2, r7
 800a950:	4681      	mov	r9, r0
 800a952:	4631      	mov	r1, r6
 800a954:	4620      	mov	r0, r4
 800a956:	f000 fd9d 	bl	800b494 <__mdiff>
 800a95a:	68c2      	ldr	r2, [r0, #12]
 800a95c:	9b08      	ldr	r3, [sp, #32]
 800a95e:	4605      	mov	r5, r0
 800a960:	bb02      	cbnz	r2, 800a9a4 <_dtoa_r+0xa7c>
 800a962:	4601      	mov	r1, r0
 800a964:	4658      	mov	r0, fp
 800a966:	f000 fd79 	bl	800b45c <__mcmp>
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	4602      	mov	r2, r0
 800a96e:	4629      	mov	r1, r5
 800a970:	4620      	mov	r0, r4
 800a972:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a976:	f000 fb33 	bl	800afe0 <_Bfree>
 800a97a:	9b05      	ldr	r3, [sp, #20]
 800a97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97e:	9d01      	ldr	r5, [sp, #4]
 800a980:	ea43 0102 	orr.w	r1, r3, r2
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	430b      	orrs	r3, r1
 800a988:	9b08      	ldr	r3, [sp, #32]
 800a98a:	d10d      	bne.n	800a9a8 <_dtoa_r+0xa80>
 800a98c:	2b39      	cmp	r3, #57	; 0x39
 800a98e:	d029      	beq.n	800a9e4 <_dtoa_r+0xabc>
 800a990:	f1b9 0f00 	cmp.w	r9, #0
 800a994:	dd01      	ble.n	800a99a <_dtoa_r+0xa72>
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	3331      	adds	r3, #49	; 0x31
 800a99a:	9a02      	ldr	r2, [sp, #8]
 800a99c:	7013      	strb	r3, [r2, #0]
 800a99e:	e774      	b.n	800a88a <_dtoa_r+0x962>
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	e7b9      	b.n	800a918 <_dtoa_r+0x9f0>
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	e7e2      	b.n	800a96e <_dtoa_r+0xa46>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	db06      	blt.n	800a9bc <_dtoa_r+0xa94>
 800a9ae:	9905      	ldr	r1, [sp, #20]
 800a9b0:	ea41 0909 	orr.w	r9, r1, r9
 800a9b4:	9906      	ldr	r1, [sp, #24]
 800a9b6:	ea59 0101 	orrs.w	r1, r9, r1
 800a9ba:	d120      	bne.n	800a9fe <_dtoa_r+0xad6>
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	ddec      	ble.n	800a99a <_dtoa_r+0xa72>
 800a9c0:	4659      	mov	r1, fp
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	f000 fcdc 	bl	800b384 <__lshift>
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4683      	mov	fp, r0
 800a9d0:	f000 fd44 	bl	800b45c <__mcmp>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	dc02      	bgt.n	800a9e0 <_dtoa_r+0xab8>
 800a9da:	d1de      	bne.n	800a99a <_dtoa_r+0xa72>
 800a9dc:	07da      	lsls	r2, r3, #31
 800a9de:	d5dc      	bpl.n	800a99a <_dtoa_r+0xa72>
 800a9e0:	2b39      	cmp	r3, #57	; 0x39
 800a9e2:	d1d8      	bne.n	800a996 <_dtoa_r+0xa6e>
 800a9e4:	9a02      	ldr	r2, [sp, #8]
 800a9e6:	2339      	movs	r3, #57	; 0x39
 800a9e8:	7013      	strb	r3, [r2, #0]
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	461d      	mov	r5, r3
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9f4:	2a39      	cmp	r2, #57	; 0x39
 800a9f6:	d050      	beq.n	800aa9a <_dtoa_r+0xb72>
 800a9f8:	3201      	adds	r2, #1
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e745      	b.n	800a88a <_dtoa_r+0x962>
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	dd03      	ble.n	800aa0a <_dtoa_r+0xae2>
 800aa02:	2b39      	cmp	r3, #57	; 0x39
 800aa04:	d0ee      	beq.n	800a9e4 <_dtoa_r+0xabc>
 800aa06:	3301      	adds	r3, #1
 800aa08:	e7c7      	b.n	800a99a <_dtoa_r+0xa72>
 800aa0a:	9a01      	ldr	r2, [sp, #4]
 800aa0c:	9907      	ldr	r1, [sp, #28]
 800aa0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa12:	428a      	cmp	r2, r1
 800aa14:	d02a      	beq.n	800aa6c <_dtoa_r+0xb44>
 800aa16:	4659      	mov	r1, fp
 800aa18:	2300      	movs	r3, #0
 800aa1a:	220a      	movs	r2, #10
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fb01 	bl	800b024 <__multadd>
 800aa22:	45b8      	cmp	r8, r7
 800aa24:	4683      	mov	fp, r0
 800aa26:	f04f 0300 	mov.w	r3, #0
 800aa2a:	f04f 020a 	mov.w	r2, #10
 800aa2e:	4641      	mov	r1, r8
 800aa30:	4620      	mov	r0, r4
 800aa32:	d107      	bne.n	800aa44 <_dtoa_r+0xb1c>
 800aa34:	f000 faf6 	bl	800b024 <__multadd>
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	9b01      	ldr	r3, [sp, #4]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	e775      	b.n	800a930 <_dtoa_r+0xa08>
 800aa44:	f000 faee 	bl	800b024 <__multadd>
 800aa48:	4639      	mov	r1, r7
 800aa4a:	4680      	mov	r8, r0
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	220a      	movs	r2, #10
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 fae7 	bl	800b024 <__multadd>
 800aa56:	4607      	mov	r7, r0
 800aa58:	e7f0      	b.n	800aa3c <_dtoa_r+0xb14>
 800aa5a:	f1b9 0f00 	cmp.w	r9, #0
 800aa5e:	9a00      	ldr	r2, [sp, #0]
 800aa60:	bfcc      	ite	gt
 800aa62:	464d      	movgt	r5, r9
 800aa64:	2501      	movle	r5, #1
 800aa66:	4415      	add	r5, r2
 800aa68:	f04f 0800 	mov.w	r8, #0
 800aa6c:	4659      	mov	r1, fp
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4620      	mov	r0, r4
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	f000 fc86 	bl	800b384 <__lshift>
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4683      	mov	fp, r0
 800aa7c:	f000 fcee 	bl	800b45c <__mcmp>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	dcb2      	bgt.n	800a9ea <_dtoa_r+0xac2>
 800aa84:	d102      	bne.n	800aa8c <_dtoa_r+0xb64>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	07db      	lsls	r3, r3, #31
 800aa8a:	d4ae      	bmi.n	800a9ea <_dtoa_r+0xac2>
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	461d      	mov	r5, r3
 800aa90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa94:	2a30      	cmp	r2, #48	; 0x30
 800aa96:	d0fa      	beq.n	800aa8e <_dtoa_r+0xb66>
 800aa98:	e6f7      	b.n	800a88a <_dtoa_r+0x962>
 800aa9a:	9a00      	ldr	r2, [sp, #0]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d1a5      	bne.n	800a9ec <_dtoa_r+0xac4>
 800aaa0:	f10a 0a01 	add.w	sl, sl, #1
 800aaa4:	2331      	movs	r3, #49	; 0x31
 800aaa6:	e779      	b.n	800a99c <_dtoa_r+0xa74>
 800aaa8:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <_dtoa_r+0xbd0>)
 800aaaa:	f7ff baaf 	b.w	800a00c <_dtoa_r+0xe4>
 800aaae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f47f aa86 	bne.w	8009fc2 <_dtoa_r+0x9a>
 800aab6:	4b11      	ldr	r3, [pc, #68]	; (800aafc <_dtoa_r+0xbd4>)
 800aab8:	f7ff baa8 	b.w	800a00c <_dtoa_r+0xe4>
 800aabc:	f1b9 0f00 	cmp.w	r9, #0
 800aac0:	dc03      	bgt.n	800aaca <_dtoa_r+0xba2>
 800aac2:	9b05      	ldr	r3, [sp, #20]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	f73f aec9 	bgt.w	800a85c <_dtoa_r+0x934>
 800aaca:	9d00      	ldr	r5, [sp, #0]
 800aacc:	4631      	mov	r1, r6
 800aace:	4658      	mov	r0, fp
 800aad0:	f7ff f99e 	bl	8009e10 <quorem>
 800aad4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aad8:	f805 3b01 	strb.w	r3, [r5], #1
 800aadc:	9a00      	ldr	r2, [sp, #0]
 800aade:	1aaa      	subs	r2, r5, r2
 800aae0:	4591      	cmp	r9, r2
 800aae2:	ddba      	ble.n	800aa5a <_dtoa_r+0xb32>
 800aae4:	4659      	mov	r1, fp
 800aae6:	2300      	movs	r3, #0
 800aae8:	220a      	movs	r2, #10
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 fa9a 	bl	800b024 <__multadd>
 800aaf0:	4683      	mov	fp, r0
 800aaf2:	e7eb      	b.n	800aacc <_dtoa_r+0xba4>
 800aaf4:	08017d97 	.word	0x08017d97
 800aaf8:	08017cf0 	.word	0x08017cf0
 800aafc:	08017d14 	.word	0x08017d14

0800ab00 <__sflush_r>:
 800ab00:	898a      	ldrh	r2, [r1, #12]
 800ab02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab06:	4605      	mov	r5, r0
 800ab08:	0710      	lsls	r0, r2, #28
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	d458      	bmi.n	800abc0 <__sflush_r+0xc0>
 800ab0e:	684b      	ldr	r3, [r1, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dc05      	bgt.n	800ab20 <__sflush_r+0x20>
 800ab14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dc02      	bgt.n	800ab20 <__sflush_r+0x20>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab22:	2e00      	cmp	r6, #0
 800ab24:	d0f9      	beq.n	800ab1a <__sflush_r+0x1a>
 800ab26:	2300      	movs	r3, #0
 800ab28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab2c:	682f      	ldr	r7, [r5, #0]
 800ab2e:	602b      	str	r3, [r5, #0]
 800ab30:	d032      	beq.n	800ab98 <__sflush_r+0x98>
 800ab32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	075a      	lsls	r2, r3, #29
 800ab38:	d505      	bpl.n	800ab46 <__sflush_r+0x46>
 800ab3a:	6863      	ldr	r3, [r4, #4]
 800ab3c:	1ac0      	subs	r0, r0, r3
 800ab3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab40:	b10b      	cbz	r3, 800ab46 <__sflush_r+0x46>
 800ab42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab44:	1ac0      	subs	r0, r0, r3
 800ab46:	2300      	movs	r3, #0
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab4c:	6a21      	ldr	r1, [r4, #32]
 800ab4e:	4628      	mov	r0, r5
 800ab50:	47b0      	blx	r6
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	d106      	bne.n	800ab66 <__sflush_r+0x66>
 800ab58:	6829      	ldr	r1, [r5, #0]
 800ab5a:	291d      	cmp	r1, #29
 800ab5c:	d82c      	bhi.n	800abb8 <__sflush_r+0xb8>
 800ab5e:	4a2a      	ldr	r2, [pc, #168]	; (800ac08 <__sflush_r+0x108>)
 800ab60:	40ca      	lsrs	r2, r1
 800ab62:	07d6      	lsls	r6, r2, #31
 800ab64:	d528      	bpl.n	800abb8 <__sflush_r+0xb8>
 800ab66:	2200      	movs	r2, #0
 800ab68:	6062      	str	r2, [r4, #4]
 800ab6a:	04d9      	lsls	r1, r3, #19
 800ab6c:	6922      	ldr	r2, [r4, #16]
 800ab6e:	6022      	str	r2, [r4, #0]
 800ab70:	d504      	bpl.n	800ab7c <__sflush_r+0x7c>
 800ab72:	1c42      	adds	r2, r0, #1
 800ab74:	d101      	bne.n	800ab7a <__sflush_r+0x7a>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	b903      	cbnz	r3, 800ab7c <__sflush_r+0x7c>
 800ab7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab7e:	602f      	str	r7, [r5, #0]
 800ab80:	2900      	cmp	r1, #0
 800ab82:	d0ca      	beq.n	800ab1a <__sflush_r+0x1a>
 800ab84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab88:	4299      	cmp	r1, r3
 800ab8a:	d002      	beq.n	800ab92 <__sflush_r+0x92>
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7fe facd 	bl	800912c <_free_r>
 800ab92:	2000      	movs	r0, #0
 800ab94:	6360      	str	r0, [r4, #52]	; 0x34
 800ab96:	e7c1      	b.n	800ab1c <__sflush_r+0x1c>
 800ab98:	6a21      	ldr	r1, [r4, #32]
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b0      	blx	r6
 800aba0:	1c41      	adds	r1, r0, #1
 800aba2:	d1c7      	bne.n	800ab34 <__sflush_r+0x34>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0c4      	beq.n	800ab34 <__sflush_r+0x34>
 800abaa:	2b1d      	cmp	r3, #29
 800abac:	d001      	beq.n	800abb2 <__sflush_r+0xb2>
 800abae:	2b16      	cmp	r3, #22
 800abb0:	d101      	bne.n	800abb6 <__sflush_r+0xb6>
 800abb2:	602f      	str	r7, [r5, #0]
 800abb4:	e7b1      	b.n	800ab1a <__sflush_r+0x1a>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	e7ad      	b.n	800ab1c <__sflush_r+0x1c>
 800abc0:	690f      	ldr	r7, [r1, #16]
 800abc2:	2f00      	cmp	r7, #0
 800abc4:	d0a9      	beq.n	800ab1a <__sflush_r+0x1a>
 800abc6:	0793      	lsls	r3, r2, #30
 800abc8:	680e      	ldr	r6, [r1, #0]
 800abca:	bf08      	it	eq
 800abcc:	694b      	ldreq	r3, [r1, #20]
 800abce:	600f      	str	r7, [r1, #0]
 800abd0:	bf18      	it	ne
 800abd2:	2300      	movne	r3, #0
 800abd4:	eba6 0807 	sub.w	r8, r6, r7
 800abd8:	608b      	str	r3, [r1, #8]
 800abda:	f1b8 0f00 	cmp.w	r8, #0
 800abde:	dd9c      	ble.n	800ab1a <__sflush_r+0x1a>
 800abe0:	6a21      	ldr	r1, [r4, #32]
 800abe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abe4:	4643      	mov	r3, r8
 800abe6:	463a      	mov	r2, r7
 800abe8:	4628      	mov	r0, r5
 800abea:	47b0      	blx	r6
 800abec:	2800      	cmp	r0, #0
 800abee:	dc06      	bgt.n	800abfe <__sflush_r+0xfe>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	e78e      	b.n	800ab1c <__sflush_r+0x1c>
 800abfe:	4407      	add	r7, r0
 800ac00:	eba8 0800 	sub.w	r8, r8, r0
 800ac04:	e7e9      	b.n	800abda <__sflush_r+0xda>
 800ac06:	bf00      	nop
 800ac08:	20400001 	.word	0x20400001

0800ac0c <_fflush_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	690b      	ldr	r3, [r1, #16]
 800ac10:	4605      	mov	r5, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	b913      	cbnz	r3, 800ac1c <_fflush_r+0x10>
 800ac16:	2500      	movs	r5, #0
 800ac18:	4628      	mov	r0, r5
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	b118      	cbz	r0, 800ac26 <_fflush_r+0x1a>
 800ac1e:	6983      	ldr	r3, [r0, #24]
 800ac20:	b90b      	cbnz	r3, 800ac26 <_fflush_r+0x1a>
 800ac22:	f000 f887 	bl	800ad34 <__sinit>
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <_fflush_r+0x6c>)
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	d11b      	bne.n	800ac64 <_fflush_r+0x58>
 800ac2c:	686c      	ldr	r4, [r5, #4]
 800ac2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0ef      	beq.n	800ac16 <_fflush_r+0xa>
 800ac36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac38:	07d0      	lsls	r0, r2, #31
 800ac3a:	d404      	bmi.n	800ac46 <_fflush_r+0x3a>
 800ac3c:	0599      	lsls	r1, r3, #22
 800ac3e:	d402      	bmi.n	800ac46 <_fflush_r+0x3a>
 800ac40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac42:	f000 f91a 	bl	800ae7a <__retarget_lock_acquire_recursive>
 800ac46:	4628      	mov	r0, r5
 800ac48:	4621      	mov	r1, r4
 800ac4a:	f7ff ff59 	bl	800ab00 <__sflush_r>
 800ac4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac50:	07da      	lsls	r2, r3, #31
 800ac52:	4605      	mov	r5, r0
 800ac54:	d4e0      	bmi.n	800ac18 <_fflush_r+0xc>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	059b      	lsls	r3, r3, #22
 800ac5a:	d4dd      	bmi.n	800ac18 <_fflush_r+0xc>
 800ac5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac5e:	f000 f90d 	bl	800ae7c <__retarget_lock_release_recursive>
 800ac62:	e7d9      	b.n	800ac18 <_fflush_r+0xc>
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <_fflush_r+0x70>)
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d101      	bne.n	800ac6e <_fflush_r+0x62>
 800ac6a:	68ac      	ldr	r4, [r5, #8]
 800ac6c:	e7df      	b.n	800ac2e <_fflush_r+0x22>
 800ac6e:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <_fflush_r+0x74>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	bf08      	it	eq
 800ac74:	68ec      	ldreq	r4, [r5, #12]
 800ac76:	e7da      	b.n	800ac2e <_fflush_r+0x22>
 800ac78:	08017dc8 	.word	0x08017dc8
 800ac7c:	08017de8 	.word	0x08017de8
 800ac80:	08017da8 	.word	0x08017da8

0800ac84 <std>:
 800ac84:	2300      	movs	r3, #0
 800ac86:	b510      	push	{r4, lr}
 800ac88:	4604      	mov	r4, r0
 800ac8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac92:	6083      	str	r3, [r0, #8]
 800ac94:	8181      	strh	r1, [r0, #12]
 800ac96:	6643      	str	r3, [r0, #100]	; 0x64
 800ac98:	81c2      	strh	r2, [r0, #14]
 800ac9a:	6183      	str	r3, [r0, #24]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	2208      	movs	r2, #8
 800aca0:	305c      	adds	r0, #92	; 0x5c
 800aca2:	f7fe fa3b 	bl	800911c <memset>
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <std+0x38>)
 800aca8:	6263      	str	r3, [r4, #36]	; 0x24
 800acaa:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <std+0x3c>)
 800acac:	62a3      	str	r3, [r4, #40]	; 0x28
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <std+0x40>)
 800acb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <std+0x44>)
 800acb4:	6224      	str	r4, [r4, #32]
 800acb6:	6323      	str	r3, [r4, #48]	; 0x30
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	bf00      	nop
 800acbc:	0800b92d 	.word	0x0800b92d
 800acc0:	0800b94f 	.word	0x0800b94f
 800acc4:	0800b987 	.word	0x0800b987
 800acc8:	0800b9ab 	.word	0x0800b9ab

0800accc <_cleanup_r>:
 800accc:	4901      	ldr	r1, [pc, #4]	; (800acd4 <_cleanup_r+0x8>)
 800acce:	f000 b8af 	b.w	800ae30 <_fwalk_reent>
 800acd2:	bf00      	nop
 800acd4:	0800ac0d 	.word	0x0800ac0d

0800acd8 <__sfmoreglue>:
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	1e4a      	subs	r2, r1, #1
 800acdc:	2568      	movs	r5, #104	; 0x68
 800acde:	4355      	muls	r5, r2
 800ace0:	460e      	mov	r6, r1
 800ace2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ace6:	f7fe fa71 	bl	80091cc <_malloc_r>
 800acea:	4604      	mov	r4, r0
 800acec:	b140      	cbz	r0, 800ad00 <__sfmoreglue+0x28>
 800acee:	2100      	movs	r1, #0
 800acf0:	e9c0 1600 	strd	r1, r6, [r0]
 800acf4:	300c      	adds	r0, #12
 800acf6:	60a0      	str	r0, [r4, #8]
 800acf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acfc:	f7fe fa0e 	bl	800911c <memset>
 800ad00:	4620      	mov	r0, r4
 800ad02:	bd70      	pop	{r4, r5, r6, pc}

0800ad04 <__sfp_lock_acquire>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__sfp_lock_acquire+0x8>)
 800ad06:	f000 b8b8 	b.w	800ae7a <__retarget_lock_acquire_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20001344 	.word	0x20001344

0800ad10 <__sfp_lock_release>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__sfp_lock_release+0x8>)
 800ad12:	f000 b8b3 	b.w	800ae7c <__retarget_lock_release_recursive>
 800ad16:	bf00      	nop
 800ad18:	20001344 	.word	0x20001344

0800ad1c <__sinit_lock_acquire>:
 800ad1c:	4801      	ldr	r0, [pc, #4]	; (800ad24 <__sinit_lock_acquire+0x8>)
 800ad1e:	f000 b8ac 	b.w	800ae7a <__retarget_lock_acquire_recursive>
 800ad22:	bf00      	nop
 800ad24:	2000133f 	.word	0x2000133f

0800ad28 <__sinit_lock_release>:
 800ad28:	4801      	ldr	r0, [pc, #4]	; (800ad30 <__sinit_lock_release+0x8>)
 800ad2a:	f000 b8a7 	b.w	800ae7c <__retarget_lock_release_recursive>
 800ad2e:	bf00      	nop
 800ad30:	2000133f 	.word	0x2000133f

0800ad34 <__sinit>:
 800ad34:	b510      	push	{r4, lr}
 800ad36:	4604      	mov	r4, r0
 800ad38:	f7ff fff0 	bl	800ad1c <__sinit_lock_acquire>
 800ad3c:	69a3      	ldr	r3, [r4, #24]
 800ad3e:	b11b      	cbz	r3, 800ad48 <__sinit+0x14>
 800ad40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad44:	f7ff bff0 	b.w	800ad28 <__sinit_lock_release>
 800ad48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad4c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad4e:	4b13      	ldr	r3, [pc, #76]	; (800ad9c <__sinit+0x68>)
 800ad50:	4a13      	ldr	r2, [pc, #76]	; (800ada0 <__sinit+0x6c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad56:	42a3      	cmp	r3, r4
 800ad58:	bf04      	itt	eq
 800ad5a:	2301      	moveq	r3, #1
 800ad5c:	61a3      	streq	r3, [r4, #24]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 f820 	bl	800ada4 <__sfp>
 800ad64:	6060      	str	r0, [r4, #4]
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 f81c 	bl	800ada4 <__sfp>
 800ad6c:	60a0      	str	r0, [r4, #8]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 f818 	bl	800ada4 <__sfp>
 800ad74:	2200      	movs	r2, #0
 800ad76:	60e0      	str	r0, [r4, #12]
 800ad78:	2104      	movs	r1, #4
 800ad7a:	6860      	ldr	r0, [r4, #4]
 800ad7c:	f7ff ff82 	bl	800ac84 <std>
 800ad80:	68a0      	ldr	r0, [r4, #8]
 800ad82:	2201      	movs	r2, #1
 800ad84:	2109      	movs	r1, #9
 800ad86:	f7ff ff7d 	bl	800ac84 <std>
 800ad8a:	68e0      	ldr	r0, [r4, #12]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	2112      	movs	r1, #18
 800ad90:	f7ff ff78 	bl	800ac84 <std>
 800ad94:	2301      	movs	r3, #1
 800ad96:	61a3      	str	r3, [r4, #24]
 800ad98:	e7d2      	b.n	800ad40 <__sinit+0xc>
 800ad9a:	bf00      	nop
 800ad9c:	08017cdc 	.word	0x08017cdc
 800ada0:	0800accd 	.word	0x0800accd

0800ada4 <__sfp>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	4607      	mov	r7, r0
 800ada8:	f7ff ffac 	bl	800ad04 <__sfp_lock_acquire>
 800adac:	4b1e      	ldr	r3, [pc, #120]	; (800ae28 <__sfp+0x84>)
 800adae:	681e      	ldr	r6, [r3, #0]
 800adb0:	69b3      	ldr	r3, [r6, #24]
 800adb2:	b913      	cbnz	r3, 800adba <__sfp+0x16>
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff ffbd 	bl	800ad34 <__sinit>
 800adba:	3648      	adds	r6, #72	; 0x48
 800adbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	d503      	bpl.n	800adcc <__sfp+0x28>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	b30b      	cbz	r3, 800ae0c <__sfp+0x68>
 800adc8:	6836      	ldr	r6, [r6, #0]
 800adca:	e7f7      	b.n	800adbc <__sfp+0x18>
 800adcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800add0:	b9d5      	cbnz	r5, 800ae08 <__sfp+0x64>
 800add2:	4b16      	ldr	r3, [pc, #88]	; (800ae2c <__sfp+0x88>)
 800add4:	60e3      	str	r3, [r4, #12]
 800add6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adda:	6665      	str	r5, [r4, #100]	; 0x64
 800addc:	f000 f84c 	bl	800ae78 <__retarget_lock_init_recursive>
 800ade0:	f7ff ff96 	bl	800ad10 <__sfp_lock_release>
 800ade4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ade8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adec:	6025      	str	r5, [r4, #0]
 800adee:	61a5      	str	r5, [r4, #24]
 800adf0:	2208      	movs	r2, #8
 800adf2:	4629      	mov	r1, r5
 800adf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adf8:	f7fe f990 	bl	800911c <memset>
 800adfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae04:	4620      	mov	r0, r4
 800ae06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae08:	3468      	adds	r4, #104	; 0x68
 800ae0a:	e7d9      	b.n	800adc0 <__sfp+0x1c>
 800ae0c:	2104      	movs	r1, #4
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f7ff ff62 	bl	800acd8 <__sfmoreglue>
 800ae14:	4604      	mov	r4, r0
 800ae16:	6030      	str	r0, [r6, #0]
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d1d5      	bne.n	800adc8 <__sfp+0x24>
 800ae1c:	f7ff ff78 	bl	800ad10 <__sfp_lock_release>
 800ae20:	230c      	movs	r3, #12
 800ae22:	603b      	str	r3, [r7, #0]
 800ae24:	e7ee      	b.n	800ae04 <__sfp+0x60>
 800ae26:	bf00      	nop
 800ae28:	08017cdc 	.word	0x08017cdc
 800ae2c:	ffff0001 	.word	0xffff0001

0800ae30 <_fwalk_reent>:
 800ae30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae34:	4606      	mov	r6, r0
 800ae36:	4688      	mov	r8, r1
 800ae38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae3c:	2700      	movs	r7, #0
 800ae3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae42:	f1b9 0901 	subs.w	r9, r9, #1
 800ae46:	d505      	bpl.n	800ae54 <_fwalk_reent+0x24>
 800ae48:	6824      	ldr	r4, [r4, #0]
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	d1f7      	bne.n	800ae3e <_fwalk_reent+0xe>
 800ae4e:	4638      	mov	r0, r7
 800ae50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae54:	89ab      	ldrh	r3, [r5, #12]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d907      	bls.n	800ae6a <_fwalk_reent+0x3a>
 800ae5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	d003      	beq.n	800ae6a <_fwalk_reent+0x3a>
 800ae62:	4629      	mov	r1, r5
 800ae64:	4630      	mov	r0, r6
 800ae66:	47c0      	blx	r8
 800ae68:	4307      	orrs	r7, r0
 800ae6a:	3568      	adds	r5, #104	; 0x68
 800ae6c:	e7e9      	b.n	800ae42 <_fwalk_reent+0x12>
	...

0800ae70 <_localeconv_r>:
 800ae70:	4800      	ldr	r0, [pc, #0]	; (800ae74 <_localeconv_r+0x4>)
 800ae72:	4770      	bx	lr
 800ae74:	2000093c 	.word	0x2000093c

0800ae78 <__retarget_lock_init_recursive>:
 800ae78:	4770      	bx	lr

0800ae7a <__retarget_lock_acquire_recursive>:
 800ae7a:	4770      	bx	lr

0800ae7c <__retarget_lock_release_recursive>:
 800ae7c:	4770      	bx	lr

0800ae7e <__swhatbuf_r>:
 800ae7e:	b570      	push	{r4, r5, r6, lr}
 800ae80:	460e      	mov	r6, r1
 800ae82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae86:	2900      	cmp	r1, #0
 800ae88:	b096      	sub	sp, #88	; 0x58
 800ae8a:	4614      	mov	r4, r2
 800ae8c:	461d      	mov	r5, r3
 800ae8e:	da07      	bge.n	800aea0 <__swhatbuf_r+0x22>
 800ae90:	2300      	movs	r3, #0
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	89b3      	ldrh	r3, [r6, #12]
 800ae96:	061a      	lsls	r2, r3, #24
 800ae98:	d410      	bmi.n	800aebc <__swhatbuf_r+0x3e>
 800ae9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae9e:	e00e      	b.n	800aebe <__swhatbuf_r+0x40>
 800aea0:	466a      	mov	r2, sp
 800aea2:	f000 fdd9 	bl	800ba58 <_fstat_r>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	dbf2      	blt.n	800ae90 <__swhatbuf_r+0x12>
 800aeaa:	9a01      	ldr	r2, [sp, #4]
 800aeac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aeb4:	425a      	negs	r2, r3
 800aeb6:	415a      	adcs	r2, r3
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	e7ee      	b.n	800ae9a <__swhatbuf_r+0x1c>
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	2000      	movs	r0, #0
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	b016      	add	sp, #88	; 0x58
 800aec4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aec8 <__smakebuf_r>:
 800aec8:	898b      	ldrh	r3, [r1, #12]
 800aeca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aecc:	079d      	lsls	r5, r3, #30
 800aece:	4606      	mov	r6, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	d507      	bpl.n	800aee4 <__smakebuf_r+0x1c>
 800aed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	2301      	movs	r3, #1
 800aede:	6163      	str	r3, [r4, #20]
 800aee0:	b002      	add	sp, #8
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	ab01      	add	r3, sp, #4
 800aee6:	466a      	mov	r2, sp
 800aee8:	f7ff ffc9 	bl	800ae7e <__swhatbuf_r>
 800aeec:	9900      	ldr	r1, [sp, #0]
 800aeee:	4605      	mov	r5, r0
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7fe f96b 	bl	80091cc <_malloc_r>
 800aef6:	b948      	cbnz	r0, 800af0c <__smakebuf_r+0x44>
 800aef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefc:	059a      	lsls	r2, r3, #22
 800aefe:	d4ef      	bmi.n	800aee0 <__smakebuf_r+0x18>
 800af00:	f023 0303 	bic.w	r3, r3, #3
 800af04:	f043 0302 	orr.w	r3, r3, #2
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	e7e3      	b.n	800aed4 <__smakebuf_r+0xc>
 800af0c:	4b0d      	ldr	r3, [pc, #52]	; (800af44 <__smakebuf_r+0x7c>)
 800af0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	6020      	str	r0, [r4, #0]
 800af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af18:	81a3      	strh	r3, [r4, #12]
 800af1a:	9b00      	ldr	r3, [sp, #0]
 800af1c:	6163      	str	r3, [r4, #20]
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	6120      	str	r0, [r4, #16]
 800af22:	b15b      	cbz	r3, 800af3c <__smakebuf_r+0x74>
 800af24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 fda7 	bl	800ba7c <_isatty_r>
 800af2e:	b128      	cbz	r0, 800af3c <__smakebuf_r+0x74>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f023 0303 	bic.w	r3, r3, #3
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	89a0      	ldrh	r0, [r4, #12]
 800af3e:	4305      	orrs	r5, r0
 800af40:	81a5      	strh	r5, [r4, #12]
 800af42:	e7cd      	b.n	800aee0 <__smakebuf_r+0x18>
 800af44:	0800accd 	.word	0x0800accd

0800af48 <__malloc_lock>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__malloc_lock+0x8>)
 800af4a:	f7ff bf96 	b.w	800ae7a <__retarget_lock_acquire_recursive>
 800af4e:	bf00      	nop
 800af50:	20001340 	.word	0x20001340

0800af54 <__malloc_unlock>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__malloc_unlock+0x8>)
 800af56:	f7ff bf91 	b.w	800ae7c <__retarget_lock_release_recursive>
 800af5a:	bf00      	nop
 800af5c:	20001340 	.word	0x20001340

0800af60 <_Balloc>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	b976      	cbnz	r6, 800af88 <_Balloc+0x28>
 800af6a:	2010      	movs	r0, #16
 800af6c:	f7fe f8c0 	bl	80090f0 <malloc>
 800af70:	4602      	mov	r2, r0
 800af72:	6260      	str	r0, [r4, #36]	; 0x24
 800af74:	b920      	cbnz	r0, 800af80 <_Balloc+0x20>
 800af76:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <_Balloc+0x78>)
 800af78:	4818      	ldr	r0, [pc, #96]	; (800afdc <_Balloc+0x7c>)
 800af7a:	2166      	movs	r1, #102	; 0x66
 800af7c:	f000 fd2c 	bl	800b9d8 <__assert_func>
 800af80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af84:	6006      	str	r6, [r0, #0]
 800af86:	60c6      	str	r6, [r0, #12]
 800af88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af8a:	68f3      	ldr	r3, [r6, #12]
 800af8c:	b183      	cbz	r3, 800afb0 <_Balloc+0x50>
 800af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af96:	b9b8      	cbnz	r0, 800afc8 <_Balloc+0x68>
 800af98:	2101      	movs	r1, #1
 800af9a:	fa01 f605 	lsl.w	r6, r1, r5
 800af9e:	1d72      	adds	r2, r6, #5
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fb5a 	bl	800b65c <_calloc_r>
 800afa8:	b160      	cbz	r0, 800afc4 <_Balloc+0x64>
 800afaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afae:	e00e      	b.n	800afce <_Balloc+0x6e>
 800afb0:	2221      	movs	r2, #33	; 0x21
 800afb2:	2104      	movs	r1, #4
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fb51 	bl	800b65c <_calloc_r>
 800afba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afbc:	60f0      	str	r0, [r6, #12]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e4      	bne.n	800af8e <_Balloc+0x2e>
 800afc4:	2000      	movs	r0, #0
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	6802      	ldr	r2, [r0, #0]
 800afca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afce:	2300      	movs	r3, #0
 800afd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afd4:	e7f7      	b.n	800afc6 <_Balloc+0x66>
 800afd6:	bf00      	nop
 800afd8:	08017d21 	.word	0x08017d21
 800afdc:	08017e08 	.word	0x08017e08

0800afe0 <_Bfree>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afe4:	4605      	mov	r5, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	b976      	cbnz	r6, 800b008 <_Bfree+0x28>
 800afea:	2010      	movs	r0, #16
 800afec:	f7fe f880 	bl	80090f0 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	6268      	str	r0, [r5, #36]	; 0x24
 800aff4:	b920      	cbnz	r0, 800b000 <_Bfree+0x20>
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <_Bfree+0x3c>)
 800aff8:	4809      	ldr	r0, [pc, #36]	; (800b020 <_Bfree+0x40>)
 800affa:	218a      	movs	r1, #138	; 0x8a
 800affc:	f000 fcec 	bl	800b9d8 <__assert_func>
 800b000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b004:	6006      	str	r6, [r0, #0]
 800b006:	60c6      	str	r6, [r0, #12]
 800b008:	b13c      	cbz	r4, 800b01a <_Bfree+0x3a>
 800b00a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b00c:	6862      	ldr	r2, [r4, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b014:	6021      	str	r1, [r4, #0]
 800b016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
 800b01c:	08017d21 	.word	0x08017d21
 800b020:	08017e08 	.word	0x08017e08

0800b024 <__multadd>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	690e      	ldr	r6, [r1, #16]
 800b02a:	4607      	mov	r7, r0
 800b02c:	4698      	mov	r8, r3
 800b02e:	460c      	mov	r4, r1
 800b030:	f101 0014 	add.w	r0, r1, #20
 800b034:	2300      	movs	r3, #0
 800b036:	6805      	ldr	r5, [r0, #0]
 800b038:	b2a9      	uxth	r1, r5
 800b03a:	fb02 8101 	mla	r1, r2, r1, r8
 800b03e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b042:	0c2d      	lsrs	r5, r5, #16
 800b044:	fb02 c505 	mla	r5, r2, r5, ip
 800b048:	b289      	uxth	r1, r1
 800b04a:	3301      	adds	r3, #1
 800b04c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b050:	429e      	cmp	r6, r3
 800b052:	f840 1b04 	str.w	r1, [r0], #4
 800b056:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b05a:	dcec      	bgt.n	800b036 <__multadd+0x12>
 800b05c:	f1b8 0f00 	cmp.w	r8, #0
 800b060:	d022      	beq.n	800b0a8 <__multadd+0x84>
 800b062:	68a3      	ldr	r3, [r4, #8]
 800b064:	42b3      	cmp	r3, r6
 800b066:	dc19      	bgt.n	800b09c <__multadd+0x78>
 800b068:	6861      	ldr	r1, [r4, #4]
 800b06a:	4638      	mov	r0, r7
 800b06c:	3101      	adds	r1, #1
 800b06e:	f7ff ff77 	bl	800af60 <_Balloc>
 800b072:	4605      	mov	r5, r0
 800b074:	b928      	cbnz	r0, 800b082 <__multadd+0x5e>
 800b076:	4602      	mov	r2, r0
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <__multadd+0x8c>)
 800b07a:	480e      	ldr	r0, [pc, #56]	; (800b0b4 <__multadd+0x90>)
 800b07c:	21b5      	movs	r1, #181	; 0xb5
 800b07e:	f000 fcab 	bl	800b9d8 <__assert_func>
 800b082:	6922      	ldr	r2, [r4, #16]
 800b084:	3202      	adds	r2, #2
 800b086:	f104 010c 	add.w	r1, r4, #12
 800b08a:	0092      	lsls	r2, r2, #2
 800b08c:	300c      	adds	r0, #12
 800b08e:	f7fe f837 	bl	8009100 <memcpy>
 800b092:	4621      	mov	r1, r4
 800b094:	4638      	mov	r0, r7
 800b096:	f7ff ffa3 	bl	800afe0 <_Bfree>
 800b09a:	462c      	mov	r4, r5
 800b09c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0a0:	3601      	adds	r6, #1
 800b0a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0a6:	6126      	str	r6, [r4, #16]
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ae:	bf00      	nop
 800b0b0:	08017d97 	.word	0x08017d97
 800b0b4:	08017e08 	.word	0x08017e08

0800b0b8 <__hi0bits>:
 800b0b8:	0c03      	lsrs	r3, r0, #16
 800b0ba:	041b      	lsls	r3, r3, #16
 800b0bc:	b9d3      	cbnz	r3, 800b0f4 <__hi0bits+0x3c>
 800b0be:	0400      	lsls	r0, r0, #16
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0c6:	bf04      	itt	eq
 800b0c8:	0200      	lsleq	r0, r0, #8
 800b0ca:	3308      	addeq	r3, #8
 800b0cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0d0:	bf04      	itt	eq
 800b0d2:	0100      	lsleq	r0, r0, #4
 800b0d4:	3304      	addeq	r3, #4
 800b0d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0da:	bf04      	itt	eq
 800b0dc:	0080      	lsleq	r0, r0, #2
 800b0de:	3302      	addeq	r3, #2
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	db05      	blt.n	800b0f0 <__hi0bits+0x38>
 800b0e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e8:	f103 0301 	add.w	r3, r3, #1
 800b0ec:	bf08      	it	eq
 800b0ee:	2320      	moveq	r3, #32
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	4770      	bx	lr
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e7e4      	b.n	800b0c2 <__hi0bits+0xa>

0800b0f8 <__lo0bits>:
 800b0f8:	6803      	ldr	r3, [r0, #0]
 800b0fa:	f013 0207 	ands.w	r2, r3, #7
 800b0fe:	4601      	mov	r1, r0
 800b100:	d00b      	beq.n	800b11a <__lo0bits+0x22>
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d424      	bmi.n	800b150 <__lo0bits+0x58>
 800b106:	0798      	lsls	r0, r3, #30
 800b108:	bf49      	itett	mi
 800b10a:	085b      	lsrmi	r3, r3, #1
 800b10c:	089b      	lsrpl	r3, r3, #2
 800b10e:	2001      	movmi	r0, #1
 800b110:	600b      	strmi	r3, [r1, #0]
 800b112:	bf5c      	itt	pl
 800b114:	600b      	strpl	r3, [r1, #0]
 800b116:	2002      	movpl	r0, #2
 800b118:	4770      	bx	lr
 800b11a:	b298      	uxth	r0, r3
 800b11c:	b9b0      	cbnz	r0, 800b14c <__lo0bits+0x54>
 800b11e:	0c1b      	lsrs	r3, r3, #16
 800b120:	2010      	movs	r0, #16
 800b122:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b126:	bf04      	itt	eq
 800b128:	0a1b      	lsreq	r3, r3, #8
 800b12a:	3008      	addeq	r0, #8
 800b12c:	071a      	lsls	r2, r3, #28
 800b12e:	bf04      	itt	eq
 800b130:	091b      	lsreq	r3, r3, #4
 800b132:	3004      	addeq	r0, #4
 800b134:	079a      	lsls	r2, r3, #30
 800b136:	bf04      	itt	eq
 800b138:	089b      	lsreq	r3, r3, #2
 800b13a:	3002      	addeq	r0, #2
 800b13c:	07da      	lsls	r2, r3, #31
 800b13e:	d403      	bmi.n	800b148 <__lo0bits+0x50>
 800b140:	085b      	lsrs	r3, r3, #1
 800b142:	f100 0001 	add.w	r0, r0, #1
 800b146:	d005      	beq.n	800b154 <__lo0bits+0x5c>
 800b148:	600b      	str	r3, [r1, #0]
 800b14a:	4770      	bx	lr
 800b14c:	4610      	mov	r0, r2
 800b14e:	e7e8      	b.n	800b122 <__lo0bits+0x2a>
 800b150:	2000      	movs	r0, #0
 800b152:	4770      	bx	lr
 800b154:	2020      	movs	r0, #32
 800b156:	4770      	bx	lr

0800b158 <__i2b>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	2101      	movs	r1, #1
 800b15e:	f7ff feff 	bl	800af60 <_Balloc>
 800b162:	4602      	mov	r2, r0
 800b164:	b928      	cbnz	r0, 800b172 <__i2b+0x1a>
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <__i2b+0x24>)
 800b168:	4805      	ldr	r0, [pc, #20]	; (800b180 <__i2b+0x28>)
 800b16a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b16e:	f000 fc33 	bl	800b9d8 <__assert_func>
 800b172:	2301      	movs	r3, #1
 800b174:	6144      	str	r4, [r0, #20]
 800b176:	6103      	str	r3, [r0, #16]
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	bf00      	nop
 800b17c:	08017d97 	.word	0x08017d97
 800b180:	08017e08 	.word	0x08017e08

0800b184 <__multiply>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	4614      	mov	r4, r2
 800b18a:	690a      	ldr	r2, [r1, #16]
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	429a      	cmp	r2, r3
 800b190:	bfb8      	it	lt
 800b192:	460b      	movlt	r3, r1
 800b194:	460d      	mov	r5, r1
 800b196:	bfbc      	itt	lt
 800b198:	4625      	movlt	r5, r4
 800b19a:	461c      	movlt	r4, r3
 800b19c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b1a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1a4:	68ab      	ldr	r3, [r5, #8]
 800b1a6:	6869      	ldr	r1, [r5, #4]
 800b1a8:	eb0a 0709 	add.w	r7, sl, r9
 800b1ac:	42bb      	cmp	r3, r7
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	bfb8      	it	lt
 800b1b2:	3101      	addlt	r1, #1
 800b1b4:	f7ff fed4 	bl	800af60 <_Balloc>
 800b1b8:	b930      	cbnz	r0, 800b1c8 <__multiply+0x44>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	4b42      	ldr	r3, [pc, #264]	; (800b2c8 <__multiply+0x144>)
 800b1be:	4843      	ldr	r0, [pc, #268]	; (800b2cc <__multiply+0x148>)
 800b1c0:	f240 115d 	movw	r1, #349	; 0x15d
 800b1c4:	f000 fc08 	bl	800b9d8 <__assert_func>
 800b1c8:	f100 0614 	add.w	r6, r0, #20
 800b1cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b1d0:	4633      	mov	r3, r6
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4543      	cmp	r3, r8
 800b1d6:	d31e      	bcc.n	800b216 <__multiply+0x92>
 800b1d8:	f105 0c14 	add.w	ip, r5, #20
 800b1dc:	f104 0314 	add.w	r3, r4, #20
 800b1e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b1e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b1e8:	9202      	str	r2, [sp, #8]
 800b1ea:	ebac 0205 	sub.w	r2, ip, r5
 800b1ee:	3a15      	subs	r2, #21
 800b1f0:	f022 0203 	bic.w	r2, r2, #3
 800b1f4:	3204      	adds	r2, #4
 800b1f6:	f105 0115 	add.w	r1, r5, #21
 800b1fa:	458c      	cmp	ip, r1
 800b1fc:	bf38      	it	cc
 800b1fe:	2204      	movcc	r2, #4
 800b200:	9201      	str	r2, [sp, #4]
 800b202:	9a02      	ldr	r2, [sp, #8]
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d808      	bhi.n	800b21c <__multiply+0x98>
 800b20a:	2f00      	cmp	r7, #0
 800b20c:	dc55      	bgt.n	800b2ba <__multiply+0x136>
 800b20e:	6107      	str	r7, [r0, #16]
 800b210:	b005      	add	sp, #20
 800b212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b216:	f843 2b04 	str.w	r2, [r3], #4
 800b21a:	e7db      	b.n	800b1d4 <__multiply+0x50>
 800b21c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	d020      	beq.n	800b268 <__multiply+0xe4>
 800b226:	f105 0e14 	add.w	lr, r5, #20
 800b22a:	46b1      	mov	r9, r6
 800b22c:	2200      	movs	r2, #0
 800b22e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b232:	f8d9 b000 	ldr.w	fp, [r9]
 800b236:	b2a1      	uxth	r1, r4
 800b238:	fa1f fb8b 	uxth.w	fp, fp
 800b23c:	fb0a b101 	mla	r1, sl, r1, fp
 800b240:	4411      	add	r1, r2
 800b242:	f8d9 2000 	ldr.w	r2, [r9]
 800b246:	0c24      	lsrs	r4, r4, #16
 800b248:	0c12      	lsrs	r2, r2, #16
 800b24a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b24e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b252:	b289      	uxth	r1, r1
 800b254:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b258:	45f4      	cmp	ip, lr
 800b25a:	f849 1b04 	str.w	r1, [r9], #4
 800b25e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b262:	d8e4      	bhi.n	800b22e <__multiply+0xaa>
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	5072      	str	r2, [r6, r1]
 800b268:	9a03      	ldr	r2, [sp, #12]
 800b26a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b26e:	3304      	adds	r3, #4
 800b270:	f1b9 0f00 	cmp.w	r9, #0
 800b274:	d01f      	beq.n	800b2b6 <__multiply+0x132>
 800b276:	6834      	ldr	r4, [r6, #0]
 800b278:	f105 0114 	add.w	r1, r5, #20
 800b27c:	46b6      	mov	lr, r6
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	880a      	ldrh	r2, [r1, #0]
 800b284:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b288:	fb09 b202 	mla	r2, r9, r2, fp
 800b28c:	4492      	add	sl, r2
 800b28e:	b2a4      	uxth	r4, r4
 800b290:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b294:	f84e 4b04 	str.w	r4, [lr], #4
 800b298:	f851 4b04 	ldr.w	r4, [r1], #4
 800b29c:	f8be 2000 	ldrh.w	r2, [lr]
 800b2a0:	0c24      	lsrs	r4, r4, #16
 800b2a2:	fb09 2404 	mla	r4, r9, r4, r2
 800b2a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b2aa:	458c      	cmp	ip, r1
 800b2ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2b0:	d8e7      	bhi.n	800b282 <__multiply+0xfe>
 800b2b2:	9a01      	ldr	r2, [sp, #4]
 800b2b4:	50b4      	str	r4, [r6, r2]
 800b2b6:	3604      	adds	r6, #4
 800b2b8:	e7a3      	b.n	800b202 <__multiply+0x7e>
 800b2ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1a5      	bne.n	800b20e <__multiply+0x8a>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	e7a1      	b.n	800b20a <__multiply+0x86>
 800b2c6:	bf00      	nop
 800b2c8:	08017d97 	.word	0x08017d97
 800b2cc:	08017e08 	.word	0x08017e08

0800b2d0 <__pow5mult>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4615      	mov	r5, r2
 800b2d6:	f012 0203 	ands.w	r2, r2, #3
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	d007      	beq.n	800b2f0 <__pow5mult+0x20>
 800b2e0:	4c25      	ldr	r4, [pc, #148]	; (800b378 <__pow5mult+0xa8>)
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ea:	f7ff fe9b 	bl	800b024 <__multadd>
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	10ad      	asrs	r5, r5, #2
 800b2f2:	d03d      	beq.n	800b370 <__pow5mult+0xa0>
 800b2f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2f6:	b97c      	cbnz	r4, 800b318 <__pow5mult+0x48>
 800b2f8:	2010      	movs	r0, #16
 800b2fa:	f7fd fef9 	bl	80090f0 <malloc>
 800b2fe:	4602      	mov	r2, r0
 800b300:	6270      	str	r0, [r6, #36]	; 0x24
 800b302:	b928      	cbnz	r0, 800b310 <__pow5mult+0x40>
 800b304:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <__pow5mult+0xac>)
 800b306:	481e      	ldr	r0, [pc, #120]	; (800b380 <__pow5mult+0xb0>)
 800b308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b30c:	f000 fb64 	bl	800b9d8 <__assert_func>
 800b310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b314:	6004      	str	r4, [r0, #0]
 800b316:	60c4      	str	r4, [r0, #12]
 800b318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b31c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b320:	b94c      	cbnz	r4, 800b336 <__pow5mult+0x66>
 800b322:	f240 2171 	movw	r1, #625	; 0x271
 800b326:	4630      	mov	r0, r6
 800b328:	f7ff ff16 	bl	800b158 <__i2b>
 800b32c:	2300      	movs	r3, #0
 800b32e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b332:	4604      	mov	r4, r0
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	f04f 0900 	mov.w	r9, #0
 800b33a:	07eb      	lsls	r3, r5, #31
 800b33c:	d50a      	bpl.n	800b354 <__pow5mult+0x84>
 800b33e:	4639      	mov	r1, r7
 800b340:	4622      	mov	r2, r4
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff1e 	bl	800b184 <__multiply>
 800b348:	4639      	mov	r1, r7
 800b34a:	4680      	mov	r8, r0
 800b34c:	4630      	mov	r0, r6
 800b34e:	f7ff fe47 	bl	800afe0 <_Bfree>
 800b352:	4647      	mov	r7, r8
 800b354:	106d      	asrs	r5, r5, #1
 800b356:	d00b      	beq.n	800b370 <__pow5mult+0xa0>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	b938      	cbnz	r0, 800b36c <__pow5mult+0x9c>
 800b35c:	4622      	mov	r2, r4
 800b35e:	4621      	mov	r1, r4
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff ff0f 	bl	800b184 <__multiply>
 800b366:	6020      	str	r0, [r4, #0]
 800b368:	f8c0 9000 	str.w	r9, [r0]
 800b36c:	4604      	mov	r4, r0
 800b36e:	e7e4      	b.n	800b33a <__pow5mult+0x6a>
 800b370:	4638      	mov	r0, r7
 800b372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b376:	bf00      	nop
 800b378:	08017f58 	.word	0x08017f58
 800b37c:	08017d21 	.word	0x08017d21
 800b380:	08017e08 	.word	0x08017e08

0800b384 <__lshift>:
 800b384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	6849      	ldr	r1, [r1, #4]
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	4607      	mov	r7, r0
 800b396:	4691      	mov	r9, r2
 800b398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b39c:	f108 0601 	add.w	r6, r8, #1
 800b3a0:	42b3      	cmp	r3, r6
 800b3a2:	db0b      	blt.n	800b3bc <__lshift+0x38>
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff fddb 	bl	800af60 <_Balloc>
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	b948      	cbnz	r0, 800b3c2 <__lshift+0x3e>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4b28      	ldr	r3, [pc, #160]	; (800b454 <__lshift+0xd0>)
 800b3b2:	4829      	ldr	r0, [pc, #164]	; (800b458 <__lshift+0xd4>)
 800b3b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3b8:	f000 fb0e 	bl	800b9d8 <__assert_func>
 800b3bc:	3101      	adds	r1, #1
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	e7ee      	b.n	800b3a0 <__lshift+0x1c>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f100 0114 	add.w	r1, r0, #20
 800b3c8:	f100 0210 	add.w	r2, r0, #16
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4553      	cmp	r3, sl
 800b3d0:	db33      	blt.n	800b43a <__lshift+0xb6>
 800b3d2:	6920      	ldr	r0, [r4, #16]
 800b3d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d8:	f104 0314 	add.w	r3, r4, #20
 800b3dc:	f019 091f 	ands.w	r9, r9, #31
 800b3e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3e8:	d02b      	beq.n	800b442 <__lshift+0xbe>
 800b3ea:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ee:	468a      	mov	sl, r1
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	fa00 f009 	lsl.w	r0, r0, r9
 800b3f8:	4302      	orrs	r2, r0
 800b3fa:	f84a 2b04 	str.w	r2, [sl], #4
 800b3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b402:	459c      	cmp	ip, r3
 800b404:	fa22 f20e 	lsr.w	r2, r2, lr
 800b408:	d8f3      	bhi.n	800b3f2 <__lshift+0x6e>
 800b40a:	ebac 0304 	sub.w	r3, ip, r4
 800b40e:	3b15      	subs	r3, #21
 800b410:	f023 0303 	bic.w	r3, r3, #3
 800b414:	3304      	adds	r3, #4
 800b416:	f104 0015 	add.w	r0, r4, #21
 800b41a:	4584      	cmp	ip, r0
 800b41c:	bf38      	it	cc
 800b41e:	2304      	movcc	r3, #4
 800b420:	50ca      	str	r2, [r1, r3]
 800b422:	b10a      	cbz	r2, 800b428 <__lshift+0xa4>
 800b424:	f108 0602 	add.w	r6, r8, #2
 800b428:	3e01      	subs	r6, #1
 800b42a:	4638      	mov	r0, r7
 800b42c:	612e      	str	r6, [r5, #16]
 800b42e:	4621      	mov	r1, r4
 800b430:	f7ff fdd6 	bl	800afe0 <_Bfree>
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b43e:	3301      	adds	r3, #1
 800b440:	e7c5      	b.n	800b3ce <__lshift+0x4a>
 800b442:	3904      	subs	r1, #4
 800b444:	f853 2b04 	ldr.w	r2, [r3], #4
 800b448:	f841 2f04 	str.w	r2, [r1, #4]!
 800b44c:	459c      	cmp	ip, r3
 800b44e:	d8f9      	bhi.n	800b444 <__lshift+0xc0>
 800b450:	e7ea      	b.n	800b428 <__lshift+0xa4>
 800b452:	bf00      	nop
 800b454:	08017d97 	.word	0x08017d97
 800b458:	08017e08 	.word	0x08017e08

0800b45c <__mcmp>:
 800b45c:	b530      	push	{r4, r5, lr}
 800b45e:	6902      	ldr	r2, [r0, #16]
 800b460:	690c      	ldr	r4, [r1, #16]
 800b462:	1b12      	subs	r2, r2, r4
 800b464:	d10e      	bne.n	800b484 <__mcmp+0x28>
 800b466:	f100 0314 	add.w	r3, r0, #20
 800b46a:	3114      	adds	r1, #20
 800b46c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b47c:	42a5      	cmp	r5, r4
 800b47e:	d003      	beq.n	800b488 <__mcmp+0x2c>
 800b480:	d305      	bcc.n	800b48e <__mcmp+0x32>
 800b482:	2201      	movs	r2, #1
 800b484:	4610      	mov	r0, r2
 800b486:	bd30      	pop	{r4, r5, pc}
 800b488:	4283      	cmp	r3, r0
 800b48a:	d3f3      	bcc.n	800b474 <__mcmp+0x18>
 800b48c:	e7fa      	b.n	800b484 <__mcmp+0x28>
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	e7f7      	b.n	800b484 <__mcmp+0x28>

0800b494 <__mdiff>:
 800b494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	460c      	mov	r4, r1
 800b49a:	4606      	mov	r6, r0
 800b49c:	4611      	mov	r1, r2
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4617      	mov	r7, r2
 800b4a2:	f7ff ffdb 	bl	800b45c <__mcmp>
 800b4a6:	1e05      	subs	r5, r0, #0
 800b4a8:	d110      	bne.n	800b4cc <__mdiff+0x38>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fd57 	bl	800af60 <_Balloc>
 800b4b2:	b930      	cbnz	r0, 800b4c2 <__mdiff+0x2e>
 800b4b4:	4b39      	ldr	r3, [pc, #228]	; (800b59c <__mdiff+0x108>)
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	f240 2132 	movw	r1, #562	; 0x232
 800b4bc:	4838      	ldr	r0, [pc, #224]	; (800b5a0 <__mdiff+0x10c>)
 800b4be:	f000 fa8b 	bl	800b9d8 <__assert_func>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	bfa4      	itt	ge
 800b4ce:	463b      	movge	r3, r7
 800b4d0:	4627      	movge	r7, r4
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	bfa6      	itte	ge
 800b4d8:	461c      	movge	r4, r3
 800b4da:	2500      	movge	r5, #0
 800b4dc:	2501      	movlt	r5, #1
 800b4de:	f7ff fd3f 	bl	800af60 <_Balloc>
 800b4e2:	b920      	cbnz	r0, 800b4ee <__mdiff+0x5a>
 800b4e4:	4b2d      	ldr	r3, [pc, #180]	; (800b59c <__mdiff+0x108>)
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4ec:	e7e6      	b.n	800b4bc <__mdiff+0x28>
 800b4ee:	693e      	ldr	r6, [r7, #16]
 800b4f0:	60c5      	str	r5, [r0, #12]
 800b4f2:	6925      	ldr	r5, [r4, #16]
 800b4f4:	f107 0114 	add.w	r1, r7, #20
 800b4f8:	f104 0914 	add.w	r9, r4, #20
 800b4fc:	f100 0e14 	add.w	lr, r0, #20
 800b500:	f107 0210 	add.w	r2, r7, #16
 800b504:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b508:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b50c:	46f2      	mov	sl, lr
 800b50e:	2700      	movs	r7, #0
 800b510:	f859 3b04 	ldr.w	r3, [r9], #4
 800b514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b518:	fa1f f883 	uxth.w	r8, r3
 800b51c:	fa17 f78b 	uxtah	r7, r7, fp
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	eba7 0808 	sub.w	r8, r7, r8
 800b526:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b52a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b52e:	fa1f f888 	uxth.w	r8, r8
 800b532:	141f      	asrs	r7, r3, #16
 800b534:	454d      	cmp	r5, r9
 800b536:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b53a:	f84a 3b04 	str.w	r3, [sl], #4
 800b53e:	d8e7      	bhi.n	800b510 <__mdiff+0x7c>
 800b540:	1b2b      	subs	r3, r5, r4
 800b542:	3b15      	subs	r3, #21
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	3304      	adds	r3, #4
 800b54a:	3415      	adds	r4, #21
 800b54c:	42a5      	cmp	r5, r4
 800b54e:	bf38      	it	cc
 800b550:	2304      	movcc	r3, #4
 800b552:	4419      	add	r1, r3
 800b554:	4473      	add	r3, lr
 800b556:	469e      	mov	lr, r3
 800b558:	460d      	mov	r5, r1
 800b55a:	4565      	cmp	r5, ip
 800b55c:	d30e      	bcc.n	800b57c <__mdiff+0xe8>
 800b55e:	f10c 0203 	add.w	r2, ip, #3
 800b562:	1a52      	subs	r2, r2, r1
 800b564:	f022 0203 	bic.w	r2, r2, #3
 800b568:	3903      	subs	r1, #3
 800b56a:	458c      	cmp	ip, r1
 800b56c:	bf38      	it	cc
 800b56e:	2200      	movcc	r2, #0
 800b570:	441a      	add	r2, r3
 800b572:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b576:	b17b      	cbz	r3, 800b598 <__mdiff+0x104>
 800b578:	6106      	str	r6, [r0, #16]
 800b57a:	e7a5      	b.n	800b4c8 <__mdiff+0x34>
 800b57c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b580:	fa17 f488 	uxtah	r4, r7, r8
 800b584:	1422      	asrs	r2, r4, #16
 800b586:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b58a:	b2a4      	uxth	r4, r4
 800b58c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b590:	f84e 4b04 	str.w	r4, [lr], #4
 800b594:	1417      	asrs	r7, r2, #16
 800b596:	e7e0      	b.n	800b55a <__mdiff+0xc6>
 800b598:	3e01      	subs	r6, #1
 800b59a:	e7ea      	b.n	800b572 <__mdiff+0xde>
 800b59c:	08017d97 	.word	0x08017d97
 800b5a0:	08017e08 	.word	0x08017e08

0800b5a4 <__d2b>:
 800b5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5a8:	4689      	mov	r9, r1
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	ec57 6b10 	vmov	r6, r7, d0
 800b5b0:	4690      	mov	r8, r2
 800b5b2:	f7ff fcd5 	bl	800af60 <_Balloc>
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	b930      	cbnz	r0, 800b5c8 <__d2b+0x24>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	4b25      	ldr	r3, [pc, #148]	; (800b654 <__d2b+0xb0>)
 800b5be:	4826      	ldr	r0, [pc, #152]	; (800b658 <__d2b+0xb4>)
 800b5c0:	f240 310a 	movw	r1, #778	; 0x30a
 800b5c4:	f000 fa08 	bl	800b9d8 <__assert_func>
 800b5c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5d0:	bb35      	cbnz	r5, 800b620 <__d2b+0x7c>
 800b5d2:	2e00      	cmp	r6, #0
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	d028      	beq.n	800b62a <__d2b+0x86>
 800b5d8:	4668      	mov	r0, sp
 800b5da:	9600      	str	r6, [sp, #0]
 800b5dc:	f7ff fd8c 	bl	800b0f8 <__lo0bits>
 800b5e0:	9900      	ldr	r1, [sp, #0]
 800b5e2:	b300      	cbz	r0, 800b626 <__d2b+0x82>
 800b5e4:	9a01      	ldr	r2, [sp, #4]
 800b5e6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	40c2      	lsrs	r2, r0
 800b5f2:	6163      	str	r3, [r4, #20]
 800b5f4:	9201      	str	r2, [sp, #4]
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	61a3      	str	r3, [r4, #24]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bf14      	ite	ne
 800b5fe:	2202      	movne	r2, #2
 800b600:	2201      	moveq	r2, #1
 800b602:	6122      	str	r2, [r4, #16]
 800b604:	b1d5      	cbz	r5, 800b63c <__d2b+0x98>
 800b606:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b60a:	4405      	add	r5, r0
 800b60c:	f8c9 5000 	str.w	r5, [r9]
 800b610:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b614:	f8c8 0000 	str.w	r0, [r8]
 800b618:	4620      	mov	r0, r4
 800b61a:	b003      	add	sp, #12
 800b61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b624:	e7d5      	b.n	800b5d2 <__d2b+0x2e>
 800b626:	6161      	str	r1, [r4, #20]
 800b628:	e7e5      	b.n	800b5f6 <__d2b+0x52>
 800b62a:	a801      	add	r0, sp, #4
 800b62c:	f7ff fd64 	bl	800b0f8 <__lo0bits>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	6163      	str	r3, [r4, #20]
 800b634:	2201      	movs	r2, #1
 800b636:	6122      	str	r2, [r4, #16]
 800b638:	3020      	adds	r0, #32
 800b63a:	e7e3      	b.n	800b604 <__d2b+0x60>
 800b63c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b644:	f8c9 0000 	str.w	r0, [r9]
 800b648:	6918      	ldr	r0, [r3, #16]
 800b64a:	f7ff fd35 	bl	800b0b8 <__hi0bits>
 800b64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b652:	e7df      	b.n	800b614 <__d2b+0x70>
 800b654:	08017d97 	.word	0x08017d97
 800b658:	08017e08 	.word	0x08017e08

0800b65c <_calloc_r>:
 800b65c:	b513      	push	{r0, r1, r4, lr}
 800b65e:	434a      	muls	r2, r1
 800b660:	4611      	mov	r1, r2
 800b662:	9201      	str	r2, [sp, #4]
 800b664:	f7fd fdb2 	bl	80091cc <_malloc_r>
 800b668:	4604      	mov	r4, r0
 800b66a:	b118      	cbz	r0, 800b674 <_calloc_r+0x18>
 800b66c:	9a01      	ldr	r2, [sp, #4]
 800b66e:	2100      	movs	r1, #0
 800b670:	f7fd fd54 	bl	800911c <memset>
 800b674:	4620      	mov	r0, r4
 800b676:	b002      	add	sp, #8
 800b678:	bd10      	pop	{r4, pc}

0800b67a <__sfputc_r>:
 800b67a:	6893      	ldr	r3, [r2, #8]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	2b00      	cmp	r3, #0
 800b680:	b410      	push	{r4}
 800b682:	6093      	str	r3, [r2, #8]
 800b684:	da08      	bge.n	800b698 <__sfputc_r+0x1e>
 800b686:	6994      	ldr	r4, [r2, #24]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	db01      	blt.n	800b690 <__sfputc_r+0x16>
 800b68c:	290a      	cmp	r1, #10
 800b68e:	d103      	bne.n	800b698 <__sfputc_r+0x1e>
 800b690:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b694:	f7fe bafc 	b.w	8009c90 <__swbuf_r>
 800b698:	6813      	ldr	r3, [r2, #0]
 800b69a:	1c58      	adds	r0, r3, #1
 800b69c:	6010      	str	r0, [r2, #0]
 800b69e:	7019      	strb	r1, [r3, #0]
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <__sfputs_r>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	18d5      	adds	r5, r2, r3
 800b6b2:	42ac      	cmp	r4, r5
 800b6b4:	d101      	bne.n	800b6ba <__sfputs_r+0x12>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e007      	b.n	800b6ca <__sfputs_r+0x22>
 800b6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6be:	463a      	mov	r2, r7
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ffda 	bl	800b67a <__sfputc_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d1f3      	bne.n	800b6b2 <__sfputs_r+0xa>
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6cc <_vfiprintf_r>:
 800b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	b09d      	sub	sp, #116	; 0x74
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	4698      	mov	r8, r3
 800b6d8:	4606      	mov	r6, r0
 800b6da:	b118      	cbz	r0, 800b6e4 <_vfiprintf_r+0x18>
 800b6dc:	6983      	ldr	r3, [r0, #24]
 800b6de:	b90b      	cbnz	r3, 800b6e4 <_vfiprintf_r+0x18>
 800b6e0:	f7ff fb28 	bl	800ad34 <__sinit>
 800b6e4:	4b89      	ldr	r3, [pc, #548]	; (800b90c <_vfiprintf_r+0x240>)
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	d11b      	bne.n	800b722 <_vfiprintf_r+0x56>
 800b6ea:	6875      	ldr	r5, [r6, #4]
 800b6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6ee:	07d9      	lsls	r1, r3, #31
 800b6f0:	d405      	bmi.n	800b6fe <_vfiprintf_r+0x32>
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	059a      	lsls	r2, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_vfiprintf_r+0x32>
 800b6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6fa:	f7ff fbbe 	bl	800ae7a <__retarget_lock_acquire_recursive>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	071b      	lsls	r3, r3, #28
 800b702:	d501      	bpl.n	800b708 <_vfiprintf_r+0x3c>
 800b704:	692b      	ldr	r3, [r5, #16]
 800b706:	b9eb      	cbnz	r3, 800b744 <_vfiprintf_r+0x78>
 800b708:	4629      	mov	r1, r5
 800b70a:	4630      	mov	r0, r6
 800b70c:	f7fe fb12 	bl	8009d34 <__swsetup_r>
 800b710:	b1c0      	cbz	r0, 800b744 <_vfiprintf_r+0x78>
 800b712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b714:	07dc      	lsls	r4, r3, #31
 800b716:	d50e      	bpl.n	800b736 <_vfiprintf_r+0x6a>
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	b01d      	add	sp, #116	; 0x74
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	4b7b      	ldr	r3, [pc, #492]	; (800b910 <_vfiprintf_r+0x244>)
 800b724:	429d      	cmp	r5, r3
 800b726:	d101      	bne.n	800b72c <_vfiprintf_r+0x60>
 800b728:	68b5      	ldr	r5, [r6, #8]
 800b72a:	e7df      	b.n	800b6ec <_vfiprintf_r+0x20>
 800b72c:	4b79      	ldr	r3, [pc, #484]	; (800b914 <_vfiprintf_r+0x248>)
 800b72e:	429d      	cmp	r5, r3
 800b730:	bf08      	it	eq
 800b732:	68f5      	ldreq	r5, [r6, #12]
 800b734:	e7da      	b.n	800b6ec <_vfiprintf_r+0x20>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	0598      	lsls	r0, r3, #22
 800b73a:	d4ed      	bmi.n	800b718 <_vfiprintf_r+0x4c>
 800b73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b73e:	f7ff fb9d 	bl	800ae7c <__retarget_lock_release_recursive>
 800b742:	e7e9      	b.n	800b718 <_vfiprintf_r+0x4c>
 800b744:	2300      	movs	r3, #0
 800b746:	9309      	str	r3, [sp, #36]	; 0x24
 800b748:	2320      	movs	r3, #32
 800b74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b752:	2330      	movs	r3, #48	; 0x30
 800b754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b918 <_vfiprintf_r+0x24c>
 800b758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b75c:	f04f 0901 	mov.w	r9, #1
 800b760:	4623      	mov	r3, r4
 800b762:	469a      	mov	sl, r3
 800b764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b768:	b10a      	cbz	r2, 800b76e <_vfiprintf_r+0xa2>
 800b76a:	2a25      	cmp	r2, #37	; 0x25
 800b76c:	d1f9      	bne.n	800b762 <_vfiprintf_r+0x96>
 800b76e:	ebba 0b04 	subs.w	fp, sl, r4
 800b772:	d00b      	beq.n	800b78c <_vfiprintf_r+0xc0>
 800b774:	465b      	mov	r3, fp
 800b776:	4622      	mov	r2, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff ff94 	bl	800b6a8 <__sfputs_r>
 800b780:	3001      	adds	r0, #1
 800b782:	f000 80aa 	beq.w	800b8da <_vfiprintf_r+0x20e>
 800b786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b788:	445a      	add	r2, fp
 800b78a:	9209      	str	r2, [sp, #36]	; 0x24
 800b78c:	f89a 3000 	ldrb.w	r3, [sl]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 80a2 	beq.w	800b8da <_vfiprintf_r+0x20e>
 800b796:	2300      	movs	r3, #0
 800b798:	f04f 32ff 	mov.w	r2, #4294967295
 800b79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a0:	f10a 0a01 	add.w	sl, sl, #1
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	9307      	str	r3, [sp, #28]
 800b7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ae:	4654      	mov	r4, sl
 800b7b0:	2205      	movs	r2, #5
 800b7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b6:	4858      	ldr	r0, [pc, #352]	; (800b918 <_vfiprintf_r+0x24c>)
 800b7b8:	f7f4 fd12 	bl	80001e0 <memchr>
 800b7bc:	9a04      	ldr	r2, [sp, #16]
 800b7be:	b9d8      	cbnz	r0, 800b7f8 <_vfiprintf_r+0x12c>
 800b7c0:	06d1      	lsls	r1, r2, #27
 800b7c2:	bf44      	itt	mi
 800b7c4:	2320      	movmi	r3, #32
 800b7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ca:	0713      	lsls	r3, r2, #28
 800b7cc:	bf44      	itt	mi
 800b7ce:	232b      	movmi	r3, #43	; 0x2b
 800b7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7da:	d015      	beq.n	800b808 <_vfiprintf_r+0x13c>
 800b7dc:	9a07      	ldr	r2, [sp, #28]
 800b7de:	4654      	mov	r4, sl
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	f04f 0c0a 	mov.w	ip, #10
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ec:	3b30      	subs	r3, #48	; 0x30
 800b7ee:	2b09      	cmp	r3, #9
 800b7f0:	d94e      	bls.n	800b890 <_vfiprintf_r+0x1c4>
 800b7f2:	b1b0      	cbz	r0, 800b822 <_vfiprintf_r+0x156>
 800b7f4:	9207      	str	r2, [sp, #28]
 800b7f6:	e014      	b.n	800b822 <_vfiprintf_r+0x156>
 800b7f8:	eba0 0308 	sub.w	r3, r0, r8
 800b7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b800:	4313      	orrs	r3, r2
 800b802:	9304      	str	r3, [sp, #16]
 800b804:	46a2      	mov	sl, r4
 800b806:	e7d2      	b.n	800b7ae <_vfiprintf_r+0xe2>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	1d19      	adds	r1, r3, #4
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	9103      	str	r1, [sp, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bfbb      	ittet	lt
 800b814:	425b      	neglt	r3, r3
 800b816:	f042 0202 	orrlt.w	r2, r2, #2
 800b81a:	9307      	strge	r3, [sp, #28]
 800b81c:	9307      	strlt	r3, [sp, #28]
 800b81e:	bfb8      	it	lt
 800b820:	9204      	strlt	r2, [sp, #16]
 800b822:	7823      	ldrb	r3, [r4, #0]
 800b824:	2b2e      	cmp	r3, #46	; 0x2e
 800b826:	d10c      	bne.n	800b842 <_vfiprintf_r+0x176>
 800b828:	7863      	ldrb	r3, [r4, #1]
 800b82a:	2b2a      	cmp	r3, #42	; 0x2a
 800b82c:	d135      	bne.n	800b89a <_vfiprintf_r+0x1ce>
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	1d1a      	adds	r2, r3, #4
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	9203      	str	r2, [sp, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfb8      	it	lt
 800b83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b83e:	3402      	adds	r4, #2
 800b840:	9305      	str	r3, [sp, #20]
 800b842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b928 <_vfiprintf_r+0x25c>
 800b846:	7821      	ldrb	r1, [r4, #0]
 800b848:	2203      	movs	r2, #3
 800b84a:	4650      	mov	r0, sl
 800b84c:	f7f4 fcc8 	bl	80001e0 <memchr>
 800b850:	b140      	cbz	r0, 800b864 <_vfiprintf_r+0x198>
 800b852:	2340      	movs	r3, #64	; 0x40
 800b854:	eba0 000a 	sub.w	r0, r0, sl
 800b858:	fa03 f000 	lsl.w	r0, r3, r0
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	4303      	orrs	r3, r0
 800b860:	3401      	adds	r4, #1
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b868:	482c      	ldr	r0, [pc, #176]	; (800b91c <_vfiprintf_r+0x250>)
 800b86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b86e:	2206      	movs	r2, #6
 800b870:	f7f4 fcb6 	bl	80001e0 <memchr>
 800b874:	2800      	cmp	r0, #0
 800b876:	d03f      	beq.n	800b8f8 <_vfiprintf_r+0x22c>
 800b878:	4b29      	ldr	r3, [pc, #164]	; (800b920 <_vfiprintf_r+0x254>)
 800b87a:	bb1b      	cbnz	r3, 800b8c4 <_vfiprintf_r+0x1f8>
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	3307      	adds	r3, #7
 800b880:	f023 0307 	bic.w	r3, r3, #7
 800b884:	3308      	adds	r3, #8
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88a:	443b      	add	r3, r7
 800b88c:	9309      	str	r3, [sp, #36]	; 0x24
 800b88e:	e767      	b.n	800b760 <_vfiprintf_r+0x94>
 800b890:	fb0c 3202 	mla	r2, ip, r2, r3
 800b894:	460c      	mov	r4, r1
 800b896:	2001      	movs	r0, #1
 800b898:	e7a5      	b.n	800b7e6 <_vfiprintf_r+0x11a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	3401      	adds	r4, #1
 800b89e:	9305      	str	r3, [sp, #20]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f04f 0c0a 	mov.w	ip, #10
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ac:	3a30      	subs	r2, #48	; 0x30
 800b8ae:	2a09      	cmp	r2, #9
 800b8b0:	d903      	bls.n	800b8ba <_vfiprintf_r+0x1ee>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0c5      	beq.n	800b842 <_vfiprintf_r+0x176>
 800b8b6:	9105      	str	r1, [sp, #20]
 800b8b8:	e7c3      	b.n	800b842 <_vfiprintf_r+0x176>
 800b8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8be:	4604      	mov	r4, r0
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e7f0      	b.n	800b8a6 <_vfiprintf_r+0x1da>
 800b8c4:	ab03      	add	r3, sp, #12
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4b16      	ldr	r3, [pc, #88]	; (800b924 <_vfiprintf_r+0x258>)
 800b8cc:	a904      	add	r1, sp, #16
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7fd fd76 	bl	80093c0 <_printf_float>
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	1c78      	adds	r0, r7, #1
 800b8d8:	d1d6      	bne.n	800b888 <_vfiprintf_r+0x1bc>
 800b8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8dc:	07d9      	lsls	r1, r3, #31
 800b8de:	d405      	bmi.n	800b8ec <_vfiprintf_r+0x220>
 800b8e0:	89ab      	ldrh	r3, [r5, #12]
 800b8e2:	059a      	lsls	r2, r3, #22
 800b8e4:	d402      	bmi.n	800b8ec <_vfiprintf_r+0x220>
 800b8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8e8:	f7ff fac8 	bl	800ae7c <__retarget_lock_release_recursive>
 800b8ec:	89ab      	ldrh	r3, [r5, #12]
 800b8ee:	065b      	lsls	r3, r3, #25
 800b8f0:	f53f af12 	bmi.w	800b718 <_vfiprintf_r+0x4c>
 800b8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8f6:	e711      	b.n	800b71c <_vfiprintf_r+0x50>
 800b8f8:	ab03      	add	r3, sp, #12
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	4b09      	ldr	r3, [pc, #36]	; (800b924 <_vfiprintf_r+0x258>)
 800b900:	a904      	add	r1, sp, #16
 800b902:	4630      	mov	r0, r6
 800b904:	f7fe f800 	bl	8009908 <_printf_i>
 800b908:	e7e4      	b.n	800b8d4 <_vfiprintf_r+0x208>
 800b90a:	bf00      	nop
 800b90c:	08017dc8 	.word	0x08017dc8
 800b910:	08017de8 	.word	0x08017de8
 800b914:	08017da8 	.word	0x08017da8
 800b918:	08017f64 	.word	0x08017f64
 800b91c:	08017f6e 	.word	0x08017f6e
 800b920:	080093c1 	.word	0x080093c1
 800b924:	0800b6a9 	.word	0x0800b6a9
 800b928:	08017f6a 	.word	0x08017f6a

0800b92c <__sread>:
 800b92c:	b510      	push	{r4, lr}
 800b92e:	460c      	mov	r4, r1
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	f000 f8d6 	bl	800bae4 <_read_r>
 800b938:	2800      	cmp	r0, #0
 800b93a:	bfab      	itete	ge
 800b93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b93e:	89a3      	ldrhlt	r3, [r4, #12]
 800b940:	181b      	addge	r3, r3, r0
 800b942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b946:	bfac      	ite	ge
 800b948:	6563      	strge	r3, [r4, #84]	; 0x54
 800b94a:	81a3      	strhlt	r3, [r4, #12]
 800b94c:	bd10      	pop	{r4, pc}

0800b94e <__swrite>:
 800b94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b952:	461f      	mov	r7, r3
 800b954:	898b      	ldrh	r3, [r1, #12]
 800b956:	05db      	lsls	r3, r3, #23
 800b958:	4605      	mov	r5, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	4616      	mov	r6, r2
 800b95e:	d505      	bpl.n	800b96c <__swrite+0x1e>
 800b960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b964:	2302      	movs	r3, #2
 800b966:	2200      	movs	r2, #0
 800b968:	f000 f898 	bl	800ba9c <_lseek_r>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	4632      	mov	r2, r6
 800b97a:	463b      	mov	r3, r7
 800b97c:	4628      	mov	r0, r5
 800b97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	f000 b817 	b.w	800b9b4 <_write_r>

0800b986 <__sseek>:
 800b986:	b510      	push	{r4, lr}
 800b988:	460c      	mov	r4, r1
 800b98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b98e:	f000 f885 	bl	800ba9c <_lseek_r>
 800b992:	1c43      	adds	r3, r0, #1
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	bf15      	itete	ne
 800b998:	6560      	strne	r0, [r4, #84]	; 0x54
 800b99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9a2:	81a3      	strheq	r3, [r4, #12]
 800b9a4:	bf18      	it	ne
 800b9a6:	81a3      	strhne	r3, [r4, #12]
 800b9a8:	bd10      	pop	{r4, pc}

0800b9aa <__sclose>:
 800b9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ae:	f000 b831 	b.w	800ba14 <_close_r>
	...

0800b9b4 <_write_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d07      	ldr	r5, [pc, #28]	; (800b9d4 <_write_r+0x20>)
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	4608      	mov	r0, r1
 800b9bc:	4611      	mov	r1, r2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	602a      	str	r2, [r5, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f7f5 fe28 	bl	8001618 <_write>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_write_r+0x1e>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_write_r+0x1e>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	20001348 	.word	0x20001348

0800b9d8 <__assert_func>:
 800b9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9da:	4614      	mov	r4, r2
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <__assert_func+0x2c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	68d8      	ldr	r0, [r3, #12]
 800b9e6:	b14c      	cbz	r4, 800b9fc <__assert_func+0x24>
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <__assert_func+0x30>)
 800b9ea:	9100      	str	r1, [sp, #0]
 800b9ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9f0:	4906      	ldr	r1, [pc, #24]	; (800ba0c <__assert_func+0x34>)
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	f000 f81e 	bl	800ba34 <fiprintf>
 800b9f8:	f000 f893 	bl	800bb22 <abort>
 800b9fc:	4b04      	ldr	r3, [pc, #16]	; (800ba10 <__assert_func+0x38>)
 800b9fe:	461c      	mov	r4, r3
 800ba00:	e7f3      	b.n	800b9ea <__assert_func+0x12>
 800ba02:	bf00      	nop
 800ba04:	200007e8 	.word	0x200007e8
 800ba08:	08017f75 	.word	0x08017f75
 800ba0c:	08017f82 	.word	0x08017f82
 800ba10:	08017fb0 	.word	0x08017fb0

0800ba14 <_close_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d06      	ldr	r5, [pc, #24]	; (800ba30 <_close_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f000 f9ea 	bl	800bdf8 <_close>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_close_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_close_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	20001348 	.word	0x20001348

0800ba34 <fiprintf>:
 800ba34:	b40e      	push	{r1, r2, r3}
 800ba36:	b503      	push	{r0, r1, lr}
 800ba38:	4601      	mov	r1, r0
 800ba3a:	ab03      	add	r3, sp, #12
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <fiprintf+0x20>)
 800ba3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba42:	6800      	ldr	r0, [r0, #0]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	f7ff fe41 	bl	800b6cc <_vfiprintf_r>
 800ba4a:	b002      	add	sp, #8
 800ba4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba50:	b003      	add	sp, #12
 800ba52:	4770      	bx	lr
 800ba54:	200007e8 	.word	0x200007e8

0800ba58 <_fstat_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	; (800ba78 <_fstat_r+0x20>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	4611      	mov	r1, r2
 800ba64:	602b      	str	r3, [r5, #0]
 800ba66:	f000 f9cf 	bl	800be08 <_fstat>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d102      	bne.n	800ba74 <_fstat_r+0x1c>
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	b103      	cbz	r3, 800ba74 <_fstat_r+0x1c>
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	bd38      	pop	{r3, r4, r5, pc}
 800ba76:	bf00      	nop
 800ba78:	20001348 	.word	0x20001348

0800ba7c <_isatty_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d06      	ldr	r5, [pc, #24]	; (800ba98 <_isatty_r+0x1c>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	602b      	str	r3, [r5, #0]
 800ba88:	f000 f9ce 	bl	800be28 <_isatty>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_isatty_r+0x1a>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_isatty_r+0x1a>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20001348 	.word	0x20001348

0800ba9c <_lseek_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	; (800babc <_lseek_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f000 f9cc 	bl	800be48 <_lseek>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_lseek_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_lseek_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001348 	.word	0x20001348

0800bac0 <__ascii_mbtowc>:
 800bac0:	b082      	sub	sp, #8
 800bac2:	b901      	cbnz	r1, 800bac6 <__ascii_mbtowc+0x6>
 800bac4:	a901      	add	r1, sp, #4
 800bac6:	b142      	cbz	r2, 800bada <__ascii_mbtowc+0x1a>
 800bac8:	b14b      	cbz	r3, 800bade <__ascii_mbtowc+0x1e>
 800baca:	7813      	ldrb	r3, [r2, #0]
 800bacc:	600b      	str	r3, [r1, #0]
 800bace:	7812      	ldrb	r2, [r2, #0]
 800bad0:	1e10      	subs	r0, r2, #0
 800bad2:	bf18      	it	ne
 800bad4:	2001      	movne	r0, #1
 800bad6:	b002      	add	sp, #8
 800bad8:	4770      	bx	lr
 800bada:	4610      	mov	r0, r2
 800badc:	e7fb      	b.n	800bad6 <__ascii_mbtowc+0x16>
 800bade:	f06f 0001 	mvn.w	r0, #1
 800bae2:	e7f8      	b.n	800bad6 <__ascii_mbtowc+0x16>

0800bae4 <_read_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d07      	ldr	r5, [pc, #28]	; (800bb04 <_read_r+0x20>)
 800bae8:	4604      	mov	r4, r0
 800baea:	4608      	mov	r0, r1
 800baec:	4611      	mov	r1, r2
 800baee:	2200      	movs	r2, #0
 800baf0:	602a      	str	r2, [r5, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	f000 f9b0 	bl	800be58 <_read>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_read_r+0x1e>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_read_r+0x1e>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	20001348 	.word	0x20001348

0800bb08 <__ascii_wctomb>:
 800bb08:	b149      	cbz	r1, 800bb1e <__ascii_wctomb+0x16>
 800bb0a:	2aff      	cmp	r2, #255	; 0xff
 800bb0c:	bf85      	ittet	hi
 800bb0e:	238a      	movhi	r3, #138	; 0x8a
 800bb10:	6003      	strhi	r3, [r0, #0]
 800bb12:	700a      	strbls	r2, [r1, #0]
 800bb14:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb18:	bf98      	it	ls
 800bb1a:	2001      	movls	r0, #1
 800bb1c:	4770      	bx	lr
 800bb1e:	4608      	mov	r0, r1
 800bb20:	4770      	bx	lr

0800bb22 <abort>:
 800bb22:	b508      	push	{r3, lr}
 800bb24:	2006      	movs	r0, #6
 800bb26:	f000 f82b 	bl	800bb80 <raise>
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	f000 f99c 	bl	800be68 <_exit>

0800bb30 <_raise_r>:
 800bb30:	291f      	cmp	r1, #31
 800bb32:	b538      	push	{r3, r4, r5, lr}
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	d904      	bls.n	800bb44 <_raise_r+0x14>
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb46:	b112      	cbz	r2, 800bb4e <_raise_r+0x1e>
 800bb48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb4c:	b94b      	cbnz	r3, 800bb62 <_raise_r+0x32>
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 f830 	bl	800bbb4 <_getpid_r>
 800bb54:	462a      	mov	r2, r5
 800bb56:	4601      	mov	r1, r0
 800bb58:	4620      	mov	r0, r4
 800bb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb5e:	f000 b817 	b.w	800bb90 <_kill_r>
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d00a      	beq.n	800bb7c <_raise_r+0x4c>
 800bb66:	1c59      	adds	r1, r3, #1
 800bb68:	d103      	bne.n	800bb72 <_raise_r+0x42>
 800bb6a:	2316      	movs	r3, #22
 800bb6c:	6003      	str	r3, [r0, #0]
 800bb6e:	2001      	movs	r0, #1
 800bb70:	e7e7      	b.n	800bb42 <_raise_r+0x12>
 800bb72:	2400      	movs	r4, #0
 800bb74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb78:	4628      	mov	r0, r5
 800bb7a:	4798      	blx	r3
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	e7e0      	b.n	800bb42 <_raise_r+0x12>

0800bb80 <raise>:
 800bb80:	4b02      	ldr	r3, [pc, #8]	; (800bb8c <raise+0xc>)
 800bb82:	4601      	mov	r1, r0
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	f7ff bfd3 	b.w	800bb30 <_raise_r>
 800bb8a:	bf00      	nop
 800bb8c:	200007e8 	.word	0x200007e8

0800bb90 <_kill_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d07      	ldr	r5, [pc, #28]	; (800bbb0 <_kill_r+0x20>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	602b      	str	r3, [r5, #0]
 800bb9e:	f000 f94b 	bl	800be38 <_kill>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	d102      	bne.n	800bbac <_kill_r+0x1c>
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	b103      	cbz	r3, 800bbac <_kill_r+0x1c>
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
 800bbae:	bf00      	nop
 800bbb0:	20001348 	.word	0x20001348

0800bbb4 <_getpid_r>:
 800bbb4:	f000 b930 	b.w	800be18 <_getpid>

0800bbb8 <expf>:
 800bbb8:	b508      	push	{r3, lr}
 800bbba:	ed2d 8b02 	vpush	{d8}
 800bbbe:	eef0 8a40 	vmov.f32	s17, s0
 800bbc2:	f000 f837 	bl	800bc34 <__ieee754_expf>
 800bbc6:	4b16      	ldr	r3, [pc, #88]	; (800bc20 <expf+0x68>)
 800bbc8:	f993 3000 	ldrsb.w	r3, [r3]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	eeb0 8a40 	vmov.f32	s16, s0
 800bbd2:	d011      	beq.n	800bbf8 <expf+0x40>
 800bbd4:	eeb0 0a68 	vmov.f32	s0, s17
 800bbd8:	f000 f900 	bl	800bddc <finitef>
 800bbdc:	b160      	cbz	r0, 800bbf8 <expf+0x40>
 800bbde:	eddf 7a11 	vldr	s15, [pc, #68]	; 800bc24 <expf+0x6c>
 800bbe2:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbea:	dd0a      	ble.n	800bc02 <expf+0x4a>
 800bbec:	f7fd fa56 	bl	800909c <__errno>
 800bbf0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800bc28 <expf+0x70>
 800bbf4:	2322      	movs	r3, #34	; 0x22
 800bbf6:	6003      	str	r3, [r0, #0]
 800bbf8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbfc:	ecbd 8b02 	vpop	{d8}
 800bc00:	bd08      	pop	{r3, pc}
 800bc02:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800bc2c <expf+0x74>
 800bc06:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0e:	d5f3      	bpl.n	800bbf8 <expf+0x40>
 800bc10:	f7fd fa44 	bl	800909c <__errno>
 800bc14:	2322      	movs	r3, #34	; 0x22
 800bc16:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800bc30 <expf+0x78>
 800bc1a:	6003      	str	r3, [r0, #0]
 800bc1c:	e7ec      	b.n	800bbf8 <expf+0x40>
 800bc1e:	bf00      	nop
 800bc20:	200009b8 	.word	0x200009b8
 800bc24:	42b17180 	.word	0x42b17180
 800bc28:	7f800000 	.word	0x7f800000
 800bc2c:	c2cff1b5 	.word	0xc2cff1b5
 800bc30:	00000000 	.word	0x00000000

0800bc34 <__ieee754_expf>:
 800bc34:	ee10 2a10 	vmov	r2, s0
 800bc38:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bc3c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bc40:	d902      	bls.n	800bc48 <__ieee754_expf+0x14>
 800bc42:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc46:	4770      	bx	lr
 800bc48:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800bc4c:	d106      	bne.n	800bc5c <__ieee754_expf+0x28>
 800bc4e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800bd94 <__ieee754_expf+0x160>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	bf18      	it	ne
 800bc56:	eeb0 0a67 	vmovne.f32	s0, s15
 800bc5a:	4770      	bx	lr
 800bc5c:	484e      	ldr	r0, [pc, #312]	; (800bd98 <__ieee754_expf+0x164>)
 800bc5e:	4282      	cmp	r2, r0
 800bc60:	dd04      	ble.n	800bc6c <__ieee754_expf+0x38>
 800bc62:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800bd9c <__ieee754_expf+0x168>
 800bc66:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bc6a:	4770      	bx	lr
 800bc6c:	2a00      	cmp	r2, #0
 800bc6e:	da03      	bge.n	800bc78 <__ieee754_expf+0x44>
 800bc70:	4a4b      	ldr	r2, [pc, #300]	; (800bda0 <__ieee754_expf+0x16c>)
 800bc72:	4291      	cmp	r1, r2
 800bc74:	f200 808a 	bhi.w	800bd8c <__ieee754_expf+0x158>
 800bc78:	4a4a      	ldr	r2, [pc, #296]	; (800bda4 <__ieee754_expf+0x170>)
 800bc7a:	4291      	cmp	r1, r2
 800bc7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc80:	d954      	bls.n	800bd2c <__ieee754_expf+0xf8>
 800bc82:	4a49      	ldr	r2, [pc, #292]	; (800bda8 <__ieee754_expf+0x174>)
 800bc84:	4291      	cmp	r1, r2
 800bc86:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800bc8a:	d836      	bhi.n	800bcfa <__ieee754_expf+0xc6>
 800bc8c:	4947      	ldr	r1, [pc, #284]	; (800bdac <__ieee754_expf+0x178>)
 800bc8e:	4411      	add	r1, r2
 800bc90:	ed91 7a00 	vldr	s14, [r1]
 800bc94:	4946      	ldr	r1, [pc, #280]	; (800bdb0 <__ieee754_expf+0x17c>)
 800bc96:	440a      	add	r2, r1
 800bc98:	edd2 7a00 	vldr	s15, [r2]
 800bc9c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bca0:	f1c3 0201 	rsb	r2, r3, #1
 800bca4:	1ad2      	subs	r2, r2, r3
 800bca6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bcaa:	ee60 6a00 	vmul.f32	s13, s0, s0
 800bcae:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bdb4 <__ieee754_expf+0x180>
 800bcb2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800bdb8 <__ieee754_expf+0x184>
 800bcb6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800bcba:	eddf 5a40 	vldr	s11, [pc, #256]	; 800bdbc <__ieee754_expf+0x188>
 800bcbe:	eee5 5a26 	vfma.f32	s11, s10, s13
 800bcc2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800bdc0 <__ieee754_expf+0x18c>
 800bcc6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800bcca:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bdc4 <__ieee754_expf+0x190>
 800bcce:	eee5 5a26 	vfma.f32	s11, s10, s13
 800bcd2:	eeb0 5a40 	vmov.f32	s10, s0
 800bcd6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800bcda:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bcde:	eef0 6a45 	vmov.f32	s13, s10
 800bce2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800bce6:	bb92      	cbnz	r2, 800bd4e <__ieee754_expf+0x11a>
 800bce8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800bcec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bcf0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bcf4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800bcf8:	4770      	bx	lr
 800bcfa:	4b33      	ldr	r3, [pc, #204]	; (800bdc8 <__ieee754_expf+0x194>)
 800bcfc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800bdcc <__ieee754_expf+0x198>
 800bd00:	4413      	add	r3, r2
 800bd02:	edd3 7a00 	vldr	s15, [r3]
 800bd06:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bd0a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800bdd0 <__ieee754_expf+0x19c>
 800bd0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd12:	ee17 2a90 	vmov	r2, s15
 800bd16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd1a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bd1e:	eeb0 7a40 	vmov.f32	s14, s0
 800bd22:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bdd4 <__ieee754_expf+0x1a0>
 800bd26:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bd2a:	e7bc      	b.n	800bca6 <__ieee754_expf+0x72>
 800bd2c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800bd30:	d20b      	bcs.n	800bd4a <__ieee754_expf+0x116>
 800bd32:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800bd9c <__ieee754_expf+0x168>
 800bd36:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bd3a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	dd02      	ble.n	800bd4a <__ieee754_expf+0x116>
 800bd44:	ee30 0a06 	vadd.f32	s0, s0, s12
 800bd48:	4770      	bx	lr
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	e7ad      	b.n	800bcaa <__ieee754_expf+0x76>
 800bd4e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800bd52:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800bd56:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800bd5a:	bfb8      	it	lt
 800bd5c:	3264      	addlt	r2, #100	; 0x64
 800bd5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bd62:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800bd66:	ee76 7a40 	vsub.f32	s15, s12, s0
 800bd6a:	ee17 3a90 	vmov	r3, s15
 800bd6e:	bfab      	itete	ge
 800bd70:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bd74:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bd78:	ee00 3a10 	vmovge	s0, r3
 800bd7c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800bdd8 <__ieee754_expf+0x1a4>
 800bd80:	bfbc      	itt	lt
 800bd82:	ee00 3a10 	vmovlt	s0, r3
 800bd86:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bd8a:	4770      	bx	lr
 800bd8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd94 <__ieee754_expf+0x160>
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	00000000 	.word	0x00000000
 800bd98:	42b17217 	.word	0x42b17217
 800bd9c:	7149f2ca 	.word	0x7149f2ca
 800bda0:	42cff1b5 	.word	0x42cff1b5
 800bda4:	3eb17218 	.word	0x3eb17218
 800bda8:	3f851591 	.word	0x3f851591
 800bdac:	080180c4 	.word	0x080180c4
 800bdb0:	080180cc 	.word	0x080180cc
 800bdb4:	3331bb4c 	.word	0x3331bb4c
 800bdb8:	b5ddea0e 	.word	0xb5ddea0e
 800bdbc:	388ab355 	.word	0x388ab355
 800bdc0:	bb360b61 	.word	0xbb360b61
 800bdc4:	3e2aaaab 	.word	0x3e2aaaab
 800bdc8:	080180bc 	.word	0x080180bc
 800bdcc:	3fb8aa3b 	.word	0x3fb8aa3b
 800bdd0:	3f317180 	.word	0x3f317180
 800bdd4:	3717f7d1 	.word	0x3717f7d1
 800bdd8:	0d800000 	.word	0x0d800000

0800bddc <finitef>:
 800bddc:	b082      	sub	sp, #8
 800bdde:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bde2:	9801      	ldr	r0, [sp, #4]
 800bde4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bde8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bdec:	bfac      	ite	ge
 800bdee:	2000      	movge	r0, #0
 800bdf0:	2001      	movlt	r0, #1
 800bdf2:	b002      	add	sp, #8
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <_close>:
 800bdf8:	4b02      	ldr	r3, [pc, #8]	; (800be04 <_close+0xc>)
 800bdfa:	2258      	movs	r2, #88	; 0x58
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800be02:	4770      	bx	lr
 800be04:	20001348 	.word	0x20001348

0800be08 <_fstat>:
 800be08:	4b02      	ldr	r3, [pc, #8]	; (800be14 <_fstat+0xc>)
 800be0a:	2258      	movs	r2, #88	; 0x58
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	f04f 30ff 	mov.w	r0, #4294967295
 800be12:	4770      	bx	lr
 800be14:	20001348 	.word	0x20001348

0800be18 <_getpid>:
 800be18:	4b02      	ldr	r3, [pc, #8]	; (800be24 <_getpid+0xc>)
 800be1a:	2258      	movs	r2, #88	; 0x58
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	f04f 30ff 	mov.w	r0, #4294967295
 800be22:	4770      	bx	lr
 800be24:	20001348 	.word	0x20001348

0800be28 <_isatty>:
 800be28:	4b02      	ldr	r3, [pc, #8]	; (800be34 <_isatty+0xc>)
 800be2a:	2258      	movs	r2, #88	; 0x58
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	2000      	movs	r0, #0
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	20001348 	.word	0x20001348

0800be38 <_kill>:
 800be38:	4b02      	ldr	r3, [pc, #8]	; (800be44 <_kill+0xc>)
 800be3a:	2258      	movs	r2, #88	; 0x58
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	f04f 30ff 	mov.w	r0, #4294967295
 800be42:	4770      	bx	lr
 800be44:	20001348 	.word	0x20001348

0800be48 <_lseek>:
 800be48:	4b02      	ldr	r3, [pc, #8]	; (800be54 <_lseek+0xc>)
 800be4a:	2258      	movs	r2, #88	; 0x58
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	4770      	bx	lr
 800be54:	20001348 	.word	0x20001348

0800be58 <_read>:
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <_read+0xc>)
 800be5a:	2258      	movs	r2, #88	; 0x58
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	f04f 30ff 	mov.w	r0, #4294967295
 800be62:	4770      	bx	lr
 800be64:	20001348 	.word	0x20001348

0800be68 <_exit>:
 800be68:	e7fe      	b.n	800be68 <_exit>
	...

0800be6c <_init>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	bf00      	nop
 800be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be72:	bc08      	pop	{r3}
 800be74:	469e      	mov	lr, r3
 800be76:	4770      	bx	lr

0800be78 <_fini>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr
